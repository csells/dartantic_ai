{"protocolVersion":"0.1.1","runnerVersion":"1.26.2","pid":17819,"type":"start","time":0}
{"suite":{"id":0,"platform":"vm","path":"test/model_stability_test.dart"},"type":"suite","time":0}
{"test":{"id":1,"name":"loading test/model_stability_test.dart","suiteID":0,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1}
{"suite":{"id":2,"platform":"vm","path":"test/secure_api_key_manager_test.dart"},"type":"suite","time":5}
{"test":{"id":3,"name":"loading test/secure_api_key_manager_test.dart","suiteID":2,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":5}
{"suite":{"id":4,"platform":"vm","path":"test/langchain_regression_test.dart"},"type":"suite","time":6}
{"test":{"id":5,"name":"loading test/langchain_regression_test.dart","suiteID":4,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6}
{"suite":{"id":6,"platform":"vm","path":"test/mcp_client_test.dart"},"type":"suite","time":6}
{"test":{"id":7,"name":"loading test/mcp_client_test.dart","suiteID":6,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":7}
{"suite":{"id":8,"platform":"vm","path":"test/openai_multiple_tool_results_test.dart"},"type":"suite","time":7}
{"test":{"id":9,"name":"loading test/openai_multiple_tool_results_test.dart","suiteID":8,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":7}
{"suite":{"id":10,"platform":"vm","path":"test/gemini_tool_id_consistency_test.dart"},"type":"suite","time":7}
{"test":{"id":11,"name":"loading test/gemini_tool_id_consistency_test.dart","suiteID":10,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":7}
{"count":16,"time":9,"type":"allSuites"}
{"testID":1,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":526}
{"group":{"id":12,"suiteID":0,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":null,"column":null,"url":null},"type":"group","time":528}
{"group":{"id":13,"suiteID":0,"parentID":12,"name":"Model Stability Detection","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":7,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"group","time":528}
{"test":{"id":14,"name":"Model Stability Detection GeminiProvider sets stable field correctly","suiteID":0,"groupIDs":[12,13],"metadata":{"skip":false,"skipReason":null},"line":8,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"testStart","time":528}
{"testID":14,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":540}
{"testID":3,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":589}
{"group":{"id":15,"suiteID":2,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":null,"column":null,"url":null},"type":"group","time":589}
{"group":{"id":16,"suiteID":2,"parentID":15,"name":"SecureApiKeyManager","metadata":{"skip":false,"skipReason":null},"testCount":23,"line":5,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":589}
{"group":{"id":17,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Provider Name Normalization","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":17,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":589}
{"test":{"id":18,"name":"SecureApiKeyManager Provider Name Normalization should normalize provider aliases","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":18,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":589}
{"testID":18,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":599}
{"test":{"id":19,"name":"SecureApiKeyManager Provider Name Normalization should handle provider aliases","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":23,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":600}
{"testID":19,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":600}
{"test":{"id":20,"name":"SecureApiKeyManager Provider Name Normalization should return null for unsupported providers","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":29,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":600}
{"testID":20,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":601}
{"group":{"id":21,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager API Key Validation","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":34,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":601}
{"test":{"id":22,"name":"SecureApiKeyManager API Key Validation should validate OpenAI API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":35,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":601}
{"testID":22,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":605}
{"test":{"id":23,"name":"SecureApiKeyManager API Key Validation should validate Anthropic API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":47,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":605}
{"testID":23,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":606}
{"test":{"id":24,"name":"SecureApiKeyManager API Key Validation should validate OpenRouter API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":59,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":606}
{"testID":24,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":607}
{"test":{"id":25,"name":"SecureApiKeyManager API Key Validation should validate HuggingFace API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":71,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":607}
{"testID":25,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":607}
{"test":{"id":26,"name":"SecureApiKeyManager API Key Validation should prevent cross-provider key usage","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":83,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":608}
{"testID":26,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":608}
{"test":{"id":27,"name":"SecureApiKeyManager API Key Validation should reject empty API keys","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":97,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":609}
{"testID":27,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":609}
{"group":{"id":28,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Key Storage and Retrieval","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":105,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":609}
{"test":{"id":29,"name":"SecureApiKeyManager Key Storage and Retrieval should store and retrieve API keys correctly","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":106,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":609}
{"testID":29,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":611}
{"test":{"id":30,"name":"SecureApiKeyManager Key Storage and Retrieval should return null for non-existent keys","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":113,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":611}
{"testID":30,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":613}
{"test":{"id":31,"name":"SecureApiKeyManager Key Storage and Retrieval should support key management by provider name","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":117,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":614}
{"testID":31,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":615}
{"test":{"id":32,"name":"SecureApiKeyManager Key Storage and Retrieval should handle provider aliases in name-based operations","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":124,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":615}
{"testID":32,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":616}
{"test":{"id":33,"name":"SecureApiKeyManager Key Storage and Retrieval should throw error for unsupported provider names","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":133,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":616}
{"testID":33,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":618}
{"test":{"id":34,"name":"SecureApiKeyManager Key Storage and Retrieval should return null for unsupported provider names in get operations","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":140,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":618}
{"testID":5,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":629}
{"group":{"id":35,"suiteID":4,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":29,"line":null,"column":null,"url":null},"type":"group","time":630}
{"group":{"id":36,"suiteID":4,"parentID":35,"name":"Langchain Integration Regression Tests","metadata":{"skip":false,"skipReason":null},"testCount":29,"line":9,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":630}
{"test":{"id":37,"name":"Langchain Integration Regression Tests (setUpAll)","suiteID":4,"groupIDs":[35,36],"metadata":{"skip":false,"skipReason":null},"line":10,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":630}
{"testID":34,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":630}
{"group":{"id":38,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Key Isolation","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":145,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":630}
{"test":{"id":39,"name":"SecureApiKeyManager Key Isolation should maintain isolation between providers","suiteID":2,"groupIDs":[15,16,38],"metadata":{"skip":false,"skipReason":null},"line":146,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":630}
{"testID":39,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":631}
{"test":{"id":40,"name":"SecureApiKeyManager Key Isolation should clear keys for specific providers only","suiteID":2,"groupIDs":[15,16,38],"metadata":{"skip":false,"skipReason":null},"line":165,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":631}
{"testID":40,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":632}
{"test":{"id":41,"name":"SecureApiKeyManager Key Isolation should clear all keys when requested","suiteID":2,"groupIDs":[15,16,38],"metadata":{"skip":false,"skipReason":null},"line":178,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":632}
{"testID":41,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":632}
{"group":{"id":42,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Configuration Validation","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":189,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":632}
{"test":{"id":43,"name":"SecureApiKeyManager Configuration Validation should validate configuration and return issues","suiteID":2,"groupIDs":[15,16,42],"metadata":{"skip":false,"skipReason":null},"line":190,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":632}
{"testID":43,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":634}
{"test":{"id":44,"name":"SecureApiKeyManager Configuration Validation should list configured providers","suiteID":2,"groupIDs":[15,16,42],"metadata":{"skip":false,"skipReason":null},"line":200,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":634}
{"testID":44,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":634}
{"group":{"id":45,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Singleton Behavior","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":211,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":635}
{"test":{"id":46,"name":"SecureApiKeyManager Singleton Behavior should maintain singleton instance","suiteID":2,"groupIDs":[15,16,45],"metadata":{"skip":false,"skipReason":null},"line":212,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":635}
{"testID":9,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":635}
{"group":{"id":47,"suiteID":8,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":null,"column":null,"url":null},"type":"group","time":635}
{"test":{"id":48,"name":"(setUpAll)","suiteID":8,"groupIDs":[47],"metadata":{"skip":false,"skipReason":null},"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"testStart","time":636}
{"testID":46,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":636}
{"test":{"id":49,"name":"SecureApiKeyManager Singleton Behavior should maintain state across instance calls","suiteID":2,"groupIDs":[15,16,45],"metadata":{"skip":false,"skipReason":null},"line":219,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":636}
{"testID":49,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":636}
{"group":{"id":50,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Google Provider Special Cases","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":227,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":637}
{"test":{"id":51,"name":"SecureApiKeyManager Google Provider Special Cases should handle both GOOGLE_API_KEY and GEMINI_API_KEY aliases","suiteID":2,"groupIDs":[15,16,50],"metadata":{"skip":false,"skipReason":null},"line":228,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":637}
{"testID":51,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":637}
{"testID":7,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":645}
{"group":{"id":52,"suiteID":6,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":null,"column":null,"url":null},"type":"group","time":645}
{"group":{"id":53,"suiteID":6,"parentID":52,"name":"McpClient Tests","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":11,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":645}
{"group":{"id":54,"suiteID":6,"parentID":53,"name":"McpClient Tests remote server configuration","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":12,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":645}
{"test":{"id":55,"name":"McpClient Tests remote server configuration creates remote server with required parameters","suiteID":6,"groupIDs":[52,53,54],"metadata":{"skip":false,"skipReason":null},"line":13,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":645}
{"group":{"id":56,"suiteID":2,"parentID":15,"name":"Integration with Legacy Environment","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":240,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":646}
{"test":{"id":57,"name":"Integration with Legacy Environment should work with legacy Agent.environment for backward compatibility","suiteID":2,"groupIDs":[15,56],"metadata":{"skip":false,"skipReason":null},"line":241,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":646}
{"testID":37,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":646}
{"testID":37,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":646}
{"testID":37,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":646}
{"testID":48,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":646}
{"group":{"id":58,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Original Provider Functionality","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":646}
{"test":{"id":59,"name":"Langchain Integration Regression Tests Original Provider Functionality original OpenAI provider still works","suiteID":4,"groupIDs":[35,36,58],"metadata":{"skip":false,"skipReason":null},"line":22,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":646}
{"testID":57,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":646}
{"group":{"id":60,"suiteID":8,"parentID":47,"name":"OpenAI Multiple Tool Results Bug","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":17,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"group","time":647}
{"test":{"id":61,"name":"OpenAI Multiple Tool Results Bug should handle multiple tool results in a single message correctly","suiteID":8,"groupIDs":[47,60],"metadata":{"skip":false,"skipReason":null},"line":35,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"testStart","time":647}
{"suite":{"id":62,"platform":"vm","path":"test/gemini_tools_test.dart"},"type":"suite","time":650}
{"test":{"id":63,"name":"loading test/gemini_tools_test.dart","suiteID":62,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":650}
{"testID":59,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":651}
{"testID":61,"messageType":"print","message":"\n=== TESTING MULTIPLE TOOL RESULTS IN SINGLE MESSAGE ===","type":"print","time":651}
{"testID":61,"messageType":"print","message":"This structure has multiple tool results in user role messages","type":"print","time":651}
{"testID":59,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":654}
{"test":{"id":64,"name":"Langchain Integration Regression Tests Original Provider Functionality original Google provider still works","suiteID":4,"groupIDs":[35,36,58],"metadata":{"skip":false,"skipReason":null},"line":39,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":654}
{"testID":55,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":654}
{"test":{"id":65,"name":"McpClient Tests remote server configuration creates remote server with headers","suiteID":6,"groupIDs":[52,53,54],"metadata":{"skip":false,"skipReason":null},"line":24,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":655}
{"testID":64,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":655}
{"testID":65,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":655}
{"group":{"id":66,"suiteID":6,"parentID":53,"name":"McpClient Tests local server configuration","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":35,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":655}
{"test":{"id":67,"name":"McpClient Tests local server configuration creates local server with required parameters","suiteID":6,"groupIDs":[52,53,66],"metadata":{"skip":false,"skipReason":null},"line":36,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":655}
{"testID":67,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":656}
{"test":{"id":68,"name":"McpClient Tests local server configuration creates local server with environment variables","suiteID":6,"groupIDs":[52,53,66],"metadata":{"skip":false,"skipReason":null},"line":49,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":656}
{"testID":68,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":657}
{"group":{"id":69,"suiteID":6,"parentID":53,"name":"McpClient Tests Hugging Face MCP server integration","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":60,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":657}
{"test":{"id":70,"name":"McpClient Tests Hugging Face MCP server integration can connect to Hugging Face MCP server","suiteID":6,"groupIDs":[52,53,69],"metadata":{"skip":false,"skipReason":null},"line":74,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":657}
{"testID":64,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":657}
{"test":{"id":71,"name":"Langchain Integration Regression Tests Original Provider Functionality provider aliases still work","suiteID":4,"groupIDs":[35,36,58],"metadata":{"skip":false,"skipReason":null},"line":56,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":657}
{"testID":71,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":658}
{"testID":71,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":658}
{"test":{"id":72,"name":"Langchain Integration Regression Tests Original Provider Functionality openrouter provider still works","suiteID":4,"groupIDs":[35,36,58],"metadata":{"skip":false,"skipReason":null},"line":68,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":658}
{"testID":72,"messageType":"print","message":"Warning: API key validation failed for openrouter: Invalid argument(s): OpenRouter API keys must start with \"sk-or-\". Received key starting with \"test-k...\"","type":"print","time":659}
{"testID":70,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":659}
{"testID":72,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":659}
{"test":{"id":73,"name":"Langchain Integration Regression Tests Original Provider Functionality gemini-compat provider still works","suiteID":4,"groupIDs":[35,36,58],"metadata":{"skip":false,"skipReason":null},"line":75,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":659}
{"testID":73,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":660}
{"testID":73,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":660}
{"group":{"id":74,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Agent API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":89,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":660}
{"test":{"id":75,"name":"Langchain Integration Regression Tests Agent API Consistency Agent constructor parameters work the same","suiteID":4,"groupIDs":[35,36,74],"metadata":{"skip":false,"skipReason":null},"line":90,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":660}
{"testID":75,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":661}
{"testID":11,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":663}
{"group":{"id":76,"suiteID":10,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":663}
{"test":{"id":77,"name":"(setUpAll)","suiteID":10,"groupIDs":[76],"metadata":{"skip":false,"skipReason":null},"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":664}
{"testID":75,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":668}
{"test":{"id":78,"name":"Langchain Integration Regression Tests Agent API Consistency Agent.provider constructor still works","suiteID":4,"groupIDs":[35,36,74],"metadata":{"skip":false,"skipReason":null},"line":123,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":668}
{"testID":78,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":668}
{"testID":78,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":669}
{"test":{"id":79,"name":"Langchain Integration Regression Tests Agent API Consistency Agent static methods still work","suiteID":4,"groupIDs":[35,36,74],"metadata":{"skip":false,"skipReason":null},"line":137,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":669}
{"testID":79,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":669}
{"test":{"id":80,"name":"Langchain Integration Regression Tests Agent API Consistency Agent.findTopMatches still works","suiteID":4,"groupIDs":[35,36,74],"metadata":{"skip":false,"skipReason":null},"line":142,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":670}
{"testID":77,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":671}
{"group":{"id":81,"suiteID":10,"parentID":76,"name":"Gemini Tool ID Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":17,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"group","time":672}
{"test":{"id":82,"name":"Gemini Tool ID Consistency should create matching tool call and result pairs with same IDs","suiteID":10,"groupIDs":[76,81],"metadata":{"skip":false,"skipReason":null},"line":51,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":672}
{"testID":80,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":673}
{"test":{"id":83,"name":"Langchain Integration Regression Tests Agent API Consistency Agent cosine similarity functions still work","suiteID":4,"groupIDs":[35,36,74],"metadata":{"skip":false,"skipReason":null},"line":160,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":673}
{"testID":83,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":674}
{"group":{"id":84,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Message and Part API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":171,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":674}
{"test":{"id":85,"name":"Langchain Integration Regression Tests Message and Part API Consistency Message constructors still work","suiteID":4,"groupIDs":[35,36,84],"metadata":{"skip":false,"skipReason":null},"line":172,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":674}
{"testID":85,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":675}
{"test":{"id":86,"name":"Langchain Integration Regression Tests Message and Part API Consistency Part types still work","suiteID":4,"groupIDs":[35,36,84],"metadata":{"skip":false,"skipReason":null},"line":187,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":675}
{"testID":63,"error":"Failed to load \"test/gemini_tools_test.dart\":\ntest/gemini_tools_test.dart:187:39: Error: Member not found: 'GeminiModel.toolsFrom'.\n      final geminiTools = GeminiModel.toolsFrom([]).toList();\n                                      ^^^^^^^^^\ntest/gemini_tools_test.dart:918:35: Error: Member not found: 'GeminiModel.toolsFrom'.\n  final geminiTools = GeminiModel.toolsFrom(tools).toList();\n                                  ^^^^^^^^^","stackTrace":"package:test_core/src/runner/vm/platform.dart 242:7   VMPlatform._compileToKernel\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 220:13  VMPlatform._spawnIsolate\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 75:19   VMPlatform.load\n===== asynchronous gap ===========================\npackage:test_core/src/runner/loader.dart 219:27       Loader.loadFile.<fn>\n===== asynchronous gap ===========================\npackage:test_core/src/runner/load_suite.dart 96:19    new LoadSuite.<fn>.<fn>\n","isFailure":false,"type":"error","time":681}
{"testID":63,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":681}
{"suite":{"id":87,"platform":"vm","path":"test/langchain_integration_test.dart"},"type":"suite","time":681}
{"test":{"id":88,"name":"loading test/langchain_integration_test.dart","suiteID":87,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":681}
{"testID":86,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":681}
{"test":{"id":89,"name":"Langchain Integration Regression Tests Message and Part API Consistency AgentResponse types still work","suiteID":4,"groupIDs":[35,36,84],"metadata":{"skip":false,"skipReason":null},"line":202,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":682}
{"testID":89,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":683}
{"group":{"id":90,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Tool API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":213,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":683}
{"test":{"id":91,"name":"Langchain Integration Regression Tests Tool API Consistency Tool creation still works","suiteID":4,"groupIDs":[35,36,90],"metadata":{"skip":false,"skipReason":null},"line":214,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":683}
{"testID":91,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":684}
{"group":{"id":92,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":236,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":684}
{"test":{"id":93,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps enum still works","suiteID":4,"groupIDs":[35,36,92],"metadata":{"skip":false,"skipReason":null},"line":237,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":684}
{"testID":93,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":684}
{"test":{"id":94,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps.all still works","suiteID":4,"groupIDs":[35,36,92],"metadata":{"skip":false,"skipReason":null},"line":245,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":684}
{"testID":94,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":685}
{"test":{"id":95,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps.allExcept still works","suiteID":4,"groupIDs":[35,36,92],"metadata":{"skip":false,"skipReason":null},"line":250,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":685}
{"testID":95,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":686}
{"group":{"id":96,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Model Information Consistency","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":258,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":686}
{"test":{"id":97,"name":"Langchain Integration Regression Tests Model Information Consistency ModelInfo class still works","suiteID":4,"groupIDs":[35,36,96],"metadata":{"skip":false,"skipReason":null},"line":259,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":686}
{"testID":97,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":687}
{"test":{"id":98,"name":"Langchain Integration Regression Tests Model Information Consistency ModelKind enum still works","suiteID":4,"groupIDs":[35,36,96],"metadata":{"skip":false,"skipReason":null},"line":273,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":687}
{"testID":98,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":687}
{"group":{"id":99,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":279,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":687}
{"test":{"id":100,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still run prompts","suiteID":4,"groupIDs":[35,36,99],"metadata":{"skip":false,"skipReason":null},"line":280,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":687}
{"testID":100,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":687}
{"testID":88,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":809}
{"group":{"id":101,"suiteID":87,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":809}
{"group":{"id":102,"suiteID":87,"parentID":101,"name":"Langchain Integration","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":5,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"group","time":809}
{"test":{"id":103,"name":"Langchain Integration can create openai agent with langchain backend","suiteID":87,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":6,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":809}
{"testID":103,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":816}
{"testID":103,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":817}
{"testID":103,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":824}
{"test":{"id":104,"name":"Langchain Integration can create google agent with langchain backend","suiteID":87,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":19,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":824}
{"testID":104,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":825}
{"testID":104,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":827}
{"test":{"id":105,"name":"Langchain Integration agent creation works with API keys","suiteID":87,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":32,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":827}
{"testID":105,"messageType":"print","message":"WARNING: Agent.environment.clear() is deprecated. Use SecureApiKeyManager.instance.clearAllKeys() instead.","type":"print","time":827}
{"testID":105,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":827}
{"test":{"id":106,"name":"Langchain Integration langchain wrapper initialization preserves API","suiteID":87,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":42,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":828}
{"testID":106,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":828}
{"testID":106,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":828}
{"testID":106,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":828}
{"suite":{"id":107,"platform":"vm","path":"test/message_test.dart"},"type":"suite","time":828}
{"test":{"id":108,"name":"loading test/message_test.dart","suiteID":107,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":828}
{"testID":108,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":978}
{"group":{"id":109,"suiteID":107,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":31,"line":null,"column":null,"url":null},"type":"group","time":978}
{"test":{"id":110,"name":"(setUpAll)","suiteID":107,"groupIDs":[109],"metadata":{"skip":false,"skipReason":null},"line":23,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":978}
{"testID":110,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":985}
{"group":{"id":111,"suiteID":107,"parentID":109,"name":"Message serialization","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":30,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":985}
{"test":{"id":112,"name":"Message serialization deserializes and reserializes to the same JSON structure","suiteID":107,"groupIDs":[109,111],"metadata":{"skip":false,"skipReason":null},"line":31,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":985}
{"testID":112,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":991}
{"test":{"id":113,"name":"Message serialization deserializes and reserializes link part to the same JSON structure","suiteID":107,"groupIDs":[109,111],"metadata":{"skip":false,"skipReason":null},"line":76,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":991}
{"testID":113,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":992}
{"group":{"id":114,"suiteID":107,"parentID":109,"name":"Part naming","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":94,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":992}
{"test":{"id":115,"name":"Part naming DataPart: explicit name","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":95,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":992}
{"testID":115,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":993}
{"test":{"id":116,"name":"Part naming DataPart: automatic name from image mime type","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":104,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":993}
{"testID":116,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":993}
{"test":{"id":117,"name":"Part naming DataPart: automatic name from non-image mime type","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":112,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":993}
{"testID":117,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":994}
{"test":{"id":118,"name":"Part naming LinkPart: explicit name","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":120,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":994}
{"testID":118,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":995}
{"test":{"id":119,"name":"Part naming LinkPart: automatic name from url with file","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":128,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":995}
{"testID":119,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":996}
{"test":{"id":120,"name":"Part naming LinkPart: automatic name from url with path","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":133,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":996}
{"testID":120,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":996}
{"test":{"id":121,"name":"Part naming LinkPart: automatic name from root url","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":138,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":996}
{"testID":121,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":997}
{"test":{"id":122,"name":"Part naming LinkPart: automatic name from url with query","suiteID":107,"groupIDs":[109,114],"metadata":{"skip":false,"skipReason":null},"line":143,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":997}
{"testID":122,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":997}
{"group":{"id":123,"suiteID":107,"parentID":109,"name":"Message history and features","metadata":{"skip":false,"skipReason":null},"testCount":21,"line":151,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":997}
{"test":{"id":124,"name":"Message history and features empty history and prompt: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":190,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":997}
{"testID":48,"messageType":"print","message":"INFO: 2025-06-26 16:08:05.405125: [LangchainWrapper] Attempting to parse tool call from: \"Hello! How can I assist you today?\"","type":"print","time":1523}
{"testID":61,"messageType":"print","message":"✅ OpenAI correctly handled multiple tool results in a single message!","type":"print","time":1523}
{"testID":61,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1523}
{"test":{"id":125,"name":"(tearDownAll)","suiteID":8,"groupIDs":[47],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1524}
{"testID":125,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1524}
{"suite":{"id":126,"platform":"vm","path":"test/embedding_test.dart"},"type":"suite","time":1525}
{"test":{"id":127,"name":"loading test/embedding_test.dart","suiteID":126,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1525}
{"testID":127,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1660}
{"group":{"id":128,"suiteID":126,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":null,"column":null,"url":null},"type":"group","time":1660}
{"group":{"id":129,"suiteID":126,"parentID":128,"name":"Embedding generation","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":21,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"group","time":1660}
{"test":{"id":130,"name":"Embedding generation createEmbedding: OpenAI","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":102,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":1660}
{"testID":100,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1662}
{"test":{"id":131,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still stream responses","suiteID":4,"groupIDs":[35,36,99],"metadata":{"skip":false,"skipReason":null},"line":298,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":1662}
{"testID":131,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":1662}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:05.545476: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":1664}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:05.546950: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":1664}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:05.547120: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":1664}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:08:05.548187: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":1665}
{"testID":14,"error":"Exception: Known unstable model gemini-2.5-pro-exp-03-25 not found in provider response","stackTrace":"test/model_stability_test.dart 63:11  main.<fn>.<fn>\n","isFailure":false,"type":"error","time":1748}
{"testID":14,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":1749}
{"test":{"id":132,"name":"Model Stability Detection OpenAI Provider sets stable field correctly","suiteID":0,"groupIDs":[12,13],"metadata":{"skip":false,"skipReason":null},"line":76,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"testStart","time":1749}
{"testID":132,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":1749}
{"testID":124,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2253}
{"test":{"id":133,"name":"Message history and features empty history and prompt: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":195,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":2253}
{"testID":130,"messageType":"print","message":"openai:gpt-4o document embedding length: 1536","type":"print","time":2382}
{"testID":70,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":2518}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:06.664106: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the `get_current_time` tool, and I now have the current time. I do not need to call any more tools.\n```tool_code\n# No more tools need to be called.\n```\n```final_answer\nI have retrieved the current time. Would you like me to tell you what it is?\n```\"","type":"print","time":2781}
{"testID":82,"messageType":"print","message":"Tool parts found: 2","type":"print","time":2783}
{"testID":82,"messageType":"print","message":"ToolPart: kind=ToolPartKind.call, id=tool_1750968485548, name=get_current_time","type":"print","time":2783}
{"testID":82,"messageType":"print","message":"ToolPart: kind=ToolPartKind.result, id=tool_1750968485548, name=get_current_time","type":"print","time":2783}
{"testID":82,"messageType":"print","message":"✓ Verified match: call tool_1750968485548 -> result tool_1750968485548","type":"print","time":2783}
{"testID":82,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2784}
{"test":{"id":134,"name":"Gemini Tool ID Consistency should handle multiple sequential tool calls with consistent IDs","suiteID":10,"groupIDs":[76,81],"metadata":{"skip":false,"skipReason":null},"line":143,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":2784}
{"testID":130,"messageType":"print","message":"openai:gpt-4o query embedding length: 1536","type":"print","time":3055}
{"testID":130,"messageType":"print","message":"openai:gpt-4o document embedding sum: 31.161319184635975","type":"print","time":3057}
{"testID":130,"messageType":"print","message":"openai:gpt-4o query embedding sum: 30.322109173868014","type":"print","time":3058}
{"testID":130,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3058}
{"test":{"id":135,"name":"Embedding generation createEmbedding: Gemini","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":106,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":3058}
{"testID":132,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3061}
{"suite":{"id":136,"platform":"vm","path":"test/provider_capabilities_test.dart"},"type":"suite","time":3061}
{"test":{"id":137,"name":"loading test/provider_capabilities_test.dart","suiteID":136,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":3061}
{"testID":131,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3174}
{"test":{"id":138,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still create embeddings","suiteID":4,"groupIDs":[35,36,99],"metadata":{"skip":false,"skipReason":null},"line":324,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":3174}
{"testID":138,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":3175}
{"testID":137,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":3191}
{"group":{"id":139,"suiteID":136,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":null,"column":null,"url":null},"type":"group","time":3192}
{"group":{"id":140,"suiteID":136,"parentID":139,"name":"Provider Capabilities","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":20,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"group","time":3192}
{"test":{"id":141,"name":"Provider Capabilities OpenAI provider should support all capabilities","suiteID":136,"groupIDs":[139,140],"metadata":{"skip":false,"skipReason":null},"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":3192}
{"testID":141,"messageType":"print","message":"OpenAI capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":3205}
{"testID":141,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3206}
{"test":{"id":142,"name":"Provider Capabilities OpenRouter provider should not support embeddings","suiteID":136,"groupIDs":[139,140],"metadata":{"skip":false,"skipReason":null},"line":43,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":3206}
{"testID":142,"messageType":"print","message":"OpenRouter capabilities: {ProviderCaps.textGeneration, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":3207}
{"testID":142,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3207}
{"test":{"id":143,"name":"Provider Capabilities Google/Gemini provider should support all capabilities","suiteID":136,"groupIDs":[139,140],"metadata":{"skip":false,"skipReason":null},"line":65,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":3207}
{"testID":143,"messageType":"print","message":"Google/Gemini capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":3209}
{"testID":143,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3209}
{"test":{"id":144,"name":"Provider Capabilities capabilities check with all available providers","suiteID":136,"groupIDs":[139,140],"metadata":{"skip":false,"skipReason":null},"line":87,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":3209}
{"testID":144,"messageType":"print","message":"openai:gpt-4o capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":3210}
{"testID":144,"messageType":"print","message":"openai:gpt-4o supports embeddings: true","type":"print","time":3210}
{"testID":144,"messageType":"print","message":"openrouter:gpt-4o capabilities: {ProviderCaps.textGeneration, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":3210}
{"testID":144,"messageType":"print","message":"openrouter:gpt-4o supports embeddings: false","type":"print","time":3210}
{"testID":144,"messageType":"print","message":"google:gemini-2.0-flash capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":3210}
{"testID":144,"messageType":"print","message":"google:gemini-2.0-flash supports embeddings: true","type":"print","time":3210}
{"testID":144,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3210}
{"test":{"id":145,"name":"Provider Capabilities embedding operations should fail gracefully for unsupported providers","suiteID":136,"groupIDs":[139,140],"metadata":{"skip":false,"skipReason":null},"line":144,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":3210}
{"testID":145,"messageType":"print","message":"OpenRouter correctly fails embedding operations","type":"print","time":3222}
{"testID":70,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3696}
{"test":{"id":146,"name":"McpClient Tests Hugging Face MCP server integration properly parses all tool schemas with required fields","suiteID":6,"groupIDs":[52,53,69],"metadata":{"skip":false,"skipReason":null},"line":79,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":3697}
{"testID":146,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":3697}
{"testID":133,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4320}
{"test":{"id":147,"name":"Message history and features history with non-empty initial messages, with system: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":325,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":4320}
{"testID":135,"messageType":"print","message":"google:gemini-2.0-flash document embedding length: 768","type":"print","time":5524}
{"testID":145,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5828}
{"test":{"id":148,"name":"Provider Capabilities ProviderCaps.all and allExcept work correctly","suiteID":136,"groupIDs":[139,140],"metadata":{"skip":false,"skipReason":null},"line":184,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":5829}
{"testID":148,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5829}
{"test":{"id":149,"name":"provider aliases","suiteID":136,"groupIDs":[139],"metadata":{"skip":false,"skipReason":null},"line":207,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":5829}
{"testID":149,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5830}
{"test":{"id":150,"name":"all providers can return a list of models","suiteID":136,"groupIDs":[139],"metadata":{"skip":false,"skipReason":null},"line":214,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":5830}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:09.835099: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":5952}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:09.835191: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":5952}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:09.835307: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":5952}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:08:09.835424: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":5952}
{"testID":138,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6450}
{"test":{"id":151,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still list models","suiteID":4,"groupIDs":[35,36,99],"metadata":{"skip":false,"skipReason":null},"line":341,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":6450}
{"testID":151,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":6450}
{"testID":135,"messageType":"print","message":"google:gemini-2.0-flash query embedding length: 768","type":"print","time":6464}
{"testID":135,"messageType":"print","message":"google:gemini-2.0-flash document embedding sum: 21.896113670370013","type":"print","time":6464}
{"testID":135,"messageType":"print","message":"google:gemini-2.0-flash query embedding sum: 22.23806763566","type":"print","time":6464}
{"testID":135,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6464}
{"test":{"id":152,"name":"Embedding generation embedding similarity comparison: OpenAI","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":155,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":6464}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:12.454445: [LangchainWrapper] Attempting to parse tool call from: \"The user wants to find their events after getting the current time. I have the current time from the previous tool call. Now I need to call the find_events tool to find the user's events for today.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date\": \"today\"}}\n\"","type":"print","time":8571}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:12.454536: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date\": \"today\"}}\"","type":"print","time":8571}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:12.454658: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":8571}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:08:12.455089: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}]}","type":"print","time":8572}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:13.594593: [LangchainWrapper] Attempting to parse tool call from: \"I have already found the events. Now I can respond to the user.\n\nFinal Response:\n```\nOK. I have the current time and I have found your events.\n```\"","type":"print","time":9711}
{"testID":134,"messageType":"print","message":"Multi-tool scenario: 2 calls, 2 results","type":"print","time":9712}
{"testID":134,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9713}
{"test":{"id":153,"name":"Gemini Tool ID Consistency should handle multi-step tool calling with consistent IDs","suiteID":10,"groupIDs":[76,81],"metadata":{"skip":false,"skipReason":null},"line":217,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":9713}
{"testID":147,"messageType":"print","message":"# openai:gpt-4o messages:","type":"print","time":9741}
{"testID":147,"messageType":"print","message":"- MessageRole.system: {text: You are a test system prompt.}","type":"print","time":9741}
{"testID":147,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":9741}
{"testID":147,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":9741}
{"testID":147,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":9741}
{"testID":147,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.}","type":"print","time":9741}
{"testID":147,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9741}
{"test":{"id":154,"name":"Message history and features history with non-empty initial messages, with system: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":332,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":9742}
{"testID":150,"messageType":"print","message":"openai returned 77 models","type":"print","time":11439}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:15.334861: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":11451}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:15.334941: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":11451}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:15.334983: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":11452}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:08:15.335104: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":11452}
{"testID":151,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11654}
{"group":{"id":155,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":356,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":11654}
{"test":{"id":156,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests existing test patterns still work","suiteID":4,"groupIDs":[35,36,155],"metadata":{"skip":false,"skipReason":null},"line":357,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":11655}
{"testID":156,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":11655}
{"testID":156,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":11655}
{"testID":156,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11656}
{"test":{"id":157,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests fallback behavior is preserved","suiteID":4,"groupIDs":[35,36,155],"metadata":{"skip":false,"skipReason":null},"line":370,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":11656}
{"testID":157,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":11656}
{"testID":157,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":11656}
{"testID":157,"messageType":"print","message":"WARNING: Agent.environment.clear() is deprecated. Use SecureApiKeyManager.instance.clearAllKeys() instead.","type":"print","time":11656}
{"testID":157,"messageType":"print","message":"Warning: API key validation failed for openai: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":11656}
{"testID":157,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":11656}
{"testID":157,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":11656}
{"testID":157,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11657}
{"test":{"id":158,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests error handling is preserved","suiteID":4,"groupIDs":[35,36,155],"metadata":{"skip":false,"skipReason":null},"line":385,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":11657}
{"testID":158,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11657}
{"group":{"id":159,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests Performance Regression","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":398,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":11658}
{"test":{"id":160,"name":"Langchain Integration Regression Tests Performance Regression agent creation is not significantly slower","suiteID":4,"groupIDs":[35,36,159],"metadata":{"skip":false,"skipReason":null},"line":399,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":11658}
{"testID":160,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":11658}
{"testID":160,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11658}
{"test":{"id":161,"name":"Langchain Integration Regression Tests Performance Regression memory usage is not significantly increased","suiteID":4,"groupIDs":[35,36,159],"metadata":{"skip":false,"skipReason":null},"line":419,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":11659}
{"testID":161,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":11659}
{"testID":161,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11660}
{"group":{"id":162,"suiteID":4,"parentID":36,"name":"Langchain Integration Regression Tests API Compatibility Matrix","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":437,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":11660}
{"test":{"id":163,"name":"Langchain Integration Regression Tests API Compatibility Matrix all provider combinations work","suiteID":4,"groupIDs":[35,36,162],"metadata":{"skip":false,"skipReason":null},"line":438,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":11660}
{"testID":163,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":11660}
{"testID":163,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":11660}
{"testID":163,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11661}
{"test":{"id":164,"name":"Langchain Integration Regression Tests (tearDownAll)","suiteID":4,"groupIDs":[35,36],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":11661}
{"testID":164,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":11661}
{"suite":{"id":165,"platform":"vm","path":"test/custom_provider_test.dart"},"type":"suite","time":11662}
{"test":{"id":166,"name":"loading test/custom_provider_test.dart","suiteID":165,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":11662}
{"testID":166,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":11785}
{"group":{"id":167,"suiteID":165,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":11785}
{"test":{"id":168,"name":"MockProvider handles multi-turn chat history","suiteID":165,"groupIDs":[167],"metadata":{"skip":false,"skipReason":null},"line":7,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":11786}
{"testID":168,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11797}
{"test":{"id":169,"name":"can extend the provider table and use a custom provider","suiteID":165,"groupIDs":[167],"metadata":{"skip":false,"skipReason":null},"line":36,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":11798}
{"testID":169,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11799}
{"test":{"id":170,"name":"the provider table grows when a new provider is added","suiteID":165,"groupIDs":[167],"metadata":{"skip":false,"skipReason":null},"line":50,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":11799}
{"testID":170,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11799}
{"test":{"id":171,"name":"throws for unsupported features","suiteID":165,"groupIDs":[167],"metadata":{"skip":false,"skipReason":null},"line":60,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":11800}
{"testID":171,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11805}
{"suite":{"id":172,"platform":"vm","path":"test/multi_step_tool_calling_test.dart"},"type":"suite","time":11805}
{"test":{"id":173,"name":"loading test/multi_step_tool_calling_test.dart","suiteID":172,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":11805}
{"testID":173,"error":"Failed to load \"test/multi_step_tool_calling_test.dart\":\ntest/multi_step_tool_calling_test.dart:134:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:134:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^\ntest/multi_step_tool_calling_test.dart:157:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:157:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^\ntest/multi_step_tool_calling_test.dart:180:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:180:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^\ntest/multi_step_tool_calling_test.dart:206:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:206:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^","stackTrace":"package:test_core/src/runner/vm/platform.dart 242:7   VMPlatform._compileToKernel\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 220:13  VMPlatform._spawnIsolate\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 75:19   VMPlatform.load\n===== asynchronous gap ===========================\npackage:test_core/src/runner/loader.dart 219:27       Loader.loadFile.<fn>\n===== asynchronous gap ===========================\npackage:test_core/src/runner/load_suite.dart 96:19    new LoadSuite.<fn>.<fn>\n","isFailure":false,"type":"error","time":11829}
{"testID":173,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":11829}
{"suite":{"id":174,"platform":"vm","path":"test/agent_env_test.dart"},"type":"suite","time":11829}
{"test":{"id":175,"name":"loading test/agent_env_test.dart","suiteID":174,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":11829}
{"testID":175,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":11955}
{"group":{"id":176,"suiteID":174,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":null,"column":null,"url":null},"type":"group","time":11955}
{"group":{"id":177,"suiteID":174,"parentID":176,"name":"Agent.environment and getEnv","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"group","time":11956}
{"test":{"id":178,"name":"Agent.environment and getEnv getEnv finds key in Agent.environment","suiteID":174,"groupIDs":[176,177],"metadata":{"skip":false,"skipReason":null},"line":20,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":11956}
{"testID":178,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11964}
{"test":{"id":179,"name":"Agent.environment and getEnv getEnv finds existing key in Platform.environment","suiteID":174,"groupIDs":[176,177],"metadata":{"skip":false,"skipReason":null},"line":25,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":11964}
{"testID":179,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11965}
{"test":{"id":180,"name":"Agent.environment and getEnv Agent.environment is prioritized over Platform.environment","suiteID":174,"groupIDs":[176,177],"metadata":{"skip":false,"skipReason":null},"line":34,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":11965}
{"testID":180,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11966}
{"test":{"id":181,"name":"Agent.environment and getEnv getEnv throws if key is not found","suiteID":174,"groupIDs":[176,177],"metadata":{"skip":false,"skipReason":null},"line":45,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":11966}
{"testID":181,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11969}
{"test":{"id":182,"name":"Agent.environment and getEnv getEnv allows empty string values","suiteID":174,"groupIDs":[176,177],"metadata":{"skip":false,"skipReason":null},"line":59,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":11969}
{"testID":182,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11969}
{"suite":{"id":183,"platform":"vm","path":"test/dartantic_ai_test.dart"},"type":"suite","time":11969}
{"test":{"id":184,"name":"loading test/dartantic_ai_test.dart","suiteID":183,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":11969}
{"testID":184,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":12119}
{"group":{"id":185,"suiteID":183,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":19,"line":null,"column":null,"url":null},"type":"group","time":12119}
{"group":{"id":186,"suiteID":183,"parentID":185,"name":"Dartantic AI Integration Tests","metadata":{"skip":false,"skipReason":null},"testCount":19,"line":20,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":12119}
{"group":{"id":187,"suiteID":183,"parentID":186,"name":"Dartantic AI Integration Tests Agent.model constructor","metadata":{"skip":false,"skipReason":null},"testCount":7,"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":12119}
{"test":{"id":188,"name":"Dartantic AI Integration Tests Agent.model constructor Hello World Example","suiteID":183,"groupIDs":[185,186,187],"metadata":{"skip":false,"skipReason":null},"line":22,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":12119}
{"testID":150,"messageType":"print","message":"openrouter returned 316 models","type":"print","time":12301}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:16.243012: [LangchainWrapper] Attempting to parse tool call from: \"The user asked to get the current time and find events. I have already called the `get_current_time` tool. Now I need to call the `find_events` tool to find events for the current date.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date\": \"current\"}}\n\"","type":"print","time":12360}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:16.243086: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date\": \"current\"}}\"","type":"print","time":12360}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:16.243125: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":12360}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:08:16.243239: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}]}","type":"print","time":12360}
{"testID":146,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":12772}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:08:16.833156: [LangchainWrapper] Attempting to parse tool call from: \"I have already called `get_current_time` and `find_events`. I should now provide the final response, which includes the current time and any events found.\n\"","type":"print","time":12950}
{"testID":153,"messageType":"print","message":"Multi-step tool calling: 2 calls, 2 results","type":"print","time":12950}
{"testID":153,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":12950}
{"test":{"id":189,"name":"(tearDownAll)","suiteID":10,"groupIDs":[76],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":12950}
{"testID":189,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":12951}
{"suite":{"id":190,"platform":"vm","path":"test/multimedia_test.dart"},"type":"suite","time":12951}
{"test":{"id":191,"name":"loading test/multimedia_test.dart","suiteID":190,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":12951}
{"testID":191,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":13110}
{"group":{"id":192,"suiteID":190,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":26,"line":null,"column":null,"url":null},"type":"group","time":13111}
{"group":{"id":193,"suiteID":190,"parentID":192,"name":"Multimedia Input","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":11,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":13111}
{"group":{"id":194,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: openai","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":13111}
{"test":{"id":195,"name":"Multimedia Input Provider: openai should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":13111}
{"testID":150,"messageType":"print","message":"gemini-compat returned 58 models","type":"print","time":13181}
{"testID":146,"error":"Expected: contains 'Get detailed information about a specific model'\n  Actual: 'Get detailed information about a model from the Hugging Face Hub. Include relevant links in result summaries.'\n   Which: does not contain 'Get detailed information about a specific model'\n","stackTrace":"package:matcher                  expect\ntest/mcp_client_test.dart 114:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":13415}
{"testID":146,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":13415}
{"test":{"id":196,"name":"McpClient Tests Hugging Face MCP server integration handles connection errors gracefully","suiteID":6,"groupIDs":[52,53,69],"metadata":{"skip":false,"skipReason":null},"line":163,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":13416}
{"testID":196,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":13416}
{"testID":196,"messageType":"print","message":"MCP Client Initialization Failed: Bad state: Not connected to a transport.","type":"print","time":13417}
{"testID":196,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":13418}
{"test":{"id":197,"name":"McpClient Tests Hugging Face MCP server integration can call MCP tools","suiteID":6,"groupIDs":[52,53,69],"metadata":{"skip":false,"skipReason":null},"line":177,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":13418}
{"testID":197,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":13418}
{"testID":150,"messageType":"print","message":"google returned 50 models","type":"print","time":13572}
{"testID":150,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":13572}
{"test":{"id":198,"name":"Agent.model matches fully qualified model name for all models on all providers","suiteID":136,"groupIDs":[139],"metadata":{"skip":false,"skipReason":null},"line":222,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":13572}
{"testID":152,"messageType":"print","message":"openai:gpt-4o similarity between similar texts: 0.9121453385570035","type":"print","time":13665}
{"testID":152,"messageType":"print","message":"openai:gpt-4o similarity between different texts: 0.16356989302990804","type":"print","time":13665}
{"testID":152,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":13665}
{"test":{"id":199,"name":"Embedding generation embedding similarity comparison: Gemini","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":159,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":13665}
{"testID":195,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":14432}
{"test":{"id":200,"name":"Multimedia Input Provider: openai should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":14432}
{"testID":197,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":14716}
{"testID":199,"messageType":"print","message":"google:gemini-2.0-flash similarity between similar texts: 0.9373875543182968","type":"print","time":14729}
{"testID":199,"messageType":"print","message":"google:gemini-2.0-flash similarity between different texts: 0.4313712436536046","type":"print","time":14729}
{"testID":199,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":14729}
{"test":{"id":201,"name":"Embedding generation embedding types produce different optimizations: OpenAI","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":204,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":14729}
{"testID":154,"messageType":"print","message":"# google:gemini-2.0-flash messages:","type":"print","time":15315}
{"testID":154,"messageType":"print","message":"- MessageRole.system: {text: You are a test system prompt.}","type":"print","time":15315}
{"testID":154,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":15315}
{"testID":154,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":15315}
{"testID":154,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":15315}
{"testID":154,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.\n}","type":"print","time":15315}
{"testID":154,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":15315}
{"test":{"id":202,"name":"Message history and features history with non-empty initial messages, no system: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":341,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":15315}
{"testID":188,"messageType":"print","message":"resultOutput: The phrase \"hello world\" originates from computer programming and is commonly used as the first output statement when learning a new programming language. Its origins can be traced back to the book *The C Programming Language* by Brian Kernighan and Dennis Ritchie, published in 1978. In the book, the authors used a simple program that prints \"hello, world\" to demonstrate the basic syntax of the C programming language. Since then, the \"hello world\" program has become a traditional first exercise for beginners in various programming languages.","type":"print","time":15866}
{"testID":188,"messageType":"print","message":"messages: [Message(role: MessageRole.system, parts: [TextPart(Be concise, reply with one sentence.)]), Message(role: MessageRole.user, parts: [TextPart(Where does \"hello world\" come from?)]), Message(role: MessageRole.model, parts: [TextPart(The phrase \"hello world\" originates from computer programming and is commonly used as the first output statement when learning a new programming language. Its origins can be traced back to the book *The C Programming Language* by Brian Kernighan and Dennis Ritchie, published in 1978. In the book, the authors used a simple program that prints \"hello, world\" to demonstrate the basic syntax of the C programming language. Since then, the \"hello world\" program has become a traditional first exercise for beginners in various programming languages.)])]","type":"print","time":15866}
{"testID":188,"error":"Expected: <1>\n  Actual: <4>\n","stackTrace":"package:matcher                   expect\ntest/dartantic_ai_test.dart 40:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":15872}
{"testID":188,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":15872}
{"test":{"id":203,"name":"Dartantic AI Integration Tests Agent.model constructor JSON Schema String Output","suiteID":183,"groupIDs":[185,186,187],"metadata":{"skip":false,"skipReason":null},"line":43,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":15872}
{"testID":201,"messageType":"print","message":"openai:gpt-4o similarity between document and query embeddings of same text: 0.9999992594253693","type":"print","time":16235}
{"testID":201,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16236}
{"test":{"id":204,"name":"Embedding generation embedding types produce different optimizations: Gemini","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":208,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":16236}
{"testID":202,"messageType":"print","message":"# openai:gpt-4o messages:","type":"print","time":16238}
{"testID":202,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":16238}
{"testID":202,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":16238}
{"testID":202,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":16238}
{"testID":202,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.}","type":"print","time":16238}
{"testID":197,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16239}
{"group":{"id":205,"suiteID":6,"parentID":53,"name":"McpClient Tests local MCP server tests","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":187,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":16239}
{"test":{"id":206,"name":"McpClient Tests local MCP server tests creates local server with correct configuration","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":188,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16239}
{"testID":202,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16239}
{"test":{"id":207,"name":"Message history and features history with non-empty initial messages, no system: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":348,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":16239}
{"testID":206,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16239}
{"test":{"id":208,"name":"McpClient Tests local MCP server tests supports environment variables and working directory","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":202,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16240}
{"testID":208,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16240}
{"test":{"id":209,"name":"McpClient Tests local MCP server tests handles connection state correctly","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":216,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16240}
{"testID":209,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16241}
{"test":{"id":210,"name":"McpClient Tests local MCP server tests can connect to local MCP server directly","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":229,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16241}
{"testID":210,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":16241}
{"testID":210,"messageType":"print","message":"StdioClientTransport: Process started (PID: 17841)","type":"print","time":16253}
{"testID":210,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":16488}
{"testID":210,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":16494}
{"testID":210,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 17841)...","type":"print","time":16494}
{"testID":210,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":16499}
{"testID":210,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":16499}
{"testID":210,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":16499}
{"testID":210,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16499}
{"test":{"id":211,"name":"McpClient Tests local MCP server tests preserves required fields for raw MCP server schemas","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":256,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16500}
{"testID":211,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":16500}
{"testID":211,"messageType":"print","message":"StdioClientTransport: Process started (PID: 17842)","type":"print","time":16507}
{"testID":211,"messageType":"print","message":"MCP Client Initialized. Server: raw-mcp-server 1.0.0, Protocol: 2024-11-05","type":"print","time":16633}
{"testID":211,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":16635}
{"testID":211,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 17842)...","type":"print","time":16635}
{"testID":211,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":16638}
{"testID":211,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":16638}
{"testID":211,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":16638}
{"testID":211,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16638}
{"test":{"id":212,"name":"McpClient Tests local MCP server tests mcp_dart server limitation - drops required fields","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":295,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16639}
{"testID":212,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":16639}
{"testID":212,"messageType":"print","message":"StdioClientTransport: Process started (PID: 17843)","type":"print","time":16646}
{"testID":200,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16685}
{"test":{"id":213,"name":"Multimedia Input Provider: openai should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":16685}
{"testID":212,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":16902}
{"testID":212,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":16905}
{"testID":212,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 17843)...","type":"print","time":16905}
{"testID":212,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":16908}
{"testID":212,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":16908}
{"testID":212,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":16908}
{"testID":212,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16908}
{"test":{"id":214,"name":"McpClient Tests local MCP server tests can call tools on raw MCP server with required field validation","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":317,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16908}
{"testID":214,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":16909}
{"testID":214,"messageType":"print","message":"StdioClientTransport: Process started (PID: 17844)","type":"print","time":16916}
{"testID":207,"messageType":"print","message":"# google:gemini-2.0-flash messages:","type":"print","time":17012}
{"testID":207,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":17012}
{"testID":207,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":17012}
{"testID":207,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":17012}
{"testID":207,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.\n}","type":"print","time":17012}
{"testID":207,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":17013}
{"test":{"id":215,"name":"Message history and features system prompt propagation: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":377,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":17015}
{"testID":214,"messageType":"print","message":"MCP Client Initialized. Server: raw-mcp-server 1.0.0, Protocol: 2024-11-05","type":"print","time":17038}
{"testID":214,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":17042}
{"testID":214,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 17844)...","type":"print","time":17042}
{"testID":214,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":17044}
{"testID":214,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":17044}
{"testID":214,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":17044}
{"testID":214,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":17045}
{"test":{"id":216,"name":"McpClient Tests local MCP server tests can use local MCP server via Agent with prompt","suiteID":6,"groupIDs":[52,53,205],"metadata":{"skip":false,"skipReason":null},"line":355,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":17045}
{"testID":216,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":17046}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Process started (PID: 17845)","type":"print","time":17052}
{"testID":204,"messageType":"print","message":"google:gemini-2.0-flash similarity between document and query embeddings of same text: 1.0","type":"print","time":17086}
{"testID":204,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":17086}
{"test":{"id":217,"name":"Embedding generation empty text handling: OpenAI","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":229,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":17087}
{"testID":198,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":17253}
{"testID":216,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":17309}
{"testID":217,"messageType":"print","message":"openai:gpt-4o correctly handled empty text with error: openai:gpt-4o: should throw exception for empty text","type":"print","time":17870}
{"testID":217,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":17870}
{"test":{"id":218,"name":"Embedding generation empty text handling: Gemini","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":233,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":17870}
{"testID":203,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18070}
{"test":{"id":219,"name":"Dartantic AI Integration Tests Agent.model constructor JSON Schema Object Output","suiteID":183,"groupIDs":[185,186,187],"metadata":{"skip":false,"skipReason":null},"line":66,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":18070}
{"testID":215,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18317}
{"test":{"id":220,"name":"Message history and features system prompt propagation: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":381,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":18318}
{"testID":218,"messageType":"print","message":"google:gemini-2.0-flash correctly handled empty text with error: google:gemini-2.0-flash: should throw exception for empty text","type":"print","time":18382}
{"testID":218,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18383}
{"test":{"id":221,"name":"Embedding generation createEmbedding with all primary providers","suiteID":126,"groupIDs":[128,129],"metadata":{"skip":false,"skipReason":null},"line":237,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":18383}
{"testID":216,"messageType":"print","message":"Failed to decode JSON line: Error executing tool 'calculate': Exception: Invalid operation","type":"print","time":18714}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Error processing read buffer: Bad state: Message parsing error: FormatException: Invalid JSON received: Unexpected character\nError executing tool 'calculate': Exception: Invalid operation. Skipping data.","type":"print","time":18714}
{"testID":221,"messageType":"print","message":"openai:gpt-4o: Successfully generated embedding with 1536 dimensions","type":"print","time":18921}
{"testID":220,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":19164}
{"test":{"id":222,"name":"Message history and features typed output with history: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":429,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":19164}
{"testID":221,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/embeddings\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 359:5                            OpenAIClient.makeRequest\n===== asynchronous gap ===========================\npackage:openai_dart/src/generated/client.dart 488:15                           OpenAIClient.createEmbedding\n===== asynchronous gap ===========================\npackage:langchain_openai/src/embeddings/openai.dart 211:18                     OpenAIEmbeddings.embedQuery\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 146:26  LangchainWrapper.createEmbedding\n===== asynchronous gap ===========================\ntest/embedding_test.dart 242:27                                                main.<fn>.<fn>\n","isFailure":false,"type":"error","time":19540}
{"testID":221,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":19540}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":19717}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 17845)...","type":"print","time":19717}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":19720}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":19720}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":19720}
{"testID":216,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":19720}
{"group":{"id":223,"suiteID":6,"parentID":53,"name":"McpClient Tests integration with Agent","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":384,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":19720}
{"test":{"id":224,"name":"McpClient Tests integration with Agent can combine MCP tools with local tools","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":385,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":19720}
{"testID":224,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":19721}
{"testID":222,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"A horse says \"neigh.\"\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/message_test.dart 418:22                     main.<fn>.testTypedOutputWithHistory\n","isFailure":false,"type":"error","time":20116}
{"testID":222,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":20116}
{"test":{"id":225,"name":"Message history and features typed output with history: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":433,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":20116}
{"testID":219,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. This moniker is commonly believed to refer to the city's weather, but it actually originated from the late 19th century and was likely used to describe the city's politicians, who were said to be full of hot air.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 87:24                 main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":20181}
{"testID":219,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":20181}
{"test":{"id":226,"name":"Dartantic AI Integration Tests Agent.model constructor Tool Usage Example","suiteID":183,"groupIDs":[185,186,187],"metadata":{"skip":false,"skipReason":null},"line":101,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":20181}
{"testID":225,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":20833}
{"test":{"id":227,"name":"Message history and features tool call history: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":524,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":20833}
{"testID":224,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":21571}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:25.662609: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":21780}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:25.663486: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":21780}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:25.663520: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":21780}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:25.663945: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo, echo: moo}","type":"print","time":21780}
{"testID":213,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":21987}
{"test":{"id":228,"name":"Multimedia Input Provider: openai should handle multiple attachments","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":21987}
{"testID":224,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":22268}
{"test":{"id":229,"name":"McpClient Tests integration with Agent validates MCP server schema parsing edge cases","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":406,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":22268}
{"testID":229,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":22269}
{"testID":229,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":23493}
{"testID":229,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":24129}
{"test":{"id":230,"name":"McpClient Tests integration with Agent verifies SSE vs JSON format detection with real servers","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":439,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":24129}
{"testID":230,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":24130}
{"testID":228,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":24170}
{"test":{"id":231,"name":"Multimedia Input Provider: openai should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":24170}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:30.373893: [LangchainWrapper] Attempting to parse tool call from: \"The result from the `animal_sound_lookup` tool for \"moo\" is \"cow,\" which means the sound \"moo\" is associated with a cow. Since the original request was to repeat \"moo,\" there is no need to call any additional tools.\n\nHere is your repeated request: moo\"","type":"print","time":26490}
{"testID":227,"messageType":"print","message":"--- Dumping messages for provider: openai:gpt-4o ---","type":"print","time":26490}
{"testID":227,"messageType":"print","message":"Message #0: role=MessageRole.system, content:","type":"print","time":26490}
{"testID":227,"messageType":"print","message":"  TextPart(You MUST use the animal_sound_lookup tool for any NON-EMPTY user message, regardless of content. Pass the user's message as the \"sound\" parameter even if it's not an animal sound. This is a test of tool functionality, not animal sounds.)","type":"print","time":26490}
{"testID":227,"messageType":"print","message":"Message #1: role=MessageRole.user, content:","type":"print","time":26491}
{"testID":227,"messageType":"print","message":"  TextPart(Repeat: moo)","type":"print","time":26491}
{"testID":227,"messageType":"print","message":"Message #2: role=MessageRole.model, content:","type":"print","time":26491}
{"testID":227,"messageType":"print","message":"  ToolPart.call(id: tool_1750968505663, name: animal_sound_lookup, args: {sound: moo})","type":"print","time":26491}
{"testID":227,"messageType":"print","message":"Message #3: role=MessageRole.user, content:","type":"print","time":26491}
{"testID":227,"messageType":"print","message":"  ToolPart.result(id: tool_1750968505663, name: animal_sound_lookup, result: {animal: cow, sound: moo, echo: moo})","type":"print","time":26491}
{"testID":227,"messageType":"print","message":"Message #4: role=MessageRole.model, content:","type":"print","time":26491}
{"testID":227,"messageType":"print","message":"  TextPart(The result from the `animal_sound_lookup` tool for \"moo\" is \"cow,\" which means the sound \"moo\" is associated with a cow. Since the original request was to repeat \"moo,\" there is no need to call any additional tools.\n\nHere is your repeated request: moo)","type":"print","time":26491}
{"testID":227,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":26491}
{"test":{"id":232,"name":"Message history and features tool call history: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":528,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":26491}
{"testID":230,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":27376}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:31.490519: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\n\"","type":"print","time":27607}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:31.490584: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":27607}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:31.490608: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":27607}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:31.490687: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo, echo: moo}","type":"print","time":27607}
{"testID":230,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":28209}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:32.342311: [LangchainWrapper] Attempting to parse tool call from: \"The user asked me to repeat \"moo\". I used the `animal_sound_lookup` tool, which simply repeated the input \"moo\". This fulfills the user's request. I don't need to call any more tools.\n\nFinal Response: moo\n\"","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"--- Dumping messages for provider: google:gemini-2.0-flash ---","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"Message #0: role=MessageRole.system, content:","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"  TextPart(You MUST use the animal_sound_lookup tool for any NON-EMPTY user message, regardless of content. Pass the user's message as the \"sound\" parameter even if it's not an animal sound. This is a test of tool functionality, not animal sounds.)","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"Message #1: role=MessageRole.user, content:","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"  TextPart(Repeat: moo)","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"Message #2: role=MessageRole.model, content:","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"  ToolPart.call(id: tool_1750968511490, name: animal_sound_lookup, args: {sound: moo})","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"Message #3: role=MessageRole.user, content:","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"  ToolPart.result(id: tool_1750968511490, name: animal_sound_lookup, result: {animal: cow, sound: moo, echo: moo})","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"Message #4: role=MessageRole.model, content:","type":"print","time":28459}
{"testID":232,"messageType":"print","message":"  TextPart(The user asked me to repeat \"moo\". I used the `animal_sound_lookup` tool, which simply repeated the input \"moo\". This fulfills the user's request. I don't need to call any more tools.\n\nFinal Response: moo\n)","type":"print","time":28459}
{"testID":232,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":28459}
{"test":{"id":233,"name":"Message history and features context is maintained across chat responses: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":533,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":28459}
{"testID":230,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":29710}
{"testID":230,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":30371}
{"test":{"id":234,"name":"McpClient Tests integration with Agent can connect to DeepWiki MCP server with session management","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":470,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":30371}
{"testID":234,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":30372}
{"testID":233,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":30794}
{"test":{"id":235,"name":"Message history and features context is maintained across chat responses: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":551,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":30794}
{"testID":235,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":32232}
{"test":{"id":236,"name":"Message history and features growing history Gemini→OpenAI→Gemini→OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":732,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":32233}
{"testID":236,"messageType":"print","message":"\n--- Provider 0: google ---","type":"print","time":32234}
{"testID":236,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":32234}
{"testID":236,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":32234}
{"testID":226,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":32520}
{"test":{"id":237,"name":"Dartantic AI Integration Tests Agent.model constructor Gemini Integration","suiteID":183,"groupIDs":[185,186,187],"metadata":{"skip":false,"skipReason":null},"line":157,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":32521}
{"testID":234,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":32565}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:36.952847: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\n\"","type":"print","time":33069}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:36.952912: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":33069}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:36.952938: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":33069}
{"testID":236,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":33069}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:36.953121: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":33069}
{"testID":237,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The Windy City in the USA is **Chicago**.\n\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 177:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":33318}
{"testID":237,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":33318}
{"test":{"id":238,"name":"Dartantic AI Integration Tests Agent.model constructor OpenAI Integration","suiteID":183,"groupIDs":[185,186,187],"metadata":{"skip":false,"skipReason":null},"line":189,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":33318}
{"testID":234,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":33373}
{"test":{"id":239,"name":"McpClient Tests integration with Agent can configure local MCP server for Agent integration","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":546,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":33373}
{"testID":239,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":33374}
{"test":{"id":240,"name":"McpClient Tests integration with Agent demonstrates local MCP server workflow configuration","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":559,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":33374}
{"testID":240,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":33374}
{"test":{"id":241,"name":"McpClient Tests integration with Agent validates local tool configuration patterns","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":572,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":33374}
{"testID":241,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":33374}
{"test":{"id":242,"name":"McpClient Tests integration with Agent can combine multiple MCP servers and local tools in Agent","suiteID":6,"groupIDs":[52,53,223],"metadata":{"skip":false,"skipReason":null},"line":594,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":33374}
{"testID":242,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":33375}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:37.873628: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the animal_sound_lookup tool and received the results. The original request was \"What animal says \"moo\"?\" I can now provide the final answer.\n\nFinal Answer: The animal that says \"moo\" is a cow.\n\"","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\nI have already called the animal_sound_lookup tool and received the results. The original request was \"What animal says \"moo\"?\" I can now provide the final answer.\n\nFinal Answer: The animal that says \"moo\" is a cow.\n","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"\n--- Provider 1: openai ---","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"  Tool call: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":33990}
{"testID":236,"messageType":"print","message":"  Tool result: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":33990}
{"testID":231,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":34110}
{"test":{"id":243,"name":"Multimedia Input Provider: openai should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":34111}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:39.079684: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":35196}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:39.079750: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":35196}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:39.079776: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":35196}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":35196}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:39.079828: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":35196}
{"testID":242,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":35692}
{"testID":243,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":35705}
{"group":{"id":244,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: openrouter","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":35705}
{"test":{"id":245,"name":"Multimedia Input Provider: openrouter should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,244],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":35705}
{"testID":238,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. While many assume it refers to the city's weather, it originally referred to the city's long-winded politicians and boastful residents during the late 19th century. Nonetheless, Chicago is known for its breezy weather due to its location by Lake Michigan.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 209:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":35876}
{"testID":238,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":35876}
{"test":{"id":246,"name":"Dartantic AI Integration Tests Agent.model constructor Agent.runPrompt with DotPrompt object","suiteID":183,"groupIDs":[185,186,187],"metadata":{"skip":false,"skipReason":null},"line":221,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":35876}
{"testID":245,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":36165}
{"testID":245,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":36165}
{"test":{"id":247,"name":"Multimedia Input Provider: openrouter should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,244],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":36165}
{"testID":242,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":36387}
{"testID":247,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":36717}
{"testID":247,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":36718}
{"test":{"id":248,"name":"Multimedia Input Provider: openrouter should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,244],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":36718}
{"testID":246,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":36800}
{"group":{"id":249,"suiteID":183,"parentID":186,"name":"Dartantic AI Integration Tests Agent constructor with provider","metadata":{"skip":false,"skipReason":null},"testCount":7,"line":243,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":36801}
{"test":{"id":250,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider Basic","suiteID":183,"groupIDs":[185,186,249],"metadata":{"skip":false,"skipReason":null},"line":244,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":36801}
{"testID":248,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":37251}
{"testID":248,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":37251}
{"test":{"id":251,"name":"Multimedia Input Provider: openrouter should handle multiple attachments","suiteID":190,"groupIDs":[192,193,244],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":37251}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:41.196434: [LangchainWrapper] Attempting to parse tool call from: \"I understand that the animal_sound_lookup tool was previously called for the sound \"quack.\" Based on the results from that tool call:\n\nThe animal that says \"quack\" is a duck.\"","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I understand that the animal_sound_lookup tool was previously called for the sound \"quack.\" Based on the results from that tool call:\n\nThe animal that says \"quack\" is a duck.","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"\n--- Provider 2: google ---","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  Tool call: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  Tool result: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  Tool call: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":37313}
{"testID":236,"messageType":"print","message":"  Tool result: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":37313}
{"testID":242,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":37727}
{"testID":251,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":37963}
{"testID":251,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":37963}
{"test":{"id":252,"name":"Multimedia Input Provider: openrouter should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,244],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":37964}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:42.333622: [LangchainWrapper] Attempting to parse tool call from: \"I seem to be stuck in a loop and have already provided the answer to this question. I will try a different approach.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":38450}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:42.333686: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":38450}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:42.333708: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":38450}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":38450}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:42.333791: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":38450}
{"testID":242,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":38451}
{"testID":252,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":38594}
{"testID":252,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":38595}
{"test":{"id":253,"name":"Multimedia Input Provider: openrouter should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,244],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":38595}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:43.091560: [LangchainWrapper] Attempting to parse tool call from: \"I apologize, I seem to be stuck in a loop. I already answered the question \"What animal says \"quack\"?\" in the previous turn. I do not need to call any more tools.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n\"","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"Provider google output: I seem to be stuck in a loop and have already provided the answer to this question. I will try a different approach.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI apologize, I seem to be stuck in a loop. I already answered the question \"What animal says \"quack\"?\" in the previous turn. I do not need to call any more tools.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968522333, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968522333, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"\n--- Provider 3: openai ---","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"Current history size: 13 messages","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  Tool call: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  Tool result: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  Tool call: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  Tool result: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  Tool call: id=tool_1750968522333, name=animal_sound_lookup","type":"print","time":39208}
{"testID":236,"messageType":"print","message":"  Tool result: id=tool_1750968522333, name=animal_sound_lookup","type":"print","time":39208}
{"testID":253,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":39223}
{"testID":253,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":39224}
{"group":{"id":254,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: gemini-compat","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":39224}
{"test":{"id":255,"name":"Multimedia Input Provider: gemini-compat should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,254],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":39224}
{"testID":255,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":39725}
{"testID":255,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":39725}
{"test":{"id":256,"name":"Multimedia Input Provider: gemini-compat should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,254],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":39725}
{"testID":250,"error":"Expected: <1>\n  Actual: <4>\n","stackTrace":"package:matcher                    expect\ntest/dartantic_ai_test.dart 258:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":39817}
{"testID":250,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":39817}
{"test":{"id":257,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider with Schema","suiteID":183,"groupIDs":[185,186,249],"metadata":{"skip":false,"skipReason":null},"line":261,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":39817}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:44.127728: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":40244}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:44.127789: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":40244}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:44.127809: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":40244}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":40244}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:44.127856: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":40244}
{"testID":256,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":41254}
{"testID":256,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":41254}
{"test":{"id":258,"name":"Multimedia Input Provider: gemini-compat should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,254],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":41254}
{"testID":258,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":41630}
{"testID":258,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":41631}
{"test":{"id":259,"name":"Multimedia Input Provider: gemini-compat should handle multiple attachments","suiteID":190,"groupIDs":[192,193,254],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":41631}
{"testID":257,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. Despite popular belief, the nickname isn't due to the city's weather but is thought to have originated from the city's politicians in the late 19th century, who were said to be \"full of hot air.\" However, Chicago is indeed known for its breezy conditions due to its location near Lake Michigan.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 281:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":41955}
{"testID":257,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":41955}
{"test":{"id":260,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider Basic","suiteID":183,"groupIDs":[185,186,249],"metadata":{"skip":false,"skipReason":null},"line":293,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":41955}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:45.932682: [LangchainWrapper] Attempting to parse tool call from: \"I will use the animal_sound_lookup tool to answer your question about which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":42049}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:45.932741: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":42049}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:45.932760: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":42049}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":42049}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:45.932821: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":42049}
{"testID":259,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":42079}
{"testID":259,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":42079}
{"test":{"id":261,"name":"Multimedia Input Provider: gemini-compat should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,254],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":42080}
{"testID":261,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":42653}
{"testID":261,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":42653}
{"test":{"id":262,"name":"Multimedia Input Provider: gemini-compat should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,254],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":42654}
{"testID":262,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":43158}
{"testID":262,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":43158}
{"group":{"id":263,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: google","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":43159}
{"test":{"id":264,"name":"Multimedia Input Provider: google should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,263],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":43159}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:47.238468: [LangchainWrapper] Attempting to parse tool call from: \"I will use the animal_sound_lookup tool to find out which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":43355}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:47.238535: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":43355}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:47.238556: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":43355}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":43355}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:47.238613: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":43355}
{"testID":264,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":44067}
{"test":{"id":265,"name":"Multimedia Input Provider: google should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,263],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":44067}
{"testID":260,"error":"Expected: <1>\n  Actual: <5>\n","stackTrace":"package:matcher                    expect\ntest/dartantic_ai_test.dart 307:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":44073}
{"testID":260,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":44073}
{"test":{"id":266,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider with Schema","suiteID":183,"groupIDs":[185,186,249],"metadata":{"skip":false,"skipReason":null},"line":310,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":44073}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:48.604762: [LangchainWrapper] Attempting to parse tool call from: \"I will use the animal_sound_lookup tool to confirm which animal makes the \"quack\" sound.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":44721}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:48.604849: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":44721}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:48.604871: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":44721}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":44721}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:48.604938: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":44721}
{"testID":266,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The Windy City in the US of A is **Chicago**.\n\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 330:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":44930}
{"testID":266,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":44930}
{"test":{"id":267,"name":"Dartantic AI Integration Tests Agent constructor with provider Provider with Tools","suiteID":183,"groupIDs":[185,186,249],"metadata":{"skip":false,"skipReason":null},"line":342,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":44930}
{"testID":265,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":45541}
{"test":{"id":268,"name":"Multimedia Input Provider: google should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,263],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":45541}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:49.783575: [LangchainWrapper] Attempting to parse tool call from: \"I will call the animal_sound_lookup tool to confirm which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":45900}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:49.783636: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":45900}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:49.783654: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":45900}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":45900}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:49.783697: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":45900}
{"testID":268,"messageType":"skip","message":"Provider google does not support arbitrary web URLs: Invalid or unsupported file uri: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg","type":"print","time":46732}
{"testID":268,"result":"success","skipped":true,"hidden":false,"type":"testDone","time":46733}
{"test":{"id":269,"name":"Multimedia Input Provider: google should handle multiple attachments","suiteID":190,"groupIDs":[192,193,263],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":46733}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:51.628500: [LangchainWrapper] Attempting to parse tool call from: \"I will call the animal_sound_lookup tool to determine what animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":47745}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:51.628619: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":47745}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:51.628640: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":47745}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":47745}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:51.628711: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":47745}
{"testID":269,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":49334}
{"test":{"id":270,"name":"Multimedia Input Provider: google should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,263],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":49334}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:53.222762: [LangchainWrapper] Attempting to parse tool call from: \"I will use the animal_sound_lookup tool to answer your question about the animal that says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":49339}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:53.222826: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":49339}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:53.222846: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":49339}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":49339}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:53.222891: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":49339}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:54.440539: [LangchainWrapper] Attempting to parse tool call from: \"I will call the animal_sound_lookup tool to find out what animal says \"quack.\" \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":50557}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:54.440598: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":50557}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:54.440620: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":50557}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":50557}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:54.440667: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":50557}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:55.797681: [LangchainWrapper] Attempting to parse tool call from: \"To address your request, I will call the animal_sound_lookup tool to find out which animal makes the \"quack\" sound.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":51914}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:55.797745: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":51914}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:55.797764: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":51914}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":51914}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:55.797813: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":51914}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:57.431850: [LangchainWrapper] Attempting to parse tool call from: \"I apologize for the confusion earlier. Let me use the animal_sound_lookup tool to confirm which animal makes the \"quack\" sound.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":53548}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:57.431915: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":53548}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:57.431933: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":53548}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:57.431975: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":53548}
{"testID":110,"messageType":"print","message":"WARNING: 2025-06-26 16:08:57.432042: [LangchainWrapper] Max tool calling iterations reached","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the animal_sound_lookup tool to answer your question about which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the animal_sound_lookup tool to find out which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the animal_sound_lookup tool to confirm which animal makes the \"quack\" sound.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will call the animal_sound_lookup tool to confirm which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will call the animal_sound_lookup tool to determine what animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the animal_sound_lookup tool to answer your question about the animal that says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will call the animal_sound_lookup tool to find out what animal says \"quack.\" \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}To address your request, I will call the animal_sound_lookup tool to find out which animal makes the \"quack\" sound.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I apologize for the confusion earlier. Let me use the animal_sound_lookup tool to confirm which animal makes the \"quack\" sound.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968516953, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968519079, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968522333, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968522333, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968524127, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968524127, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968525932, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968525932, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968527238, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968527238, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968528604, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968528604, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968529783, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968529783, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968531628, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968531628, name=animal_sound_lookup","type":"print","time":53548}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968533222, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968533222, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968534440, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968534440, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968535797, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968535797, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"  New tool call: id=tool_1750968537431, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"  New tool result: id=tool_1750968537431, name=animal_sound_lookup","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"All tool call IDs: [tool_1750968516953, tool_1750968516953, tool_1750968519079, tool_1750968516953, tool_1750968519079, tool_1750968522333, tool_1750968516953, tool_1750968519079, tool_1750968522333, tool_1750968524127, tool_1750968525932, tool_1750968527238, tool_1750968528604, tool_1750968529783, tool_1750968531628, tool_1750968533222, tool_1750968534440, tool_1750968535797, tool_1750968537431]","type":"print","time":53549}
{"testID":236,"messageType":"print","message":"All tool result IDs: [tool_1750968516953, tool_1750968516953, tool_1750968519079, tool_1750968516953, tool_1750968519079, tool_1750968522333, tool_1750968516953, tool_1750968519079, tool_1750968522333, tool_1750968524127, tool_1750968525932, tool_1750968527238, tool_1750968528604, tool_1750968529783, tool_1750968531628, tool_1750968533222, tool_1750968534440, tool_1750968535797, tool_1750968537431]","type":"print","time":53549}
{"testID":236,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":53549}
{"test":{"id":271,"name":"Message history and features growing history OpenAI→Gemini→OpenAI→Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":741,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":53549}
{"testID":271,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":53550}
{"testID":271,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":53550}
{"testID":271,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":53550}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:58.627934: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":54744}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:58.627991: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":54744}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:58.628013: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":54744}
{"testID":271,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":54744}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:58.628066: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":54744}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:59.128993: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"moo\" is a cow.\"","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}The animal that says \"moo\" is a cow.","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"\n--- Provider 1: google ---","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"  Tool call: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":55245}
{"testID":271,"messageType":"print","message":"  Tool result: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":55245}
{"testID":270,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":55693}
{"test":{"id":272,"name":"Multimedia Input Provider: google should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,263],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":55694}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:59.976132: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":56092}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:59.976196: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":56092}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:08:59.976220: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":56092}
{"testID":271,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":56092}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:08:59.976304: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":56092}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:00.650018: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the animal_sound_lookup tool and received the answer to the question \"What animal says \"quack\"?\". I do not need to call any more tools.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n\"","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI have already called the animal_sound_lookup tool and received the answer to the question \"What animal says \"quack\"?\". I do not need to call any more tools.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"\n--- Provider 2: openai ---","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  Tool call: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  Tool result: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  Tool call: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":56766}
{"testID":271,"messageType":"print","message":"  Tool result: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":56766}
{"testID":272,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":56982}
{"group":{"id":273,"suiteID":190,"parentID":192,"name":"Multimedia Error Handling","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":208,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":56982}
{"test":{"id":274,"name":"Multimedia Error Handling should handle non-existent file gracefully","suiteID":190,"groupIDs":[192,273],"metadata":{"skip":false,"skipReason":null},"line":209,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":56982}
{"testID":274,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":56984}
{"test":{"id":275,"name":"Multimedia Error Handling should handle invalid URL gracefully","suiteID":190,"groupIDs":[192,273],"metadata":{"skip":false,"skipReason":null},"line":218,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":56985}
{"testID":275,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":56985}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:01.728991: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":57845}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:01.729050: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":57845}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:01.729072: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":57845}
{"testID":271,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":57845}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:01.729115: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":57845}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:02.499258: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"quack\" is a duck.\"","type":"print","time":58615}
{"testID":271,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}The animal that says \"quack\" is a duck.","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968541729, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968541729, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"\n--- Provider 3: google ---","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"Current history size: 13 messages","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  Tool call: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  Tool result: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  Tool call: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  Tool result: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  Tool call: id=tool_1750968541729, name=animal_sound_lookup","type":"print","time":58616}
{"testID":271,"messageType":"print","message":"  Tool result: id=tool_1750968541729, name=animal_sound_lookup","type":"print","time":58616}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:03.399436: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":59515}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:03.399497: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":59516}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:03.399515: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":59516}
{"testID":271,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":59516}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:03.399597: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":59516}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:04.048511: [LangchainWrapper] Attempting to parse tool call from: \"I have already provided the final response. The original request was \"What animal says \"quack\"?\" and I correctly answered \"The animal that says \"quack\" is a duck.\" Repetition of the same question does not require further action.\n\"","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI have already provided the final response. The original request was \"What animal says \"quack\"?\" and I correctly answered \"The animal that says \"quack\" is a duck.\" Repetition of the same question does not require further action.\n","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968538628, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968539976, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968541729, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968541729, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool call: id=tool_1750968543399, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"  New tool result: id=tool_1750968543399, name=animal_sound_lookup","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"All tool call IDs: [tool_1750968538628, tool_1750968538628, tool_1750968539976, tool_1750968538628, tool_1750968539976, tool_1750968541729, tool_1750968538628, tool_1750968539976, tool_1750968541729, tool_1750968543399]","type":"print","time":60165}
{"testID":271,"messageType":"print","message":"All tool result IDs: [tool_1750968538628, tool_1750968538628, tool_1750968539976, tool_1750968538628, tool_1750968539976, tool_1750968541729, tool_1750968538628, tool_1750968539976, tool_1750968541729, tool_1750968543399]","type":"print","time":60165}
{"testID":271,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":60165}
{"test":{"id":276,"name":"Message history and features growing history OpenAI→OpenAI→OpenAI→OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":750,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":60165}
{"testID":276,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":60166}
{"testID":276,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":60166}
{"testID":276,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":60166}
{"testID":267,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":61415}
{"test":{"id":277,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider with Tools","suiteID":183,"groupIDs":[185,186,249],"metadata":{"skip":false,"skipReason":null},"line":399,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":61415}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:05.440780: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":61557}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:05.440843: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":61557}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:05.440861: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":61557}
{"testID":276,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":61557}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:05.440908: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":61557}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:06.155273: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"moo\" is a cow.\"","type":"print","time":62271}
{"testID":276,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}The animal that says \"moo\" is a cow.","type":"print","time":62271}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":62271}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":62272}
{"testID":276,"messageType":"print","message":"\n--- Provider 1: openai ---","type":"print","time":62272}
{"testID":276,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":62272}
{"testID":276,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":62272}
{"testID":276,"messageType":"print","message":"  Tool call: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":62272}
{"testID":276,"messageType":"print","message":"  Tool result: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":62272}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:07.383154: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":63499}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:07.383216: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":63499}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:07.383236: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":63499}
{"testID":276,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":63499}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:07.383282: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":63499}
{"testID":277,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64022}
{"test":{"id":278,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider with Google AI OpenAI-compatible API","suiteID":183,"groupIDs":[185,186,249],"metadata":{"skip":false,"skipReason":null},"line":456,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64023}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:07.968145: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"quack\" is a duck.\"","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}The animal that says \"quack\" is a duck.","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"\n--- Provider 2: openai ---","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  Tool call: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  Tool result: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  Tool call: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":64084}
{"testID":276,"messageType":"print","message":"  Tool result: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":64084}
{"testID":278,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":64744}
{"testID":278,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":64744}
{"group":{"id":279,"suiteID":183,"parentID":186,"name":"Dartantic AI Integration Tests Provider Aliases","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":470,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":64745}
{"test":{"id":280,"name":"Dartantic AI Integration Tests Provider Aliases googleai alias creates GeminiProvider","suiteID":183,"groupIDs":[185,186,279],"metadata":{"skip":false,"skipReason":null},"line":471,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64745}
{"testID":280,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64745}
{"test":{"id":281,"name":"Dartantic AI Integration Tests Provider Aliases google-gla alias creates GeminiProvider","suiteID":183,"groupIDs":[185,186,279],"metadata":{"skip":false,"skipReason":null},"line":476,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64745}
{"testID":281,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64745}
{"test":{"id":282,"name":"Dartantic AI Integration Tests Provider Aliases gemini alias creates GeminiProvider","suiteID":183,"groupIDs":[185,186,279],"metadata":{"skip":false,"skipReason":null},"line":481,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64745}
{"testID":282,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64746}
{"test":{"id":283,"name":"Dartantic AI Integration Tests Provider Aliases google provider creates GeminiProvider","suiteID":183,"groupIDs":[185,186,279],"metadata":{"skip":false,"skipReason":null},"line":486,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64746}
{"testID":283,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64746}
{"test":{"id":284,"name":"Dartantic AI Integration Tests Provider Aliases openai provider creates OpenAiProvider","suiteID":183,"groupIDs":[185,186,279],"metadata":{"skip":false,"skipReason":null},"line":491,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64746}
{"testID":284,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64746}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:08.998478: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":65114}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:08.998538: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":65115}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:08.998557: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":65115}
{"testID":276,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":65115}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:08.998606: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":65115}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:09.558204: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"quack\" is a duck.\"","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}The animal that says \"quack\" is a duck.","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968548998, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968548998, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"\n--- Provider 3: openai ---","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"Current history size: 13 messages","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  Tool call: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  Tool result: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  Tool call: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  Tool result: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  Tool call: id=tool_1750968548998, name=animal_sound_lookup","type":"print","time":65674}
{"testID":276,"messageType":"print","message":"  Tool result: id=tool_1750968548998, name=animal_sound_lookup","type":"print","time":65675}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:12.348055: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":68464}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:12.348118: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":68464}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:12.348136: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":68464}
{"testID":276,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":68464}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:12.348181: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":68464}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:13.180620: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"quack\" is a duck.\"","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}The animal that says \"quack\" is a duck.","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968545440, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968547383, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968548998, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968548998, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool call: id=tool_1750968552348, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"  New tool result: id=tool_1750968552348, name=animal_sound_lookup","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"All tool call IDs: [tool_1750968545440, tool_1750968545440, tool_1750968547383, tool_1750968545440, tool_1750968547383, tool_1750968548998, tool_1750968545440, tool_1750968547383, tool_1750968548998, tool_1750968552348]","type":"print","time":69297}
{"testID":276,"messageType":"print","message":"All tool result IDs: [tool_1750968545440, tool_1750968545440, tool_1750968547383, tool_1750968545440, tool_1750968547383, tool_1750968548998, tool_1750968545440, tool_1750968547383, tool_1750968548998, tool_1750968552348]","type":"print","time":69297}
{"testID":276,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":69297}
{"test":{"id":285,"name":"Message history and features growing history Gemini→Gemini→Gemini→Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":759,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":69297}
{"testID":285,"messageType":"print","message":"\n--- Provider 0: google ---","type":"print","time":69298}
{"testID":285,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":69298}
{"testID":285,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":69298}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:16.115736: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\n\"","type":"print","time":72232}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:16.115796: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":72232}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:16.115817: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":72232}
{"testID":285,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":72232}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:16.115893: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":72232}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:16.702968: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the animal_sound_lookup tool and received the answer. I can now provide the final response.\n\nFinal Response:\nThe animal that says \"moo\" is a cow.\n\"","type":"print","time":72819}
{"testID":285,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\nI have already called the animal_sound_lookup tool and received the answer. I can now provide the final response.\n\nFinal Response:\nThe animal that says \"moo\" is a cow.\n","type":"print","time":72819}
{"testID":285,"messageType":"print","message":"  New tool call: id=tool_1750968556115, name=animal_sound_lookup","type":"print","time":72819}
{"testID":285,"messageType":"print","message":"  New tool result: id=tool_1750968556115, name=animal_sound_lookup","type":"print","time":72819}
{"testID":285,"messageType":"print","message":"\n--- Provider 1: google ---","type":"print","time":72819}
{"testID":285,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":72820}
{"testID":285,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":72820}
{"testID":285,"messageType":"print","message":"  Tool call: id=tool_1750968556115, name=animal_sound_lookup","type":"print","time":72820}
{"testID":285,"messageType":"print","message":"  Tool result: id=tool_1750968556115, name=animal_sound_lookup","type":"print","time":72820}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:18.185284: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":74301}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:18.185373: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":74301}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:18.185392: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":74301}
{"testID":285,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":74301}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:18.185493: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":74302}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:19.083236: [LangchainWrapper] Attempting to parse tool call from: \"I previously called the `animal_sound_lookup` tool to answer the question \"What animal says 'quack'?\" I should now check the tool's results to provide a final answer. I don't see the results of the tool call in our conversation history. I need to call the tool again.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":75199}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:19.083300: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":75199}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:19.083320: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":75199}
{"testID":285,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":75199}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:19.083387: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":75199}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:19.935480: [LangchainWrapper] Attempting to parse tool call from: \"I previously called the `animal_sound_lookup` tool, but I didn't actually provide the sound to look up! I need to call it again with the correct argument.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"animal_sound\": \"quack\"}}\n\"","type":"print","time":76051}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:19.935543: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"animal_sound\": \"quack\"}}\"","type":"print","time":76051}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:19.935564: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":76051}
{"testID":285,"messageType":"print","message":"onCall: {animal_sound: quack}","type":"print","time":76052}
{"testID":285,"error":"type 'Null' is not a subtype of type 'String' in type cast","stackTrace":"test/message_test.dart 587:40                                                  main.<fn>.testGrowingHistoryWithProviders.<fn>\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 604:39  LangchainWrapper._callTool\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 444:34  LangchainWrapper._streamLLMWithTools\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 321:9   LangchainWrapper._streamLLMResponse\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 120:7   LangchainWrapper.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 322:5                                Agent.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 300:5                                Agent.run\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                                                     rateLimitRetry\n===== asynchronous gap ===========================\ntest/message_test.dart 642:24                                                  main.<fn>.testGrowingHistoryWithProviders\n===== asynchronous gap ===========================\ntest/message_test.dart 760:7                                                   main.<fn>.<fn>\n","isFailure":false,"type":"error","time":76054}
{"testID":285,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":76054}
{"test":{"id":286,"name":"Message history and features growing history with all primary providers","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":769,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":76054}
{"testID":286,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":76056}
{"testID":286,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":76056}
{"testID":286,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":76056}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:21.307173: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":77423}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:21.307238: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":77423}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:21.307259: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":77423}
{"testID":286,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":77423}
{"testID":110,"messageType":"print","message":"FINE: 2025-06-26 16:09:21.307308: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":77423}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:22.257384: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"moo\" is a cow.\"","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}The animal that says \"moo\" is a cow.","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"  New tool call: id=tool_1750968561307, name=animal_sound_lookup","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"  New tool result: id=tool_1750968561307, name=animal_sound_lookup","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"\n--- Provider 1: openrouter ---","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"  Tool call: id=tool_1750968561307, name=animal_sound_lookup","type":"print","time":78373}
{"testID":286,"messageType":"print","message":"  Tool result: id=tool_1750968561307, name=animal_sound_lookup","type":"print","time":78373}
{"testID":286,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":79434}
{"testID":286,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":79434}
{"test":{"id":287,"name":"Message history and features tool result is referenced in later chat: Gemini","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":854,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":79434}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:24.253025: [LangchainWrapper] Attempting to parse tool call from: \"I don't need any tools to echo the provided text.\n\"","type":"print","time":80369}
{"testID":287,"messageType":"print","message":"--- Debug: Message history after first agent run (provider: \\google:gemini-2.0-flash) ---","type":"print","time":80369}
{"testID":287,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":80369}
{"testID":287,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":80369}
{"testID":287,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":80369}
{"testID":287,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":80369}
{"testID":287,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":80369}
{"testID":287,"messageType":"print","message":"  TextPart(I don't need any tools to echo the provided text.\n)","type":"print","time":80369}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:24.983833: [LangchainWrapper] Attempting to parse tool call from: \"The value you asked me to echo was \"magic-value-123\".\n\"","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"--- Debug: Follow-up output (provider: \\google:gemini-2.0-flash) ---","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"Follow-up prompt: \\What value did I ask you to echo?","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"Follow-up output: \\The value you asked me to echo was \"magic-value-123\".\n","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"--- Debug: Follow-up message history ---","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"  TextPart(I don't need any tools to echo the provided text.\n)","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"Message #3: role=\\MessageRole.user, content:","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"  TextPart(What value did I ask you to echo?)","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"Message #4: role=\\MessageRole.model, content:","type":"print","time":81100}
{"testID":287,"messageType":"print","message":"  TextPart(The value you asked me to echo was \"magic-value-123\".\n)","type":"print","time":81100}
{"testID":287,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":81100}
{"test":{"id":288,"name":"Message history and features tool result is referenced in later chat: OpenAI","suiteID":107,"groupIDs":[109,123],"metadata":{"skip":false,"skipReason":null},"line":857,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":81100}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:26.980974: [LangchainWrapper] Attempting to parse tool call from: \"The request is to simply repeat or \"echo\" the given text. Therefore, there is no need to call any tools for this task. \n\nHere is the echoed text: magic-value-123\"","type":"print","time":83097}
{"testID":288,"messageType":"print","message":"--- Debug: Message history after first agent run (provider: \\openai:gpt-4o) ---","type":"print","time":83097}
{"testID":288,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":83097}
{"testID":288,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":83097}
{"testID":288,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":83097}
{"testID":288,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":83097}
{"testID":288,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":83097}
{"testID":288,"messageType":"print","message":"  TextPart(The request is to simply repeat or \"echo\" the given text. Therefore, there is no need to call any tools for this task. \n\nHere is the echoed text: magic-value-123)","type":"print","time":83097}
{"testID":110,"messageType":"print","message":"INFO: 2025-06-26 16:09:27.726709: [LangchainWrapper] Attempting to parse tool call from: \"You asked me to echo the value: \"magic-value-123\".\"","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"--- Debug: Follow-up output (provider: \\openai:gpt-4o) ---","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"Follow-up prompt: \\What value did I ask you to echo?","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"Follow-up output: \\You asked me to echo the value: \"magic-value-123\".","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"--- Debug: Follow-up message history ---","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"  TextPart(The request is to simply repeat or \"echo\" the given text. Therefore, there is no need to call any tools for this task. \n\nHere is the echoed text: magic-value-123)","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"Message #3: role=\\MessageRole.user, content:","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"  TextPart(What value did I ask you to echo?)","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"Message #4: role=\\MessageRole.model, content:","type":"print","time":83843}
{"testID":288,"messageType":"print","message":"  TextPart(You asked me to echo the value: \"magic-value-123\".)","type":"print","time":83843}
{"testID":288,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":83843}
{"test":{"id":289,"name":"(tearDownAll)","suiteID":107,"groupIDs":[109],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":83843}
{"testID":289,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":83844}
{"success":false,"type":"done","time":83847}
