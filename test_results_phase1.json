{"protocolVersion":"0.1.1","runnerVersion":"1.26.2","pid":19657,"type":"start","time":0}
{"suite":{"id":0,"platform":"vm","path":"test/model_stability_test.dart"},"type":"suite","time":0}
{"test":{"id":1,"name":"loading test/model_stability_test.dart","suiteID":0,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":4}
{"suite":{"id":2,"platform":"vm","path":"test/secure_api_key_manager_test.dart"},"type":"suite","time":8}
{"test":{"id":3,"name":"loading test/secure_api_key_manager_test.dart","suiteID":2,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":8}
{"suite":{"id":4,"platform":"vm","path":"test/langchain_regression_test.dart"},"type":"suite","time":8}
{"test":{"id":5,"name":"loading test/langchain_regression_test.dart","suiteID":4,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":8}
{"suite":{"id":6,"platform":"vm","path":"test/mcp_client_test.dart"},"type":"suite","time":8}
{"test":{"id":7,"name":"loading test/mcp_client_test.dart","suiteID":6,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":8}
{"suite":{"id":8,"platform":"vm","path":"test/openai_multiple_tool_results_test.dart"},"type":"suite","time":8}
{"test":{"id":9,"name":"loading test/openai_multiple_tool_results_test.dart","suiteID":8,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":8}
{"suite":{"id":10,"platform":"vm","path":"test/gemini_tool_id_consistency_test.dart"},"type":"suite","time":8}
{"test":{"id":11,"name":"loading test/gemini_tool_id_consistency_test.dart","suiteID":10,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":9}
{"count":16,"time":10,"type":"allSuites"}
{"testID":1,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":493}
{"group":{"id":12,"suiteID":0,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":null,"column":null,"url":null},"type":"group","time":495}
{"group":{"id":13,"suiteID":0,"parentID":12,"name":"Model Stability Detection","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":7,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"group","time":495}
{"test":{"id":14,"name":"Model Stability Detection GeminiProvider sets stable field correctly","suiteID":0,"groupIDs":[12,13],"metadata":{"skip":false,"skipReason":null},"line":8,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"testStart","time":495}
{"testID":14,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":507}
{"testID":3,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":546}
{"group":{"id":15,"suiteID":2,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":null,"column":null,"url":null},"type":"group","time":547}
{"group":{"id":16,"suiteID":2,"parentID":15,"name":"SecureApiKeyManager","metadata":{"skip":false,"skipReason":null},"testCount":23,"line":5,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":547}
{"group":{"id":17,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Provider Name Normalization","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":17,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":547}
{"test":{"id":18,"name":"SecureApiKeyManager Provider Name Normalization should normalize provider aliases","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":18,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":548}
{"testID":18,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":558}
{"test":{"id":19,"name":"SecureApiKeyManager Provider Name Normalization should handle provider aliases","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":23,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":558}
{"testID":19,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":559}
{"test":{"id":20,"name":"SecureApiKeyManager Provider Name Normalization should return null for unsupported providers","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":29,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":559}
{"testID":20,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":560}
{"group":{"id":21,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager API Key Validation","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":34,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":560}
{"test":{"id":22,"name":"SecureApiKeyManager API Key Validation should validate OpenAI API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":35,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":560}
{"testID":22,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":563}
{"test":{"id":23,"name":"SecureApiKeyManager API Key Validation should validate Anthropic API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":47,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":563}
{"testID":23,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":564}
{"test":{"id":24,"name":"SecureApiKeyManager API Key Validation should validate OpenRouter API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":59,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":564}
{"testID":24,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":565}
{"test":{"id":25,"name":"SecureApiKeyManager API Key Validation should validate HuggingFace API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":71,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":565}
{"testID":25,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":566}
{"test":{"id":26,"name":"SecureApiKeyManager API Key Validation should prevent cross-provider key usage","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":83,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":566}
{"testID":26,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":567}
{"test":{"id":27,"name":"SecureApiKeyManager API Key Validation should reject empty API keys","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":97,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":567}
{"testID":27,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":567}
{"group":{"id":28,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Key Storage and Retrieval","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":105,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":567}
{"test":{"id":29,"name":"SecureApiKeyManager Key Storage and Retrieval should store and retrieve API keys correctly","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":106,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":567}
{"testID":29,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":568}
{"test":{"id":30,"name":"SecureApiKeyManager Key Storage and Retrieval should return null for non-existent keys","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":113,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":569}
{"testID":30,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":570}
{"test":{"id":31,"name":"SecureApiKeyManager Key Storage and Retrieval should support key management by provider name","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":117,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":570}
{"testID":31,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":570}
{"test":{"id":32,"name":"SecureApiKeyManager Key Storage and Retrieval should handle provider aliases in name-based operations","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":124,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":571}
{"testID":32,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":571}
{"test":{"id":33,"name":"SecureApiKeyManager Key Storage and Retrieval should throw error for unsupported provider names","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":133,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":571}
{"testID":33,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":572}
{"test":{"id":34,"name":"SecureApiKeyManager Key Storage and Retrieval should return null for unsupported provider names in get operations","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":140,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":572}
{"testID":34,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":573}
{"group":{"id":35,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Key Isolation","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":145,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":573}
{"test":{"id":36,"name":"SecureApiKeyManager Key Isolation should maintain isolation between providers","suiteID":2,"groupIDs":[15,16,35],"metadata":{"skip":false,"skipReason":null},"line":146,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":573}
{"testID":36,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":574}
{"test":{"id":37,"name":"SecureApiKeyManager Key Isolation should clear keys for specific providers only","suiteID":2,"groupIDs":[15,16,35],"metadata":{"skip":false,"skipReason":null},"line":165,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":574}
{"testID":37,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":574}
{"test":{"id":38,"name":"SecureApiKeyManager Key Isolation should clear all keys when requested","suiteID":2,"groupIDs":[15,16,35],"metadata":{"skip":false,"skipReason":null},"line":178,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":575}
{"testID":38,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":575}
{"group":{"id":39,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Configuration Validation","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":189,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":575}
{"test":{"id":40,"name":"SecureApiKeyManager Configuration Validation should validate configuration and return issues","suiteID":2,"groupIDs":[15,16,39],"metadata":{"skip":false,"skipReason":null},"line":190,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":576}
{"testID":40,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":577}
{"test":{"id":41,"name":"SecureApiKeyManager Configuration Validation should list configured providers","suiteID":2,"groupIDs":[15,16,39],"metadata":{"skip":false,"skipReason":null},"line":200,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":577}
{"testID":41,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":579}
{"group":{"id":42,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Singleton Behavior","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":211,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":579}
{"test":{"id":43,"name":"SecureApiKeyManager Singleton Behavior should maintain singleton instance","suiteID":2,"groupIDs":[15,16,42],"metadata":{"skip":false,"skipReason":null},"line":212,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":579}
{"testID":43,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":579}
{"test":{"id":44,"name":"SecureApiKeyManager Singleton Behavior should maintain state across instance calls","suiteID":2,"groupIDs":[15,16,42],"metadata":{"skip":false,"skipReason":null},"line":219,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":579}
{"testID":44,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":580}
{"group":{"id":45,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Google Provider Special Cases","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":227,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":580}
{"test":{"id":46,"name":"SecureApiKeyManager Google Provider Special Cases should handle both GOOGLE_API_KEY and GEMINI_API_KEY aliases","suiteID":2,"groupIDs":[15,16,45],"metadata":{"skip":false,"skipReason":null},"line":228,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":580}
{"testID":46,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":580}
{"group":{"id":47,"suiteID":2,"parentID":15,"name":"Integration with Legacy Environment","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":240,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":581}
{"test":{"id":48,"name":"Integration with Legacy Environment should work with legacy Agent.environment for backward compatibility","suiteID":2,"groupIDs":[15,47],"metadata":{"skip":false,"skipReason":null},"line":241,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":581}
{"testID":48,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":581}
{"suite":{"id":49,"platform":"vm","path":"test/gemini_tools_test.dart"},"type":"suite","time":585}
{"test":{"id":50,"name":"loading test/gemini_tools_test.dart","suiteID":49,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":585}
{"testID":5,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":592}
{"group":{"id":51,"suiteID":4,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":29,"line":null,"column":null,"url":null},"type":"group","time":592}
{"group":{"id":52,"suiteID":4,"parentID":51,"name":"Langchain Integration Regression Tests","metadata":{"skip":false,"skipReason":null},"testCount":29,"line":9,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":592}
{"test":{"id":53,"name":"Langchain Integration Regression Tests (setUpAll)","suiteID":4,"groupIDs":[51,52],"metadata":{"skip":false,"skipReason":null},"line":10,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":592}
{"testID":9,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":593}
{"group":{"id":54,"suiteID":8,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":null,"column":null,"url":null},"type":"group","time":593}
{"test":{"id":55,"name":"(setUpAll)","suiteID":8,"groupIDs":[54],"metadata":{"skip":false,"skipReason":null},"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"testStart","time":593}
{"testID":7,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":600}
{"group":{"id":56,"suiteID":6,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":null,"column":null,"url":null},"type":"group","time":600}
{"group":{"id":57,"suiteID":6,"parentID":56,"name":"McpClient Tests","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":11,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":601}
{"group":{"id":58,"suiteID":6,"parentID":57,"name":"McpClient Tests remote server configuration","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":12,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":601}
{"test":{"id":59,"name":"McpClient Tests remote server configuration creates remote server with required parameters","suiteID":6,"groupIDs":[56,57,58],"metadata":{"skip":false,"skipReason":null},"line":13,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":601}
{"testID":53,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":601}
{"testID":53,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":601}
{"testID":53,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":601}
{"group":{"id":60,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Original Provider Functionality","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":601}
{"test":{"id":61,"name":"Langchain Integration Regression Tests Original Provider Functionality original OpenAI provider still works","suiteID":4,"groupIDs":[51,52,60],"metadata":{"skip":false,"skipReason":null},"line":22,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":601}
{"testID":55,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":602}
{"group":{"id":62,"suiteID":8,"parentID":54,"name":"OpenAI Multiple Tool Results Bug","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":17,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"group","time":602}
{"test":{"id":63,"name":"OpenAI Multiple Tool Results Bug should handle multiple tool results in a single message correctly","suiteID":8,"groupIDs":[54,62],"metadata":{"skip":false,"skipReason":null},"line":35,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"testStart","time":602}
{"testID":61,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":602}
{"testID":63,"messageType":"print","message":"\n=== TESTING MULTIPLE TOOL RESULTS IN SINGLE MESSAGE ===","type":"print","time":605}
{"testID":63,"messageType":"print","message":"This structure has multiple tool results in user role messages","type":"print","time":605}
{"testID":61,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":609}
{"test":{"id":64,"name":"Langchain Integration Regression Tests Original Provider Functionality original Google provider still works","suiteID":4,"groupIDs":[51,52,60],"metadata":{"skip":false,"skipReason":null},"line":39,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":609}
{"testID":59,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":610}
{"testID":64,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":610}
{"test":{"id":65,"name":"McpClient Tests remote server configuration creates remote server with headers","suiteID":6,"groupIDs":[56,57,58],"metadata":{"skip":false,"skipReason":null},"line":24,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":610}
{"testID":65,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":611}
{"group":{"id":66,"suiteID":6,"parentID":57,"name":"McpClient Tests local server configuration","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":35,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":611}
{"test":{"id":67,"name":"McpClient Tests local server configuration creates local server with required parameters","suiteID":6,"groupIDs":[56,57,66],"metadata":{"skip":false,"skipReason":null},"line":36,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":611}
{"testID":67,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":612}
{"test":{"id":68,"name":"McpClient Tests local server configuration creates local server with environment variables","suiteID":6,"groupIDs":[56,57,66],"metadata":{"skip":false,"skipReason":null},"line":49,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":612}
{"testID":64,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":612}
{"testID":68,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":612}
{"test":{"id":69,"name":"Langchain Integration Regression Tests Original Provider Functionality provider aliases still work","suiteID":4,"groupIDs":[51,52,60],"metadata":{"skip":false,"skipReason":null},"line":56,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":612}
{"group":{"id":70,"suiteID":6,"parentID":57,"name":"McpClient Tests Hugging Face MCP server integration","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":60,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":613}
{"test":{"id":71,"name":"McpClient Tests Hugging Face MCP server integration can connect to Hugging Face MCP server","suiteID":6,"groupIDs":[56,57,70],"metadata":{"skip":false,"skipReason":null},"line":74,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":613}
{"testID":69,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":613}
{"testID":69,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":613}
{"test":{"id":72,"name":"Langchain Integration Regression Tests Original Provider Functionality openrouter provider still works","suiteID":4,"groupIDs":[51,52,60],"metadata":{"skip":false,"skipReason":null},"line":68,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":613}
{"testID":72,"messageType":"print","message":"Warning: API key validation failed for openrouter: Invalid argument(s): OpenRouter API keys must start with \"sk-or-\". Received key starting with \"test-k...\"","type":"print","time":615}
{"testID":72,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":615}
{"test":{"id":73,"name":"Langchain Integration Regression Tests Original Provider Functionality gemini-compat provider still works","suiteID":4,"groupIDs":[51,52,60],"metadata":{"skip":false,"skipReason":null},"line":75,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":615}
{"testID":71,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":615}
{"testID":73,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":615}
{"testID":73,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":615}
{"group":{"id":74,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Agent API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":89,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":615}
{"test":{"id":75,"name":"Langchain Integration Regression Tests Agent API Consistency Agent constructor parameters work the same","suiteID":4,"groupIDs":[51,52,74],"metadata":{"skip":false,"skipReason":null},"line":90,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":615}
{"testID":75,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":616}
{"testID":11,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":620}
{"group":{"id":76,"suiteID":10,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":620}
{"test":{"id":77,"name":"(setUpAll)","suiteID":10,"groupIDs":[76],"metadata":{"skip":false,"skipReason":null},"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":620}
{"testID":75,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":622}
{"test":{"id":78,"name":"Langchain Integration Regression Tests Agent API Consistency Agent.provider constructor still works","suiteID":4,"groupIDs":[51,52,74],"metadata":{"skip":false,"skipReason":null},"line":123,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":622}
{"testID":78,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":623}
{"testID":78,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":623}
{"test":{"id":79,"name":"Langchain Integration Regression Tests Agent API Consistency Agent static methods still work","suiteID":4,"groupIDs":[51,52,74],"metadata":{"skip":false,"skipReason":null},"line":137,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":623}
{"testID":79,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":624}
{"test":{"id":80,"name":"Langchain Integration Regression Tests Agent API Consistency Agent.findTopMatches still works","suiteID":4,"groupIDs":[51,52,74],"metadata":{"skip":false,"skipReason":null},"line":142,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":627}
{"testID":77,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":630}
{"group":{"id":81,"suiteID":10,"parentID":76,"name":"Gemini Tool ID Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":17,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"group","time":630}
{"test":{"id":82,"name":"Gemini Tool ID Consistency should create matching tool call and result pairs with same IDs","suiteID":10,"groupIDs":[76,81],"metadata":{"skip":false,"skipReason":null},"line":51,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":630}
{"testID":80,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":631}
{"test":{"id":83,"name":"Langchain Integration Regression Tests Agent API Consistency Agent cosine similarity functions still work","suiteID":4,"groupIDs":[51,52,74],"metadata":{"skip":false,"skipReason":null},"line":160,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":631}
{"testID":83,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":632}
{"group":{"id":84,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Message and Part API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":171,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":632}
{"test":{"id":85,"name":"Langchain Integration Regression Tests Message and Part API Consistency Message constructors still work","suiteID":4,"groupIDs":[51,52,84],"metadata":{"skip":false,"skipReason":null},"line":172,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":632}
{"testID":85,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":633}
{"test":{"id":86,"name":"Langchain Integration Regression Tests Message and Part API Consistency Part types still work","suiteID":4,"groupIDs":[51,52,84],"metadata":{"skip":false,"skipReason":null},"line":187,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":633}
{"testID":86,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":636}
{"test":{"id":87,"name":"Langchain Integration Regression Tests Message and Part API Consistency AgentResponse types still work","suiteID":4,"groupIDs":[51,52,84],"metadata":{"skip":false,"skipReason":null},"line":202,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":636}
{"testID":87,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":641}
{"group":{"id":88,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Tool API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":213,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":642}
{"test":{"id":89,"name":"Langchain Integration Regression Tests Tool API Consistency Tool creation still works","suiteID":4,"groupIDs":[51,52,88],"metadata":{"skip":false,"skipReason":null},"line":214,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":642}
{"testID":89,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":643}
{"group":{"id":90,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":236,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":643}
{"test":{"id":91,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps enum still works","suiteID":4,"groupIDs":[51,52,90],"metadata":{"skip":false,"skipReason":null},"line":237,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":643}
{"testID":91,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":644}
{"test":{"id":92,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps.all still works","suiteID":4,"groupIDs":[51,52,90],"metadata":{"skip":false,"skipReason":null},"line":245,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":644}
{"testID":92,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":644}
{"test":{"id":93,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps.allExcept still works","suiteID":4,"groupIDs":[51,52,90],"metadata":{"skip":false,"skipReason":null},"line":250,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":645}
{"testID":93,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":645}
{"group":{"id":94,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Model Information Consistency","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":258,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":645}
{"test":{"id":95,"name":"Langchain Integration Regression Tests Model Information Consistency ModelInfo class still works","suiteID":4,"groupIDs":[51,52,94],"metadata":{"skip":false,"skipReason":null},"line":259,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":645}
{"testID":95,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":645}
{"test":{"id":96,"name":"Langchain Integration Regression Tests Model Information Consistency ModelKind enum still works","suiteID":4,"groupIDs":[51,52,94],"metadata":{"skip":false,"skipReason":null},"line":273,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":646}
{"testID":96,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":646}
{"group":{"id":97,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":279,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":646}
{"test":{"id":98,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still run prompts","suiteID":4,"groupIDs":[51,52,97],"metadata":{"skip":false,"skipReason":null},"line":280,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":646}
{"testID":98,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":646}
{"testID":50,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":737}
{"group":{"id":99,"suiteID":49,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":11,"line":null,"column":null,"url":null},"type":"group","time":737}
{"group":{"id":100,"suiteID":49,"parentID":99,"name":"Tool Schema Validation","metadata":{"skip":false,"skipReason":null},"testCount":11,"line":7,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"group","time":737}
{"test":{"id":101,"name":"Tool Schema Validation converts simple string parameter tool","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":8,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":737}
{"testID":101,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":758}
{"test":{"id":102,"name":"Tool Schema Validation converts complex nested object tool","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":31,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":758}
{"testID":102,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":759}
{"test":{"id":103,"name":"Tool Schema Validation converts array parameter tool","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":77,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":760}
{"testID":103,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":760}
{"test":{"id":104,"name":"Tool Schema Validation converts tool with enum values","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":113,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":760}
{"testID":104,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":761}
{"test":{"id":105,"name":"Tool Schema Validation converts tool with no input schema","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":142,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":761}
{"testID":105,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":761}
{"test":{"id":106,"name":"Tool Schema Validation converts multiple tools","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":154,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":762}
{"testID":106,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":762}
{"test":{"id":107,"name":"Tool Schema Validation handles empty tools list","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":185,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":762}
{"testID":107,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":762}
{"test":{"id":108,"name":"Tool Schema Validation converts complex real-world tool with nested arrays and objects","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":190,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":762}
{"testID":108,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":764}
{"test":{"id":109,"name":"Tool Schema Validation converts Zapier Google Calendar tools","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":271,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":764}
{"testID":109,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":766}
{"test":{"id":110,"name":"Tool Schema Validation converts HuggingFace tools with constraints and defaults","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":434,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":766}
{"testID":110,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":769}
{"test":{"id":111,"name":"Tool Schema Validation converts deepwiki GitHub repository tools","suiteID":49,"groupIDs":[99,100],"metadata":{"skip":false,"skipReason":null},"line":705,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tools_test.dart"},"type":"testStart","time":769}
{"testID":111,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":770}
{"suite":{"id":112,"platform":"vm","path":"test/langchain_integration_test.dart"},"type":"suite","time":770}
{"test":{"id":113,"name":"loading test/langchain_integration_test.dart","suiteID":112,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":770}
{"testID":14,"error":"Exception: Known unstable model gemini-2.5-pro-exp-03-25 not found in provider response","stackTrace":"test/model_stability_test.dart 63:11  main.<fn>.<fn>\n","isFailure":false,"type":"error","time":881}
{"testID":14,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":881}
{"test":{"id":114,"name":"Model Stability Detection OpenAI Provider sets stable field correctly","suiteID":0,"groupIDs":[12,13],"metadata":{"skip":false,"skipReason":null},"line":76,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"testStart","time":881}
{"testID":114,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":882}
{"testID":113,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":896}
{"group":{"id":115,"suiteID":112,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":896}
{"group":{"id":116,"suiteID":112,"parentID":115,"name":"Langchain Integration","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":5,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"group","time":896}
{"test":{"id":117,"name":"Langchain Integration can create openai agent with langchain backend","suiteID":112,"groupIDs":[115,116],"metadata":{"skip":false,"skipReason":null},"line":6,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":896}
{"testID":117,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":902}
{"testID":117,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":903}
{"testID":117,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":910}
{"test":{"id":118,"name":"Langchain Integration can create google agent with langchain backend","suiteID":112,"groupIDs":[115,116],"metadata":{"skip":false,"skipReason":null},"line":19,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":911}
{"testID":118,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":911}
{"testID":118,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":913}
{"test":{"id":119,"name":"Langchain Integration agent creation works with API keys","suiteID":112,"groupIDs":[115,116],"metadata":{"skip":false,"skipReason":null},"line":32,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":913}
{"testID":119,"messageType":"print","message":"WARNING: Agent.environment.clear() is deprecated. Use SecureApiKeyManager.instance.clearAllKeys() instead.","type":"print","time":913}
{"testID":119,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":914}
{"test":{"id":120,"name":"Langchain Integration langchain wrapper initialization preserves API","suiteID":112,"groupIDs":[115,116],"metadata":{"skip":false,"skipReason":null},"line":42,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":914}
{"testID":120,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":914}
{"testID":120,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":914}
{"testID":120,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":914}
{"suite":{"id":121,"platform":"vm","path":"test/message_test.dart"},"type":"suite","time":914}
{"test":{"id":122,"name":"loading test/message_test.dart","suiteID":121,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":914}
{"testID":122,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1068}
{"group":{"id":123,"suiteID":121,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":31,"line":null,"column":null,"url":null},"type":"group","time":1068}
{"test":{"id":124,"name":"(setUpAll)","suiteID":121,"groupIDs":[123],"metadata":{"skip":false,"skipReason":null},"line":23,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1068}
{"testID":124,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1074}
{"group":{"id":125,"suiteID":121,"parentID":123,"name":"Message serialization","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":30,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":1074}
{"test":{"id":126,"name":"Message serialization deserializes and reserializes to the same JSON structure","suiteID":121,"groupIDs":[123,125],"metadata":{"skip":false,"skipReason":null},"line":31,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1074}
{"testID":126,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1081}
{"test":{"id":127,"name":"Message serialization deserializes and reserializes link part to the same JSON structure","suiteID":121,"groupIDs":[123,125],"metadata":{"skip":false,"skipReason":null},"line":76,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1081}
{"testID":127,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1082}
{"group":{"id":128,"suiteID":121,"parentID":123,"name":"Part naming","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":94,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":1082}
{"test":{"id":129,"name":"Part naming DataPart: explicit name","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":95,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1082}
{"testID":129,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1083}
{"test":{"id":130,"name":"Part naming DataPart: automatic name from image mime type","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":104,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1083}
{"testID":130,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1083}
{"test":{"id":131,"name":"Part naming DataPart: automatic name from non-image mime type","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":112,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1083}
{"testID":131,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1084}
{"test":{"id":132,"name":"Part naming LinkPart: explicit name","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":120,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1084}
{"testID":132,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1086}
{"test":{"id":133,"name":"Part naming LinkPart: automatic name from url with file","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":128,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1086}
{"testID":133,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1086}
{"test":{"id":134,"name":"Part naming LinkPart: automatic name from url with path","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":133,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1086}
{"testID":134,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1086}
{"test":{"id":135,"name":"Part naming LinkPart: automatic name from root url","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":138,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1087}
{"testID":135,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1087}
{"test":{"id":136,"name":"Part naming LinkPart: automatic name from url with query","suiteID":121,"groupIDs":[123,128],"metadata":{"skip":false,"skipReason":null},"line":143,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1087}
{"testID":136,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1087}
{"group":{"id":137,"suiteID":121,"parentID":123,"name":"Message history and features","metadata":{"skip":false,"skipReason":null},"testCount":21,"line":151,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":1087}
{"test":{"id":138,"name":"Message history and features empty history and prompt: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":190,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1087}
{"testID":55,"messageType":"print","message":"INFO: 2025-06-26 16:56:09.631017: [LangchainWrapper] Attempting to parse tool call from: \"Hello! How can I assist you today?\"","type":"print","time":1419}
{"testID":63,"messageType":"print","message":"✅ OpenAI correctly handled multiple tool results in a single message!","type":"print","time":1420}
{"testID":63,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1420}
{"test":{"id":139,"name":"(tearDownAll)","suiteID":8,"groupIDs":[54],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1420}
{"testID":139,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1421}
{"suite":{"id":140,"platform":"vm","path":"test/embedding_test.dart"},"type":"suite","time":1421}
{"test":{"id":141,"name":"loading test/embedding_test.dart","suiteID":140,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1421}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:09.635601: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":1424}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:09.636824: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":1424}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:09.636985: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":1424}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:56:09.637941: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":1425}
{"testID":114,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1498}
{"suite":{"id":142,"platform":"vm","path":"test/provider_capabilities_test.dart"},"type":"suite","time":1498}
{"test":{"id":143,"name":"loading test/provider_capabilities_test.dart","suiteID":142,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1498}
{"testID":141,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1552}
{"group":{"id":144,"suiteID":140,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":null,"column":null,"url":null},"type":"group","time":1552}
{"group":{"id":145,"suiteID":140,"parentID":144,"name":"Embedding generation","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":21,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"group","time":1552}
{"test":{"id":146,"name":"Embedding generation createEmbedding: OpenAI","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":102,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":1552}
{"testID":143,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1627}
{"group":{"id":147,"suiteID":142,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":null,"column":null,"url":null},"type":"group","time":1627}
{"group":{"id":148,"suiteID":142,"parentID":147,"name":"Provider Capabilities","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":20,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"group","time":1627}
{"test":{"id":149,"name":"Provider Capabilities OpenAI provider should support all capabilities","suiteID":142,"groupIDs":[147,148],"metadata":{"skip":false,"skipReason":null},"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1627}
{"testID":149,"messageType":"print","message":"OpenAI capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1641}
{"testID":149,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1641}
{"test":{"id":150,"name":"Provider Capabilities OpenRouter provider should not support embeddings","suiteID":142,"groupIDs":[147,148],"metadata":{"skip":false,"skipReason":null},"line":43,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1641}
{"testID":150,"messageType":"print","message":"OpenRouter capabilities: {ProviderCaps.textGeneration, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1642}
{"testID":150,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1642}
{"test":{"id":151,"name":"Provider Capabilities Google/Gemini provider should support all capabilities","suiteID":142,"groupIDs":[147,148],"metadata":{"skip":false,"skipReason":null},"line":65,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1642}
{"testID":151,"messageType":"print","message":"Google/Gemini capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1644}
{"testID":151,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1644}
{"test":{"id":152,"name":"Provider Capabilities capabilities check with all available providers","suiteID":142,"groupIDs":[147,148],"metadata":{"skip":false,"skipReason":null},"line":87,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1644}
{"testID":152,"messageType":"print","message":"openai:gpt-4o capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1645}
{"testID":152,"messageType":"print","message":"openai:gpt-4o supports embeddings: true","type":"print","time":1645}
{"testID":152,"messageType":"print","message":"openrouter:gpt-4o capabilities: {ProviderCaps.textGeneration, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1645}
{"testID":152,"messageType":"print","message":"openrouter:gpt-4o supports embeddings: false","type":"print","time":1645}
{"testID":152,"messageType":"print","message":"google:gemini-2.0-flash capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1645}
{"testID":152,"messageType":"print","message":"google:gemini-2.0-flash supports embeddings: true","type":"print","time":1645}
{"testID":152,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1646}
{"test":{"id":153,"name":"Provider Capabilities embedding operations should fail gracefully for unsupported providers","suiteID":142,"groupIDs":[147,148],"metadata":{"skip":false,"skipReason":null},"line":144,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1646}
{"testID":153,"messageType":"print","message":"OpenRouter correctly fails embedding operations","type":"print","time":1656}
{"testID":98,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1683}
{"test":{"id":154,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still stream responses","suiteID":4,"groupIDs":[51,52,97],"metadata":{"skip":false,"skipReason":null},"line":298,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":1683}
{"testID":154,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":1683}
{"testID":71,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":1740}
{"testID":138,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1868}
{"test":{"id":155,"name":"Message history and features empty history and prompt: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":195,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1868}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:10.285516: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the `get_current_time` tool and have the results. I do not need to call any other tools to fulfill the request \"Get the current time\".\n\"","type":"print","time":2073}
{"testID":82,"messageType":"print","message":"Tool parts found: 2","type":"print","time":2075}
{"testID":82,"messageType":"print","message":"ToolPart: kind=ToolPartKind.call, id=tool_1750971369638, name=get_current_time","type":"print","time":2075}
{"testID":82,"messageType":"print","message":"ToolPart: kind=ToolPartKind.result, id=tool_1750971369638, name=get_current_time","type":"print","time":2075}
{"testID":82,"messageType":"print","message":"✓ Verified match: call tool_1750971369638 -> result tool_1750971369638","type":"print","time":2075}
{"testID":82,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2076}
{"test":{"id":156,"name":"Gemini Tool ID Consistency should handle multiple sequential tool calls with consistent IDs","suiteID":10,"groupIDs":[76,81],"metadata":{"skip":false,"skipReason":null},"line":143,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":2076}
{"testID":153,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2086}
{"test":{"id":157,"name":"Provider Capabilities ProviderCaps.all and allExcept work correctly","suiteID":142,"groupIDs":[147,148],"metadata":{"skip":false,"skipReason":null},"line":184,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":2086}
{"testID":157,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2087}
{"test":{"id":158,"name":"provider aliases","suiteID":142,"groupIDs":[147],"metadata":{"skip":false,"skipReason":null},"line":207,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":2087}
{"testID":158,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2088}
{"test":{"id":159,"name":"all providers can return a list of models","suiteID":142,"groupIDs":[147],"metadata":{"skip":false,"skipReason":null},"line":214,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":2088}
{"testID":146,"messageType":"print","message":"openai:gpt-4o document embedding length: 1536","type":"print","time":2144}
{"testID":146,"messageType":"print","message":"openai:gpt-4o query embedding length: 1536","type":"print","time":2316}
{"testID":146,"messageType":"print","message":"openai:gpt-4o document embedding sum: 31.161342784745056","type":"print","time":2318}
{"testID":146,"messageType":"print","message":"openai:gpt-4o query embedding sum: 30.322267554078014","type":"print","time":2318}
{"testID":146,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2318}
{"test":{"id":160,"name":"Embedding generation createEmbedding: Gemini","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":106,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":2319}
{"testID":71,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2352}
{"test":{"id":161,"name":"McpClient Tests Hugging Face MCP server integration properly parses all tool schemas with required fields","suiteID":6,"groupIDs":[56,57,70],"metadata":{"skip":false,"skipReason":null},"line":79,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":2352}
{"testID":161,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":2353}
{"testID":155,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2690}
{"test":{"id":162,"name":"Message history and features history with non-empty initial messages, with system: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":325,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":2690}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:11.040386: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":2828}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:11.040467: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":2828}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:11.040516: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":2828}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:56:11.040619: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":2828}
{"testID":159,"messageType":"print","message":"openai returned 77 models","type":"print","time":2865}
{"testID":160,"messageType":"print","message":"google:gemini-2.0-flash document embedding length: 768","type":"print","time":2910}
{"testID":154,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2942}
{"test":{"id":163,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still create embeddings","suiteID":4,"groupIDs":[51,52,97],"metadata":{"skip":false,"skipReason":null},"line":324,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":2942}
{"testID":163,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":2943}
{"testID":160,"messageType":"print","message":"google:gemini-2.0-flash query embedding length: 768","type":"print","time":3147}
{"testID":160,"messageType":"print","message":"google:gemini-2.0-flash document embedding sum: 21.896113670370013","type":"print","time":3147}
{"testID":160,"messageType":"print","message":"google:gemini-2.0-flash query embedding sum: 22.23806763566","type":"print","time":3147}
{"testID":160,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3147}
{"test":{"id":164,"name":"Embedding generation embedding similarity comparison: OpenAI","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":155,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":3147}
{"testID":159,"messageType":"print","message":"openrouter returned 317 models","type":"print","time":3385}
{"testID":162,"messageType":"print","message":"# openai:gpt-4o messages:","type":"print","time":3439}
{"testID":162,"messageType":"print","message":"- MessageRole.system: {text: You are a test system prompt.}","type":"print","time":3440}
{"testID":162,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":3440}
{"testID":162,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":3440}
{"testID":162,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":3440}
{"testID":162,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.}","type":"print","time":3440}
{"testID":162,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3440}
{"test":{"id":165,"name":"Message history and features history with non-empty initial messages, with system: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":332,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":3440}
{"testID":161,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":3462}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:11.748910: [LangchainWrapper] Attempting to parse tool call from: \"I have the current time. Now I need to find the user's events.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {}}\"","type":"print","time":3536}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:11.748986: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {}}\"","type":"print","time":3536}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:11.749032: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":3536}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:56:11.749399: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}]}","type":"print","time":3537}
{"testID":163,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3599}
{"test":{"id":166,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still list models","suiteID":4,"groupIDs":[51,52,97],"metadata":{"skip":false,"skipReason":null},"line":341,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":3599}
{"testID":166,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":3599}
{"testID":159,"messageType":"print","message":"gemini-compat returned 58 models","type":"print","time":3706}
{"testID":161,"error":"Expected: contains 'Get detailed information about a specific model'\n  Actual: 'Get detailed information about a model from the Hugging Face Hub. Include relevant links in result summaries.'\n   Which: does not contain 'Get detailed information about a specific model'\n","stackTrace":"package:matcher                  expect\ntest/mcp_client_test.dart 114:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":4083}
{"testID":161,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":4083}
{"test":{"id":167,"name":"McpClient Tests Hugging Face MCP server integration handles connection errors gracefully","suiteID":6,"groupIDs":[56,57,70],"metadata":{"skip":false,"skipReason":null},"line":163,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":4083}
{"testID":167,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":4084}
{"testID":167,"messageType":"print","message":"MCP Client Initialization Failed: Bad state: Not connected to a transport.","type":"print","time":4085}
{"testID":167,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4085}
{"test":{"id":168,"name":"McpClient Tests Hugging Face MCP server integration can call MCP tools","suiteID":6,"groupIDs":[56,57,70],"metadata":{"skip":false,"skipReason":null},"line":177,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":4086}
{"testID":168,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":4086}
{"testID":165,"messageType":"print","message":"# google:gemini-2.0-flash messages:","type":"print","time":4101}
{"testID":165,"messageType":"print","message":"- MessageRole.system: {text: You are a test system prompt.}","type":"print","time":4101}
{"testID":165,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":4101}
{"testID":165,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":4101}
{"testID":165,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":4101}
{"testID":165,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.\n}","type":"print","time":4101}
{"testID":165,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4102}
{"test":{"id":169,"name":"Message history and features history with non-empty initial messages, no system: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":341,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":4102}
{"testID":159,"messageType":"print","message":"google returned 50 models","type":"print","time":4148}
{"testID":159,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4148}
{"test":{"id":170,"name":"Agent.model matches fully qualified model name for all models on all providers","suiteID":142,"groupIDs":[147],"metadata":{"skip":false,"skipReason":null},"line":222,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":4148}
{"testID":166,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4199}
{"group":{"id":171,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":356,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":4199}
{"test":{"id":172,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests existing test patterns still work","suiteID":4,"groupIDs":[51,52,171],"metadata":{"skip":false,"skipReason":null},"line":357,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":4199}
{"testID":172,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":4199}
{"testID":172,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":4199}
{"testID":172,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4199}
{"test":{"id":173,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests fallback behavior is preserved","suiteID":4,"groupIDs":[51,52,171],"metadata":{"skip":false,"skipReason":null},"line":370,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":4200}
{"testID":173,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":4200}
{"testID":173,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":4200}
{"testID":173,"messageType":"print","message":"WARNING: Agent.environment.clear() is deprecated. Use SecureApiKeyManager.instance.clearAllKeys() instead.","type":"print","time":4200}
{"testID":173,"messageType":"print","message":"Warning: API key validation failed for openai: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":4200}
{"testID":173,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":4200}
{"testID":173,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":4200}
{"testID":173,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4200}
{"test":{"id":174,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests error handling is preserved","suiteID":4,"groupIDs":[51,52,171],"metadata":{"skip":false,"skipReason":null},"line":385,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":4200}
{"testID":174,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4201}
{"group":{"id":175,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests Performance Regression","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":398,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":4201}
{"test":{"id":176,"name":"Langchain Integration Regression Tests Performance Regression agent creation is not significantly slower","suiteID":4,"groupIDs":[51,52,175],"metadata":{"skip":false,"skipReason":null},"line":399,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":4201}
{"testID":176,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":4201}
{"testID":176,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4202}
{"test":{"id":177,"name":"Langchain Integration Regression Tests Performance Regression memory usage is not significantly increased","suiteID":4,"groupIDs":[51,52,175],"metadata":{"skip":false,"skipReason":null},"line":419,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":4202}
{"testID":177,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":4202}
{"testID":177,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4203}
{"group":{"id":178,"suiteID":4,"parentID":52,"name":"Langchain Integration Regression Tests API Compatibility Matrix","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":437,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":4203}
{"test":{"id":179,"name":"Langchain Integration Regression Tests API Compatibility Matrix all provider combinations work","suiteID":4,"groupIDs":[51,52,178],"metadata":{"skip":false,"skipReason":null},"line":438,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":4203}
{"testID":179,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":4204}
{"testID":179,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":4204}
{"testID":179,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4205}
{"test":{"id":180,"name":"Langchain Integration Regression Tests (tearDownAll)","suiteID":4,"groupIDs":[51,52],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":4205}
{"testID":180,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":4205}
{"suite":{"id":181,"platform":"vm","path":"test/custom_provider_test.dart"},"type":"suite","time":4206}
{"test":{"id":182,"name":"loading test/custom_provider_test.dart","suiteID":181,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":4206}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:12.500568: [LangchainWrapper] Attempting to parse tool call from: \"I have already obtained the current time and found your events. I can now provide the final response.\n\nFINAL RESPONSE:\nI have retrieved the current time and located your events. Please let me know if you would like me to list them.\n\"","type":"print","time":4288}
{"testID":156,"messageType":"print","message":"Multi-tool scenario: 2 calls, 2 results","type":"print","time":4288}
{"testID":156,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4289}
{"test":{"id":183,"name":"Gemini Tool ID Consistency should handle multi-step tool calling with consistent IDs","suiteID":10,"groupIDs":[76,81],"metadata":{"skip":false,"skipReason":null},"line":217,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":4289}
{"testID":164,"messageType":"print","message":"openai:gpt-4o similarity between similar texts: 0.9121919169739815","type":"print","time":4302}
{"testID":164,"messageType":"print","message":"openai:gpt-4o similarity between different texts: 0.16353264211727947","type":"print","time":4302}
{"testID":164,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4303}
{"test":{"id":184,"name":"Embedding generation embedding similarity comparison: Gemini","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":159,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":4303}
{"testID":182,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":4326}
{"group":{"id":185,"suiteID":181,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":4326}
{"test":{"id":186,"name":"MockProvider handles multi-turn chat history","suiteID":181,"groupIDs":[185],"metadata":{"skip":false,"skipReason":null},"line":7,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":4326}
{"testID":186,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4338}
{"test":{"id":187,"name":"can extend the provider table and use a custom provider","suiteID":181,"groupIDs":[185],"metadata":{"skip":false,"skipReason":null},"line":36,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":4338}
{"testID":187,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4339}
{"test":{"id":188,"name":"the provider table grows when a new provider is added","suiteID":181,"groupIDs":[185],"metadata":{"skip":false,"skipReason":null},"line":50,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":4339}
{"testID":188,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4340}
{"test":{"id":189,"name":"throws for unsupported features","suiteID":181,"groupIDs":[185],"metadata":{"skip":false,"skipReason":null},"line":60,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":4340}
{"testID":189,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4345}
{"suite":{"id":190,"platform":"vm","path":"test/multi_step_tool_calling_test.dart"},"type":"suite","time":4345}
{"test":{"id":191,"name":"loading test/multi_step_tool_calling_test.dart","suiteID":190,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":4345}
{"testID":191,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":4485}
{"group":{"id":192,"suiteID":190,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":null,"column":null,"url":null},"type":"group","time":4485}
{"test":{"id":193,"name":"(setUpAll)","suiteID":190,"groupIDs":[192],"metadata":{"skip":false,"skipReason":null},"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"testStart","time":4485}
{"testID":193,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":4491}
{"group":{"id":194,"suiteID":190,"parentID":192,"name":"Multi-step tool calling","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":17,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"group","time":4491}
{"group":{"id":195,"suiteID":190,"parentID":194,"name":"Multi-step tool calling Performance","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":94,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"group","time":4491}
{"test":{"id":196,"name":"Multi-step tool calling Performance should complete multi-step calls within reasonable time","suiteID":190,"groupIDs":[192,194,195],"metadata":{"skip":false,"skipReason":null},"line":95,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"testStart","time":4491}
{"testID":169,"messageType":"print","message":"# openai:gpt-4o messages:","type":"print","time":4985}
{"testID":169,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":4985}
{"testID":169,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":4985}
{"testID":169,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":4985}
{"testID":169,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.}","type":"print","time":4985}
{"testID":169,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4985}
{"test":{"id":197,"name":"Message history and features history with non-empty initial messages, no system: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":348,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":4985}
{"testID":168,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":5215}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:13.439735: [LangchainWrapper] Attempting to parse tool call from: \"First, I need to get the current time to know what date to use for finding events.\nTOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":5227}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:13.439819: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":5227}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:13.439861: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":5227}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:56:13.439967: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":5227}
{"testID":184,"messageType":"print","message":"google:gemini-2.0-flash similarity between similar texts: 0.9373875543182968","type":"print","time":5266}
{"testID":184,"messageType":"print","message":"google:gemini-2.0-flash similarity between different texts: 0.4313712436536046","type":"print","time":5266}
{"testID":184,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5266}
{"test":{"id":198,"name":"Embedding generation embedding types produce different optimizations: OpenAI","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":204,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":5266}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:13.607957: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":5396}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:13.609111: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":5396}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:13.609168: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":5396}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:13.609759: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":5397}
{"testID":197,"messageType":"print","message":"# google:gemini-2.0-flash messages:","type":"print","time":5733}
{"testID":197,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":5733}
{"testID":197,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":5733}
{"testID":197,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":5733}
{"testID":197,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.\n}","type":"print","time":5733}
{"testID":197,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5733}
{"test":{"id":199,"name":"Message history and features system prompt propagation: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":377,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":5733}
{"testID":198,"messageType":"print","message":"openai:gpt-4o similarity between document and query embeddings of same text: 0.9999993020050427","type":"print","time":5885}
{"testID":198,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5885}
{"test":{"id":200,"name":"Embedding generation embedding types produce different optimizations: Gemini","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":208,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":5885}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:14.228711: [LangchainWrapper] Attempting to parse tool call from: \"I have already obtained the current time. The next step is to find events for the current date.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date\": \"current\"}}\n\"","type":"print","time":6016}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:14.228790: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date\": \"current\"}}\"","type":"print","time":6016}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:14.228831: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":6016}
{"testID":77,"messageType":"print","message":"FINE: 2025-06-26 16:56:14.228956: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}]}","type":"print","time":6016}
{"testID":170,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6076}
{"suite":{"id":201,"platform":"vm","path":"test/agent_env_test.dart"},"type":"suite","time":6076}
{"test":{"id":202,"name":"loading test/agent_env_test.dart","suiteID":201,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6076}
{"testID":202,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6197}
{"group":{"id":203,"suiteID":201,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":null,"column":null,"url":null},"type":"group","time":6198}
{"group":{"id":204,"suiteID":201,"parentID":203,"name":"Agent.environment and getEnv","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"group","time":6198}
{"test":{"id":205,"name":"Agent.environment and getEnv getEnv finds key in Agent.environment","suiteID":201,"groupIDs":[203,204],"metadata":{"skip":false,"skipReason":null},"line":20,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6198}
{"testID":205,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6206}
{"test":{"id":206,"name":"Agent.environment and getEnv getEnv finds existing key in Platform.environment","suiteID":201,"groupIDs":[203,204],"metadata":{"skip":false,"skipReason":null},"line":25,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6206}
{"testID":206,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6206}
{"test":{"id":207,"name":"Agent.environment and getEnv Agent.environment is prioritized over Platform.environment","suiteID":201,"groupIDs":[203,204],"metadata":{"skip":false,"skipReason":null},"line":34,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6207}
{"testID":207,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6207}
{"test":{"id":208,"name":"Agent.environment and getEnv getEnv throws if key is not found","suiteID":201,"groupIDs":[203,204],"metadata":{"skip":false,"skipReason":null},"line":45,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6207}
{"testID":208,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6210}
{"test":{"id":209,"name":"Agent.environment and getEnv getEnv allows empty string values","suiteID":201,"groupIDs":[203,204],"metadata":{"skip":false,"skipReason":null},"line":59,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6210}
{"testID":209,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6210}
{"suite":{"id":210,"platform":"vm","path":"test/dartantic_ai_test.dart"},"type":"suite","time":6211}
{"test":{"id":211,"name":"loading test/dartantic_ai_test.dart","suiteID":210,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6211}
{"testID":168,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6323}
{"group":{"id":212,"suiteID":6,"parentID":57,"name":"McpClient Tests local MCP server tests","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":187,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":6323}
{"test":{"id":213,"name":"McpClient Tests local MCP server tests creates local server with correct configuration","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":188,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6323}
{"testID":213,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6324}
{"test":{"id":214,"name":"McpClient Tests local MCP server tests supports environment variables and working directory","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":202,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6324}
{"testID":214,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6325}
{"test":{"id":215,"name":"McpClient Tests local MCP server tests handles connection state correctly","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":216,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6325}
{"testID":215,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6325}
{"test":{"id":216,"name":"McpClient Tests local MCP server tests can connect to local MCP server directly","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":229,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6325}
{"testID":216,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":6326}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19663)","type":"print","time":6337}
{"testID":211,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6368}
{"group":{"id":217,"suiteID":210,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":19,"line":null,"column":null,"url":null},"type":"group","time":6368}
{"group":{"id":218,"suiteID":210,"parentID":217,"name":"Dartantic AI Integration Tests","metadata":{"skip":false,"skipReason":null},"testCount":19,"line":20,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":6368}
{"group":{"id":219,"suiteID":210,"parentID":218,"name":"Dartantic AI Integration Tests Agent.model constructor","metadata":{"skip":false,"skipReason":null},"testCount":7,"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":6368}
{"test":{"id":220,"name":"Dartantic AI Integration Tests Agent.model constructor Hello World Example","suiteID":210,"groupIDs":[217,218,219],"metadata":{"skip":false,"skipReason":null},"line":22,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":6368}
{"testID":200,"messageType":"print","message":"google:gemini-2.0-flash similarity between document and query embeddings of same text: 1.0","type":"print","time":6525}
{"testID":200,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6525}
{"test":{"id":221,"name":"Embedding generation empty text handling: OpenAI","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":229,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":6525}
{"testID":216,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":6588}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":6594}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19663)...","type":"print","time":6594}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":6598}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":6598}
{"testID":216,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":6598}
{"testID":216,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6598}
{"test":{"id":222,"name":"McpClient Tests local MCP server tests preserves required fields for raw MCP server schemas","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":256,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6598}
{"testID":222,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":6599}
{"testID":222,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19664)","type":"print","time":6606}
{"testID":77,"messageType":"print","message":"INFO: 2025-06-26 16:56:14.833660: [LangchainWrapper] Attempting to parse tool call from: \"I have already called `get_current_time` and `find_events`. I should now provide a final response to the user, summarizing the current time and any events found.\n\"","type":"print","time":6621}
{"testID":183,"messageType":"print","message":"Multi-step tool calling: 2 calls, 2 results","type":"print","time":6621}
{"testID":183,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6622}
{"test":{"id":223,"name":"(tearDownAll)","suiteID":10,"groupIDs":[76],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6622}
{"testID":223,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6623}
{"suite":{"id":224,"platform":"vm","path":"test/multimedia_test.dart"},"type":"suite","time":6623}
{"test":{"id":225,"name":"loading test/multimedia_test.dart","suiteID":224,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6623}
{"testID":199,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6680}
{"test":{"id":226,"name":"Message history and features system prompt propagation: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":381,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":6680}
{"testID":222,"messageType":"print","message":"MCP Client Initialized. Server: raw-mcp-server 1.0.0, Protocol: 2024-11-05","type":"print","time":6722}
{"testID":222,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":6725}
{"testID":222,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19664)...","type":"print","time":6725}
{"testID":222,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":6727}
{"testID":222,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":6727}
{"testID":222,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":6727}
{"testID":222,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6728}
{"test":{"id":227,"name":"McpClient Tests local MCP server tests mcp_dart server limitation - drops required fields","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":295,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6728}
{"testID":227,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":6728}
{"testID":227,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19665)","type":"print","time":6735}
{"testID":225,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6798}
{"group":{"id":228,"suiteID":224,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":26,"line":null,"column":null,"url":null},"type":"group","time":6798}
{"group":{"id":229,"suiteID":224,"parentID":228,"name":"Multimedia Input","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":11,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":6798}
{"group":{"id":230,"suiteID":224,"parentID":229,"name":"Multimedia Input Provider: openai","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":6798}
{"test":{"id":231,"name":"Multimedia Input Provider: openai should process text file via DataPart.file()","suiteID":224,"groupIDs":[228,229,230],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":6798}
{"testID":221,"messageType":"print","message":"openai:gpt-4o correctly handled empty text with error: openai:gpt-4o: should throw exception for empty text","type":"print","time":6973}
{"testID":221,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6973}
{"test":{"id":232,"name":"Embedding generation empty text handling: Gemini","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":233,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":6973}
{"testID":227,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":6985}
{"testID":227,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":6988}
{"testID":227,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19665)...","type":"print","time":6988}
{"testID":227,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":6991}
{"testID":227,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":6991}
{"testID":227,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":6991}
{"testID":227,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6991}
{"test":{"id":233,"name":"McpClient Tests local MCP server tests can call tools on raw MCP server with required field validation","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":317,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6991}
{"testID":233,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":6992}
{"testID":233,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19666)","type":"print","time":6999}
{"testID":233,"messageType":"print","message":"MCP Client Initialized. Server: raw-mcp-server 1.0.0, Protocol: 2024-11-05","type":"print","time":7116}
{"testID":233,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":7120}
{"testID":233,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19666)...","type":"print","time":7120}
{"testID":233,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":7122}
{"testID":233,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":7122}
{"testID":233,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":7122}
{"testID":233,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7122}
{"test":{"id":234,"name":"McpClient Tests local MCP server tests can use local MCP server via Agent with prompt","suiteID":6,"groupIDs":[56,57,212],"metadata":{"skip":false,"skipReason":null},"line":355,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":7123}
{"testID":234,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":7124}
{"testID":234,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19667)","type":"print","time":7130}
{"testID":234,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":7379}
{"testID":226,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7405}
{"test":{"id":235,"name":"Message history and features typed output with history: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":429,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":7405}
{"testID":232,"messageType":"print","message":"google:gemini-2.0-flash correctly handled empty text with error: google:gemini-2.0-flash: should throw exception for empty text","type":"print","time":7443}
{"testID":232,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7443}
{"test":{"id":236,"name":"Embedding generation createEmbedding with all primary providers","suiteID":140,"groupIDs":[144,145],"metadata":{"skip":false,"skipReason":null},"line":237,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":7444}
{"testID":236,"messageType":"print","message":"openai:gpt-4o: Successfully generated embedding with 1536 dimensions","type":"print","time":7878}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:16.128368: [LangchainWrapper] Attempting to parse tool call from: \"To continue with your request, I will proceed to find events for the current date and time that was obtained earlier. Then, I'll get the details for the first event found.\n\nLet's start by finding events.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date_time\": \"2023-11-29T13:07:21\"}}\"","type":"print","time":7916}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:16.128512: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date_time\": \"2023-11-29T13:07:21\"}}\"","type":"print","time":7916}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:16.128544: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":7916}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:16.128938: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}, {id: event2, title: Lunch with team, time: 12:30}]}","type":"print","time":7916}
{"testID":231,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7922}
{"test":{"id":237,"name":"Multimedia Input Provider: openai should process image file via DataPart.file()","suiteID":224,"groupIDs":[228,229,230],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":7923}
{"testID":236,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/embeddings\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 359:5                            OpenAIClient.makeRequest\n===== asynchronous gap ===========================\npackage:openai_dart/src/generated/client.dart 488:15                           OpenAIClient.createEmbedding\n===== asynchronous gap ===========================\npackage:langchain_openai/src/embeddings/openai.dart 211:18                     OpenAIEmbeddings.embedQuery\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 146:26  LangchainWrapper.createEmbedding\n===== asynchronous gap ===========================\ntest/embedding_test.dart 242:27                                                main.<fn>.<fn>\n","isFailure":false,"type":"error","time":8238}
{"testID":236,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":8238}
{"testID":234,"messageType":"print","message":"Failed to decode JSON line: Error executing tool 'calculate': Exception: Invalid operation","type":"print","time":8398}
{"testID":234,"messageType":"print","message":"StdioClientTransport: Error processing read buffer: Bad state: Message parsing error: FormatException: Invalid JSON received: Unexpected character\nError executing tool 'calculate': Exception: Invalid operation. Skipping data.","type":"print","time":8398}
{"testID":235,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"Horses are the animals that say \"neigh.\"\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/message_test.dart 418:22                     main.<fn>.testTypedOutputWithHistory\n","isFailure":false,"type":"error","time":8747}
{"testID":235,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":8747}
{"test":{"id":238,"name":"Message history and features typed output with history: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":433,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":8747}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:17.267985: [LangchainWrapper] Attempting to parse tool call from: \"To complete your request, I will now get details for the first event from the list of events found. \n\nTOOL_CALL: {\"name\": \"get_event_details\", \"args\": {\"event_id\": \"<first_event_id>\"}}\"","type":"print","time":9055}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:17.268047: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_event_details\", \"args\": {\"event_id\": \"<first_event_id>\"}}\"","type":"print","time":9055}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:17.268077: [LangchainWrapper] Successfully parsed tool call: get_event_details","type":"print","time":9055}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:17.268210: [LangchainWrapper] Tool get_event_details executed: {event_id: <first_event_id>, title: Morning Meeting, description: Weekly team standup meeting, attendees: [alice@example.com, bob@example.com], location: Conference Room A}","type":"print","time":9055}
{"testID":238,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9450}
{"test":{"id":239,"name":"Message history and features tool call history: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":524,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":9450}
{"testID":234,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":9485}
{"testID":234,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19667)...","type":"print","time":9485}
{"testID":234,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":9488}
{"testID":234,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":9488}
{"testID":234,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":9488}
{"testID":234,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9488}
{"group":{"id":240,"suiteID":6,"parentID":57,"name":"McpClient Tests integration with Agent","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":384,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":9488}
{"test":{"id":241,"name":"McpClient Tests integration with Agent can combine MCP tools with local tools","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":385,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":9488}
{"testID":241,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":9489}
{"testID":220,"messageType":"print","message":"resultOutput: The phrase \"hello world\" is widely recognized as a simple program used to illustrate the basic syntax of a programming language. Its origins can be traced back to the early days of computing. The phrase first appeared in the book \"The C Programming Language,\" published in 1978 by Brian Kernighan and Dennis Ritchie, who are also the creators of the C programming language. In this book, \"hello, world\" was used as the example program to demonstrate the syntax and structure of the C language. Since then, it has become a tradition to use \"hello world\" as the first program when learning a new programming language.","type":"print","time":10258}
{"testID":220,"messageType":"print","message":"messages: [Message(role: MessageRole.system, parts: [TextPart(Be concise, reply with one sentence.)]), Message(role: MessageRole.user, parts: [TextPart(Where does \"hello world\" come from?)]), Message(role: MessageRole.model, parts: [TextPart(The phrase \"hello world\" is widely recognized as a simple program used to illustrate the basic syntax of a programming language. Its origins can be traced back to the early days of computing. The phrase first appeared in the book \"The C Programming Language,\" published in 1978 by Brian Kernighan and Dennis Ritchie, who are also the creators of the C programming language. In this book, \"hello, world\" was used as the example program to demonstrate the syntax and structure of the C language. Since then, it has become a tradition to use \"hello world\" as the first program when learning a new programming language.)])]","type":"print","time":10258}
{"testID":220,"error":"Expected: <1>\n  Actual: <5>\n","stackTrace":"package:matcher                   expect\ntest/dartantic_ai_test.dart 40:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":10264}
{"testID":220,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":10264}
{"test":{"id":242,"name":"Dartantic AI Integration Tests Agent.model constructor JSON Schema String Output","suiteID":210,"groupIDs":[217,218,219],"metadata":{"skip":false,"skipReason":null},"line":43,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":10265}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:18.596835: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":10385}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:18.597632: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":10385}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:18.597666: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":10385}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:56:18.598060: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo, echo: moo}","type":"print","time":10385}
{"testID":237,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":10488}
{"test":{"id":243,"name":"Multimedia Input Provider: openai should process web image via LinkPart() for compatible providers","suiteID":224,"groupIDs":[228,229,230],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":10488}
{"testID":241,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":10562}
{"testID":241,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11157}
{"test":{"id":244,"name":"McpClient Tests integration with Agent validates MCP server schema parsing edge cases","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":406,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":11157}
{"testID":244,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":11157}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:20.135777: [LangchainWrapper] Attempting to parse tool call from: \"I have already gathered the current time, found events, and retrieved details for the first event. Here's the information you requested:\n\n1. **Current Time**: The current date and time were retrieved.\n2. **Events Found**: A list of events was identified for the specified date/time.\n3. **Details of the First Event**: Detailed information about the first event in the list was obtained.\n\nIf you have any further questions or need more details about other events, feel free to ask!\"","type":"print","time":11923}
{"testID":196,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11926}
{"group":{"id":245,"suiteID":190,"parentID":194,"name":"Multi-step tool calling Tool Calling Mode","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":124,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"group","time":11926}
{"group":{"id":246,"suiteID":190,"parentID":245,"name":"Multi-step tool calling Tool Calling Mode OpenAI Model","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":129,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"group","time":11926}
{"test":{"id":247,"name":"Multi-step tool calling Tool Calling Mode OpenAI Model should call multiple tools in multi-step mode","suiteID":190,"groupIDs":[192,194,245,246],"metadata":{"skip":false,"skipReason":null},"line":130,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"testStart","time":11926}
{"testID":244,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":12249}
{"testID":242,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":12572}
{"test":{"id":248,"name":"Dartantic AI Integration Tests Agent.model constructor JSON Schema Object Output","suiteID":210,"groupIDs":[217,218,219],"metadata":{"skip":false,"skipReason":null},"line":66,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":12573}
{"testID":244,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":12799}
{"test":{"id":249,"name":"McpClient Tests integration with Agent verifies SSE vs JSON format detection with real servers","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":439,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":12799}
{"testID":249,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":12800}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:21.017991: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":12805}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:21.018044: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":12805}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:21.018070: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":12805}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:21.018114: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":12805}
{"testID":249,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":14195}
{"testID":249,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":14579}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:23.050351: [LangchainWrapper] Attempting to parse tool call from: \"To complete your request, I need to find your events for today using the current date information obtained earlier. \n\nLet's proceed with that:\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date\": \"2023-10-11\"}}\"","type":"print","time":14838}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:23.050419: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date\": \"2023-10-11\"}}\"","type":"print","time":14838}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:23.050469: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":14838}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:23.050526: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}, {id: event2, title: Lunch with team, time: 12:30}]}","type":"print","time":14838}
{"testID":249,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":15668}
{"testID":248,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. The name is thought to have originated from the city's weather, as Chicago can be quite windy due to its location near Lake Michigan. However, it is also believed that the nickname may have been coined by 19th-century journalists who described the city as \"full of hot air\" due to its politicians and their grandiose claims, especially during the time of the World's Columbian Exposition in 1893.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 87:24                 main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":15842}
{"testID":248,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":15843}
{"test":{"id":250,"name":"Dartantic AI Integration Tests Agent.model constructor Tool Usage Example","suiteID":210,"groupIDs":[217,218,219],"metadata":{"skip":false,"skipReason":null},"line":101,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":15843}
{"testID":243,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16115}
{"test":{"id":251,"name":"Multimedia Input Provider: openai should handle multiple attachments","suiteID":224,"groupIDs":[228,229,230],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":16115}
{"testID":249,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16259}
{"test":{"id":252,"name":"McpClient Tests integration with Agent can connect to DeepWiki MCP server with session management","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":470,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":16260}
{"testID":252,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":16260}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:25.166565: [LangchainWrapper] Attempting to parse tool call from: \"Based on the original request, I have already retrieved the current time and found your events for today. Since I have completed these steps, there is no need to call additional tools.\n\nHere is a summary of your events for today:\n\n1. **Team Meeting** at 10:00 AM\n2. **Lunch with Sarah** at 12:30 PM\n3. **Project Deadline** at 3:00 PM\n4. **Yoga Class** at 6:00 PM\n\nIf you need more details on any specific event, please let me know!\"","type":"print","time":16954}
{"testID":247,"error":"Expected: contains pair 'date' => '2025-06-20'\n  Actual: {'date': '2023-10-11'}\n   Which:  contains key 'date' but with value is different.\n          Expected: 2025-06-20\n            Actual: 2023-10-11\n                       ^\n           Differ at offset 3\n","stackTrace":"package:matcher                                expect\ntest/multi_step_tool_calling_test.dart 143:11  main.<fn>.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":16961}
{"testID":247,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":16961}
{"group":{"id":253,"suiteID":190,"parentID":245,"name":"Multi-step tool calling Tool Calling Mode Gemini Model","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":154,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"group","time":16961}
{"test":{"id":254,"name":"Multi-step tool calling Tool Calling Mode Gemini Model should call multiple tools in multi-step mode","suiteID":190,"groupIDs":[192,194,245,253],"metadata":{"skip":false,"skipReason":null},"line":155,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"testStart","time":16961}
{"testID":252,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":17765}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:26.005165: [LangchainWrapper] Attempting to parse tool call from: \"First, I need to determine the current date.\nTOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":17792}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:26.005229: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":17792}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:26.005254: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":17792}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:26.005333: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":17792}
{"testID":252,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18086}
{"test":{"id":255,"name":"McpClient Tests integration with Agent can configure local MCP server for Agent integration","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":546,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":18086}
{"testID":255,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18086}
{"test":{"id":256,"name":"McpClient Tests integration with Agent demonstrates local MCP server workflow configuration","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":559,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":18086}
{"testID":256,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18087}
{"test":{"id":257,"name":"McpClient Tests integration with Agent validates local tool configuration patterns","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":572,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":18087}
{"testID":257,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18087}
{"test":{"id":258,"name":"McpClient Tests integration with Agent can combine multiple MCP servers and local tools in Agent","suiteID":6,"groupIDs":[56,57,240],"metadata":{"skip":false,"skipReason":null},"line":594,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":18087}
{"testID":258,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":18087}
{"testID":251,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":18248}
{"test":{"id":259,"name":"Multimedia Input Provider: openai should work with streaming and attachments","suiteID":224,"groupIDs":[228,229,230],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":18249}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:26.891318: [LangchainWrapper] Attempting to parse tool call from: \"I have the current date from the `get_current_time` tool. Now I need to use that information to find the user's events for that date.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date\": \"current date\"}}\n\"","type":"print","time":18678}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:26.891392: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date\": \"current date\"}}\"","type":"print","time":18679}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:26.891418: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":18679}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:26.891516: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}, {id: event2, title: Lunch with team, time: 12:30}]}","type":"print","time":18679}
{"testID":258,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":19348}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:27.617599: [LangchainWrapper] Attempting to parse tool call from: \"I have already found events for the current date using the `find_events` tool. Now I need to provide a final response to the user.\n\nFinal Response:\nI have found the events scheduled for today. Please let me know if you would like more details about any of them.\n\"","type":"print","time":19405}
{"testID":254,"error":"Expected: contains pair 'date' => '2025-06-20'\n  Actual: {'date': 'current date'}\n   Which:  contains key 'date' but with value is different.\n          Expected: 2025-06-20 ...\n            Actual: current da ...\n                    ^\n           Differ at offset 0\n","stackTrace":"package:matcher                                expect\ntest/multi_step_tool_calling_test.dart 171:11  main.<fn>.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":19406}
{"testID":254,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":19406}
{"group":{"id":260,"suiteID":190,"parentID":194,"name":"Multi-step tool calling Conversation Context","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":182,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"group","time":19406}
{"test":{"id":261,"name":"Multi-step tool calling Conversation Context should maintain conversation history with tool results","suiteID":190,"groupIDs":[192,194,260],"metadata":{"skip":false,"skipReason":null},"line":183,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"testStart","time":19406}
{"testID":258,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":19661}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:28.293438: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":20081}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:28.293488: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":20081}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:28.293511: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":20081}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:28.293552: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":20081}
{"testID":258,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":20771}
{"testID":259,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":20960}
{"test":{"id":262,"name":"Multimedia Input Provider: openai should maintain message history with attachments","suiteID":224,"groupIDs":[228,229,230],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":20961}
{"testID":258,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":21364}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:29.909756: [LangchainWrapper] Attempting to parse tool call from: \"To complete your request, I need to find events for the current date and time. I will proceed with that now.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date_time\": \"2023-10-03T13:56:42\"}}\"","type":"print","time":21697}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:29.909815: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date_time\": \"2023-10-03T13:56:42\"}}\"","type":"print","time":21697}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:29.909838: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":21697}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:29.909891: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}, {id: event2, title: Lunch with team, time: 12:30}]}","type":"print","time":21697}
{"testID":262,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":22433}
{"group":{"id":263,"suiteID":224,"parentID":229,"name":"Multimedia Input Provider: openrouter","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":22434}
{"test":{"id":264,"name":"Multimedia Input Provider: openrouter should process text file via DataPart.file()","suiteID":224,"groupIDs":[228,229,263],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":22434}
{"testID":264,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":22845}
{"testID":264,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":22845}
{"test":{"id":265,"name":"Multimedia Input Provider: openrouter should process image file via DataPart.file()","suiteID":224,"groupIDs":[228,229,263],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":22845}
{"testID":265,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":23300}
{"testID":265,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":23300}
{"test":{"id":266,"name":"Multimedia Input Provider: openrouter should process web image via LinkPart() for compatible providers","suiteID":224,"groupIDs":[228,229,263],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":23300}
{"testID":266,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":23734}
{"testID":266,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":23734}
{"test":{"id":267,"name":"Multimedia Input Provider: openrouter should handle multiple attachments","suiteID":224,"groupIDs":[228,229,263],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":23735}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:32.022190: [LangchainWrapper] Attempting to parse tool call from: \"Based on your original request, you asked to get the current time and find events. I have already retrieved the current time and found events for today's date. Here is a summary of the results:\n\n- **Current Time:** [The time retrieved from `get_current_time`]\n- **Events Found:** [The events retrieved from `find_events`]\n\nIf you would like more details about any specific event, please let me know, and I can provide further information. Otherwise, this completes your request. If there's anything else you'd like to know or do, feel free to ask!\"","type":"print","time":23809}
{"testID":261,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":23810}
{"group":{"id":268,"suiteID":190,"parentID":194,"name":"Multi-step tool calling Error Handling","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":223,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"group","time":23810}
{"test":{"id":269,"name":"Multi-step tool calling Error Handling should handle tool call errors gracefully","suiteID":190,"groupIDs":[192,194,268],"metadata":{"skip":false,"skipReason":null},"line":224,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multi_step_tool_calling_test.dart"},"type":"testStart","time":23810}
{"testID":267,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":24200}
{"testID":267,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":24200}
{"test":{"id":270,"name":"Multimedia Input Provider: openrouter should work with streaming and attachments","suiteID":224,"groupIDs":[228,229,263],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":24200}
{"testID":270,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":24599}
{"testID":270,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":24599}
{"test":{"id":271,"name":"Multimedia Input Provider: openrouter should maintain message history with attachments","suiteID":224,"groupIDs":[228,229,263],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":24599}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:33.052428: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"failing_tool\", \"args\": {}}\"","type":"print","time":24839}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:33.052501: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"failing_tool\", \"args\": {}}\"","type":"print","time":24840}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:33.052523: [LangchainWrapper] Successfully parsed tool call: failing_tool","type":"print","time":24840}
{"testID":193,"messageType":"print","message":"SEVERE: 2025-06-26 16:56:33.052864: [LangchainWrapper] Error calling tool failing_tool: Exception: Tool intentionally failed","type":"print","time":24840}
{"testID":271,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":24999}
{"testID":271,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":24999}
{"group":{"id":272,"suiteID":224,"parentID":229,"name":"Multimedia Input Provider: gemini-compat","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":24999}
{"test":{"id":273,"name":"Multimedia Input Provider: gemini-compat should process text file via DataPart.file()","suiteID":224,"groupIDs":[228,229,272],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":24999}
{"testID":273,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":25406}
{"testID":273,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":25406}
{"test":{"id":274,"name":"Multimedia Input Provider: gemini-compat should process image file via DataPart.file()","suiteID":224,"groupIDs":[228,229,272],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":25406}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:33.823976: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"working_tool\", \"args\": {}}\"","type":"print","time":25611}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:33.824027: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"working_tool\", \"args\": {}}\"","type":"print","time":25611}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:33.824047: [LangchainWrapper] Successfully parsed tool call: working_tool","type":"print","time":25611}
{"testID":193,"messageType":"print","message":"FINE: 2025-06-26 16:56:33.824135: [LangchainWrapper] Tool working_tool executed: {result: success}","type":"print","time":25611}
{"testID":274,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":25828}
{"testID":274,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":25828}
{"test":{"id":275,"name":"Multimedia Input Provider: gemini-compat should process web image via LinkPart() for compatible providers","suiteID":224,"groupIDs":[228,229,272],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":25828}
{"testID":193,"messageType":"print","message":"INFO: 2025-06-26 16:56:34.181791: [LangchainWrapper] Attempting to parse tool call from: \"NO\"","type":"print","time":25969}
{"testID":269,"error":"Expected: (contains 'error' or contains 'failed' or contains 'success')\n  Actual: 'tool_call: {\"name\": \"failing_tool\", \"args\": {}}tool_call: {\"name\": \"working_tool\", \"args\": {}}no'\n","stackTrace":"package:matcher                                expect\ntest/multi_step_tool_calling_test.dart 256:11  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":25971}
{"testID":269,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":25971}
{"test":{"id":276,"name":"(tearDownAll)","suiteID":190,"groupIDs":[192],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":25971}
{"testID":276,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":25972}
{"testID":275,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":26230}
{"testID":275,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":26230}
{"test":{"id":277,"name":"Multimedia Input Provider: gemini-compat should handle multiple attachments","suiteID":224,"groupIDs":[228,229,272],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":26230}
{"testID":277,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":26676}
{"testID":277,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":26676}
{"test":{"id":278,"name":"Multimedia Input Provider: gemini-compat should work with streaming and attachments","suiteID":224,"groupIDs":[228,229,272],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":26676}
{"testID":278,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":27087}
{"testID":278,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":27087}
{"test":{"id":279,"name":"Multimedia Input Provider: gemini-compat should maintain message history with attachments","suiteID":224,"groupIDs":[228,229,272],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":27087}
{"testID":279,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":27531}
{"testID":279,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":27532}
{"group":{"id":280,"suiteID":224,"parentID":229,"name":"Multimedia Input Provider: google","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":27532}
{"test":{"id":281,"name":"Multimedia Input Provider: google should process text file via DataPart.file()","suiteID":224,"groupIDs":[228,229,280],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":27532}
{"testID":281,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":28338}
{"test":{"id":282,"name":"Multimedia Input Provider: google should process image file via DataPart.file()","suiteID":224,"groupIDs":[228,229,280],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":28338}
{"testID":282,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":29924}
{"test":{"id":283,"name":"Multimedia Input Provider: google should process web image via LinkPart() for compatible providers","suiteID":224,"groupIDs":[228,229,280],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":29924}
{"testID":283,"messageType":"skip","message":"Provider google does not support arbitrary web URLs: Invalid or unsupported file uri: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg","type":"print","time":30268}
{"testID":283,"result":"success","skipped":true,"hidden":false,"type":"testDone","time":30268}
{"test":{"id":284,"name":"Multimedia Input Provider: google should handle multiple attachments","suiteID":224,"groupIDs":[228,229,280],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":30269}
{"testID":284,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":32547}
{"test":{"id":285,"name":"Multimedia Input Provider: google should work with streaming and attachments","suiteID":224,"groupIDs":[228,229,280],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":32548}
{"testID":250,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":34171}
{"test":{"id":286,"name":"Dartantic AI Integration Tests Agent.model constructor Gemini Integration","suiteID":210,"groupIDs":[217,218,219],"metadata":{"skip":false,"skipReason":null},"line":157,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":34172}
{"testID":286,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"That would be **Chicago, Illinois**.\n\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 177:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":34983}
{"testID":286,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":34983}
{"test":{"id":287,"name":"Dartantic AI Integration Tests Agent.model constructor OpenAI Integration","suiteID":210,"groupIDs":[217,218,219],"metadata":{"skip":false,"skipReason":null},"line":189,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":34984}
{"testID":285,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":36412}
{"test":{"id":288,"name":"Multimedia Input Provider: google should maintain message history with attachments","suiteID":224,"groupIDs":[228,229,280],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":36413}
{"testID":287,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. Despite the name, it actually originates from the city's historical reputation for boastful or \"windy\" politicians rather than its weather, although it is indeed breezy given its location by Lake Michigan.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 209:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":36682}
{"testID":287,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":36682}
{"test":{"id":289,"name":"Dartantic AI Integration Tests Agent.model constructor Agent.runPrompt with DotPrompt object","suiteID":210,"groupIDs":[217,218,219],"metadata":{"skip":false,"skipReason":null},"line":221,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":36682}
{"testID":289,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":37505}
{"group":{"id":290,"suiteID":210,"parentID":218,"name":"Dartantic AI Integration Tests Agent constructor with provider","metadata":{"skip":false,"skipReason":null},"testCount":7,"line":243,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":37506}
{"test":{"id":291,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider Basic","suiteID":210,"groupIDs":[217,218,290],"metadata":{"skip":false,"skipReason":null},"line":244,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":37506}
{"testID":288,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":37543}
{"group":{"id":292,"suiteID":224,"parentID":228,"name":"Multimedia Error Handling","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":208,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":37543}
{"test":{"id":293,"name":"Multimedia Error Handling should handle non-existent file gracefully","suiteID":224,"groupIDs":[228,292],"metadata":{"skip":false,"skipReason":null},"line":209,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":37543}
{"testID":293,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":37546}
{"test":{"id":294,"name":"Multimedia Error Handling should handle invalid URL gracefully","suiteID":224,"groupIDs":[228,292],"metadata":{"skip":false,"skipReason":null},"line":218,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":37546}
{"testID":294,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":37546}
{"testID":239,"error":"TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts","stackTrace":"dart:isolate  _RawReceivePort._handleMessage\n","isFailure":false,"type":"error","time":39455}
{"testID":239,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":39456}
{"test":{"id":295,"name":"Message history and features tool call history: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":528,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":39456}
{"testID":291,"error":"Expected: <1>\n  Actual: <4>\n","stackTrace":"package:matcher                    expect\ntest/dartantic_ai_test.dart 258:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":39911}
{"testID":291,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":39911}
{"test":{"id":296,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider with Schema","suiteID":210,"groupIDs":[217,218,290],"metadata":{"skip":false,"skipReason":null},"line":261,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":39912}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:48.485242: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"input\": \"moo\"}}\n\"","type":"print","time":40272}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:48.485311: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"input\": \"moo\"}}\"","type":"print","time":40272}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:48.485331: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":40272}
{"testID":295,"error":"type 'Null' is not a subtype of type 'String' in type cast","stackTrace":"test/message_test.dart 452:40                                                  main.<fn>.testToolCallHistory.<fn>\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 604:39  LangchainWrapper._callTool\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 444:34  LangchainWrapper._streamLLMWithTools\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 321:9   LangchainWrapper._streamLLMResponse\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 120:7   LangchainWrapper.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 322:5                                Agent.runStream\n===== asynchronous gap ===========================\ntest/test_utils.dart 22:7                                                      rateLimitRetryStream\n===== asynchronous gap ===========================\ntest/message_test.dart 475:7                                                   main.<fn>.testToolCallHistory\n","isFailure":false,"type":"error","time":40274}
{"testID":295,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":40275}
{"test":{"id":297,"name":"Message history and features context is maintained across chat responses: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":533,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":40275}
{"testID":296,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. This nickname is often thought to refer to the weather, but it originally came from the city's politicians, who were known for being full of hot air, or boastful. However, the city is also quite windy due to its location near Lake Michigan.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 281:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":42893}
{"testID":296,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":42893}
{"test":{"id":298,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider Basic","suiteID":210,"groupIDs":[217,218,290],"metadata":{"skip":false,"skipReason":null},"line":293,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":42894}
{"testID":297,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":42936}
{"test":{"id":299,"name":"Message history and features context is maintained across chat responses: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":551,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":42936}
{"testID":299,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":44309}
{"test":{"id":300,"name":"Message history and features growing history Gemini→OpenAI→Gemini→OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":732,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":44309}
{"testID":300,"messageType":"print","message":"\n--- Provider 0: google ---","type":"print","time":44310}
{"testID":300,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":44310}
{"testID":300,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":44310}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:53.394170: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\n\"","type":"print","time":45181}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:53.394233: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":45181}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:53.394251: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":45181}
{"testID":300,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":45181}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:56:53.394396: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":45181}
{"testID":298,"error":"Expected: <1>\n  Actual: <7>\n","stackTrace":"package:matcher                    expect\ntest/dartantic_ai_test.dart 307:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":45185}
{"testID":298,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":45185}
{"test":{"id":301,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider with Schema","suiteID":210,"groupIDs":[217,218,290],"metadata":{"skip":false,"skipReason":null},"line":310,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":45186}
{"testID":301,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"That would be **Chicago, Illinois**.\n\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 330:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":45977}
{"testID":301,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":45978}
{"test":{"id":302,"name":"Dartantic AI Integration Tests Agent constructor with provider Provider with Tools","suiteID":210,"groupIDs":[217,218,290],"metadata":{"skip":false,"skipReason":null},"line":342,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":45978}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:54.237111: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the `animal_sound_lookup` tool and received the results. I now have the information needed to answer the user's question. I do not need to call any more tools.\n\"","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\nI have already called the `animal_sound_lookup` tool and received the results. I now have the information needed to answer the user's question. I do not need to call any more tools.\n","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"\n--- Provider 1: openai ---","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"  Tool call: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":46024}
{"testID":300,"messageType":"print","message":"  Tool result: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":46024}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:55.301164: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":47088}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:55.301230: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":47088}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:55.301252: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":47088}
{"testID":300,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":47088}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:56:55.301315: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":47088}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:55.953128: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the previous tool call, the animal that says \"quack\" is a duck.\"","type":"print","time":47740}
{"testID":300,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on the results from the previous tool call, the animal that says \"quack\" is a duck.","type":"print","time":47740}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":47740}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":47740}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":47740}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":47740}
{"testID":300,"messageType":"print","message":"\n--- Provider 2: google ---","type":"print","time":47740}
{"testID":300,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":47741}
{"testID":300,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":47741}
{"testID":300,"messageType":"print","message":"  Tool call: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":47741}
{"testID":300,"messageType":"print","message":"  Tool result: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":47741}
{"testID":300,"messageType":"print","message":"  Tool call: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":47741}
{"testID":300,"messageType":"print","message":"  Tool result: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":47741}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:56.714816: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":48502}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:56.714896: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":48502}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:56.714916: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":48502}
{"testID":300,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":48502}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:56:56.715021: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":48502}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:56:57.623480: [LangchainWrapper] Attempting to parse tool call from: \"I apologize, I misunderstood. I thought the request was for the animal that says \"moo.\" The user is asking, \"What animal says 'quack'?\" I have already called the animal_sound_lookup tool, and I have the answer. I do not need to call any more tools.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n\"","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI apologize, I misunderstood. I thought the request was for the animal that says \"moo.\" The user is asking, \"What animal says 'quack'?\" I have already called the animal_sound_lookup tool, and I have the answer. I do not need to call any more tools.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971416715, name=animal_sound_lookup","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971416715, name=animal_sound_lookup","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"\n--- Provider 3: openai ---","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"Current history size: 13 messages","type":"print","time":49410}
{"testID":300,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":49411}
{"testID":300,"messageType":"print","message":"  Tool call: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":49411}
{"testID":300,"messageType":"print","message":"  Tool result: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":49411}
{"testID":300,"messageType":"print","message":"  Tool call: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":49411}
{"testID":300,"messageType":"print","message":"  Tool result: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":49411}
{"testID":300,"messageType":"print","message":"  Tool call: id=tool_1750971416715, name=animal_sound_lookup","type":"print","time":49411}
{"testID":300,"messageType":"print","message":"  Tool result: id=tool_1750971416715, name=animal_sound_lookup","type":"print","time":49411}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:01.205274: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":52992}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:01.205369: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":52992}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:01.205390: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":52992}
{"testID":300,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":52992}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:01.205459: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":52992}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:02.070985: [LangchainWrapper] Attempting to parse tool call from: \"I will use the `animal_sound_lookup` tool to find out which animal says \"quack\". \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":53858}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:02.071047: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":53858}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:02.071066: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":53858}
{"testID":300,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":53858}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:02.071126: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":53858}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:02.970726: [LangchainWrapper] Attempting to parse tool call from: \"I will use the `animal_sound_lookup` tool to confirm which animal makes the \"quack\" sound. \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":54757}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:02.970766: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":54757}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:02.970783: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":54757}
{"testID":300,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":54758}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:02.970815: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":54758}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:03.712126: [LangchainWrapper] Attempting to parse tool call from: \"I previously used the `animal_sound_lookup` tool to find which animal makes the sound \"quack.\" The result indicated that the animal that says \"quack\" is a duck.\"","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the `animal_sound_lookup` tool to find out which animal says \"quack\". \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the `animal_sound_lookup` tool to confirm which animal makes the \"quack\" sound. \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I previously used the `animal_sound_lookup` tool to find which animal makes the sound \"quack.\" The result indicated that the animal that says \"quack\" is a duck.","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971413394, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971415301, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971416715, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971416715, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971421205, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971421205, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971422071, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971422071, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool call: id=tool_1750971422970, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"  New tool result: id=tool_1750971422970, name=animal_sound_lookup","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"All tool call IDs: [tool_1750971413394, tool_1750971413394, tool_1750971415301, tool_1750971413394, tool_1750971415301, tool_1750971416715, tool_1750971413394, tool_1750971415301, tool_1750971416715, tool_1750971421205, tool_1750971422071, tool_1750971422970]","type":"print","time":55499}
{"testID":300,"messageType":"print","message":"All tool result IDs: [tool_1750971413394, tool_1750971413394, tool_1750971415301, tool_1750971413394, tool_1750971415301, tool_1750971416715, tool_1750971413394, tool_1750971415301, tool_1750971416715, tool_1750971421205, tool_1750971422071, tool_1750971422970]","type":"print","time":55499}
{"testID":300,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":55500}
{"test":{"id":303,"name":"Message history and features growing history OpenAI→Gemini→OpenAI→Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":741,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":55500}
{"testID":303,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":55501}
{"testID":303,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":55501}
{"testID":303,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":55501}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:04.686408: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":56473}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:04.686480: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":56473}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:04.686500: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":56473}
{"testID":303,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":56473}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:04.686548: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":56473}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:05.292502: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup tool, the animal that says \"moo\" is a cow.\"","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}Based on the results from the animal_sound_lookup tool, the animal that says \"moo\" is a cow.","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"\n--- Provider 1: google ---","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"  Tool call: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":57079}
{"testID":303,"messageType":"print","message":"  Tool result: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":57079}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:06.019078: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":57806}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:06.019119: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":57806}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:06.019134: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":57806}
{"testID":303,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":57806}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:06.019198: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":57806}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:06.753530: [LangchainWrapper] Attempting to parse tool call from: \"I have already used the animal_sound_lookup tool in a previous turn. I do not need to call it again. I can now provide the final response.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n\"","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI have already used the animal_sound_lookup tool in a previous turn. I do not need to call it again. I can now provide the final response.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"\n--- Provider 2: openai ---","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  Tool call: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  Tool result: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  Tool call: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":58540}
{"testID":303,"messageType":"print","message":"  Tool result: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":58540}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:07.926145: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":59713}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:07.926198: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":59713}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:07.926216: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":59713}
{"testID":303,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":59713}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:07.926256: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":59713}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:08.800512: [LangchainWrapper] Attempting to parse tool call from: \"I understand the request now. Let me call the tool again to provide the correct response.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":60587}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:08.800557: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":60587}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:08.800573: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":60587}
{"testID":303,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":60587}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:08.800605: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":60587}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:09.325400: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"quack\" is a duck.\"","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I understand the request now. Let me call the tool again to provide the correct response.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}The animal that says \"quack\" is a duck.","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971427926, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971427926, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971428800, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971428800, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"\n--- Provider 3: google ---","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"Current history size: 15 messages","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool call: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool result: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool call: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool result: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool call: id=tool_1750971427926, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool result: id=tool_1750971427926, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool call: id=tool_1750971428800, name=animal_sound_lookup","type":"print","time":61112}
{"testID":303,"messageType":"print","message":"  Tool result: id=tool_1750971428800, name=animal_sound_lookup","type":"print","time":61112}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:10.190202: [LangchainWrapper] Attempting to parse tool call from: \"Final Answer: The animal that says \"quack\" is a duck.\n\"","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"Provider google output: Final Answer: The animal that says \"quack\" is a duck.\n","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971424686, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971426019, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971427926, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971427926, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool call: id=tool_1750971428800, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"  New tool result: id=tool_1750971428800, name=animal_sound_lookup","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"All tool call IDs: [tool_1750971424686, tool_1750971424686, tool_1750971426019, tool_1750971424686, tool_1750971426019, tool_1750971427926, tool_1750971428800, tool_1750971424686, tool_1750971426019, tool_1750971427926, tool_1750971428800]","type":"print","time":61977}
{"testID":303,"messageType":"print","message":"All tool result IDs: [tool_1750971424686, tool_1750971424686, tool_1750971426019, tool_1750971424686, tool_1750971426019, tool_1750971427926, tool_1750971428800, tool_1750971424686, tool_1750971426019, tool_1750971427926, tool_1750971428800]","type":"print","time":61977}
{"testID":303,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":61977}
{"test":{"id":304,"name":"Message history and features growing history OpenAI→OpenAI→OpenAI→OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":750,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":61978}
{"testID":304,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":61978}
{"testID":304,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":61978}
{"testID":304,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":61978}
{"testID":302,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":62106}
{"test":{"id":305,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider with Tools","suiteID":210,"groupIDs":[217,218,290],"metadata":{"skip":false,"skipReason":null},"line":399,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":62106}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:11.192154: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":62979}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:11.192206: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":62979}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:11.192223: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":62979}
{"testID":304,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":62979}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:11.192272: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":62979}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:12.221906: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup, the animal that says \"moo\" is a cow.\"","type":"print","time":64008}
{"testID":304,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}Based on the results from the animal_sound_lookup, the animal that says \"moo\" is a cow.","type":"print","time":64009}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":64009}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":64009}
{"testID":304,"messageType":"print","message":"\n--- Provider 1: openai ---","type":"print","time":64009}
{"testID":304,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":64009}
{"testID":304,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":64009}
{"testID":304,"messageType":"print","message":"  Tool call: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":64009}
{"testID":304,"messageType":"print","message":"  Tool result: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":64009}
{"testID":305,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64239}
{"test":{"id":306,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider with Google AI OpenAI-compatible API","suiteID":210,"groupIDs":[217,218,290],"metadata":{"skip":false,"skipReason":null},"line":456,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64240}
{"testID":306,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":64683}
{"testID":306,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":64683}
{"group":{"id":307,"suiteID":210,"parentID":218,"name":"Dartantic AI Integration Tests Provider Aliases","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":470,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":64683}
{"test":{"id":308,"name":"Dartantic AI Integration Tests Provider Aliases googleai alias creates GeminiProvider","suiteID":210,"groupIDs":[217,218,307],"metadata":{"skip":false,"skipReason":null},"line":471,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64683}
{"testID":308,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64684}
{"test":{"id":309,"name":"Dartantic AI Integration Tests Provider Aliases google-gla alias creates GeminiProvider","suiteID":210,"groupIDs":[217,218,307],"metadata":{"skip":false,"skipReason":null},"line":476,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64684}
{"testID":309,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64684}
{"test":{"id":310,"name":"Dartantic AI Integration Tests Provider Aliases gemini alias creates GeminiProvider","suiteID":210,"groupIDs":[217,218,307],"metadata":{"skip":false,"skipReason":null},"line":481,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64684}
{"testID":310,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64684}
{"test":{"id":311,"name":"Dartantic AI Integration Tests Provider Aliases google provider creates GeminiProvider","suiteID":210,"groupIDs":[217,218,307],"metadata":{"skip":false,"skipReason":null},"line":486,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64684}
{"testID":311,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64685}
{"test":{"id":312,"name":"Dartantic AI Integration Tests Provider Aliases openai provider creates OpenAiProvider","suiteID":210,"groupIDs":[217,218,307],"metadata":{"skip":false,"skipReason":null},"line":491,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":64685}
{"testID":312,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":64685}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:13.091726: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":64878}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:13.091773: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":64878}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:13.091791: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":64878}
{"testID":304,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":64878}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:13.091839: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":64878}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:13.688756: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup, the animal that says \"quack\" is a duck.\"","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on the results from the animal_sound_lookup, the animal that says \"quack\" is a duck.","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"\n--- Provider 2: openai ---","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  Tool call: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  Tool result: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  Tool call: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":65475}
{"testID":304,"messageType":"print","message":"  Tool result: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":65475}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:14.590220: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":66377}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:14.590258: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":66377}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:14.590278: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":66377}
{"testID":304,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":66377}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:14.590317: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":66377}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:15.247041: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup, the animal that says \"quack\" is a duck.\"","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on the results from the animal_sound_lookup, the animal that says \"quack\" is a duck.","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971434590, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971434590, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"\n--- Provider 3: openai ---","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"Current history size: 13 messages","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  Tool call: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  Tool result: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  Tool call: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  Tool result: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  Tool call: id=tool_1750971434590, name=animal_sound_lookup","type":"print","time":67034}
{"testID":304,"messageType":"print","message":"  Tool result: id=tool_1750971434590, name=animal_sound_lookup","type":"print","time":67034}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:16.283050: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":68070}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:16.283121: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":68070}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:16.283139: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":68070}
{"testID":304,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":68070}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:16.283188: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":68070}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:16.816013: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup, the animal that says \"quack\" is a duck.\"","type":"print","time":68602}
{"testID":304,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on the results from the animal_sound_lookup, the animal that says \"quack\" is a duck.","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971431192, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971433091, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971434590, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971434590, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool call: id=tool_1750971436283, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"  New tool result: id=tool_1750971436283, name=animal_sound_lookup","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"All tool call IDs: [tool_1750971431192, tool_1750971431192, tool_1750971433091, tool_1750971431192, tool_1750971433091, tool_1750971434590, tool_1750971431192, tool_1750971433091, tool_1750971434590, tool_1750971436283]","type":"print","time":68603}
{"testID":304,"messageType":"print","message":"All tool result IDs: [tool_1750971431192, tool_1750971431192, tool_1750971433091, tool_1750971431192, tool_1750971433091, tool_1750971434590, tool_1750971431192, tool_1750971433091, tool_1750971434590, tool_1750971436283]","type":"print","time":68603}
{"testID":304,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":68603}
{"test":{"id":313,"name":"Message history and features growing history Gemini→Gemini→Gemini→Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":759,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":68603}
{"testID":313,"messageType":"print","message":"\n--- Provider 0: google ---","type":"print","time":68604}
{"testID":313,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":68604}
{"testID":313,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":68604}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:17.725958: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\n\"","type":"print","time":69512}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:17.726006: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":69512}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:17.726023: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":69513}
{"testID":313,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":69513}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:17.726087: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":69513}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:18.725150: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the `animal_sound_lookup` tool in the previous turn, so I should now have the answer to the question \"What animal says \"moo\"?\". I can now provide the final answer.\n\nFinal Answer: The animal that says \"moo\" is a cow.\n\"","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\nI have already called the `animal_sound_lookup` tool in the previous turn, so I should now have the answer to the question \"What animal says \"moo\"?\". I can now provide the final answer.\n\nFinal Answer: The animal that says \"moo\" is a cow.\n","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"  New tool call: id=tool_1750971437726, name=animal_sound_lookup","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"  New tool result: id=tool_1750971437726, name=animal_sound_lookup","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"\n--- Provider 1: google ---","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"  Tool call: id=tool_1750971437726, name=animal_sound_lookup","type":"print","time":70512}
{"testID":313,"messageType":"print","message":"  Tool result: id=tool_1750971437726, name=animal_sound_lookup","type":"print","time":70512}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:19.467139: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":71254}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:19.467191: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":71254}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:19.467207: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":71254}
{"testID":313,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":71254}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:19.467275: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":71254}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:20.659789: [LangchainWrapper] Attempting to parse tool call from: \"The original request was \"What animal says \"quack\"?\" I previously called the `animal_sound_lookup` tool. I need to check the results of that tool call to answer the question. If the tool returned a result for \"quack\", I can provide the answer. Otherwise, I may need to try a different approach or inform the user that I cannot find the answer.\n\nSince I don't have access to the previous tool call result, I will call the tool again to be sure.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"animal_sound\": \"quack\"}}\n\"","type":"print","time":72446}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:20.659864: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"animal_sound\": \"quack\"}}\"","type":"print","time":72446}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:20.659881: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":72446}
{"testID":313,"messageType":"print","message":"onCall: {animal_sound: quack}","type":"print","time":72446}
{"testID":313,"error":"type 'Null' is not a subtype of type 'String' in type cast","stackTrace":"test/message_test.dart 587:40                                                  main.<fn>.testGrowingHistoryWithProviders.<fn>\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 604:39  LangchainWrapper._callTool\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 444:34  LangchainWrapper._streamLLMWithTools\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 321:9   LangchainWrapper._streamLLMResponse\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 120:7   LangchainWrapper.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 322:5                                Agent.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 300:5                                Agent.run\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                                                     rateLimitRetry\n===== asynchronous gap ===========================\ntest/message_test.dart 642:24                                                  main.<fn>.testGrowingHistoryWithProviders\n===== asynchronous gap ===========================\ntest/message_test.dart 760:7                                                   main.<fn>.<fn>\n","isFailure":false,"type":"error","time":72448}
{"testID":313,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":72448}
{"test":{"id":314,"name":"Message history and features growing history with all primary providers","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":769,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":72449}
{"testID":314,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":72451}
{"testID":314,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":72451}
{"testID":314,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":72451}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:22.451997: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":74238}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:22.452057: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":74238}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:22.452076: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":74239}
{"testID":314,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":74239}
{"testID":124,"messageType":"print","message":"FINE: 2025-06-26 16:57:22.452122: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":74239}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:25.408262: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the earlier tool call, the animal that says \"moo\" is a cow.\"","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}Based on the results from the earlier tool call, the animal that says \"moo\" is a cow.","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"  New tool call: id=tool_1750971442452, name=animal_sound_lookup","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"  New tool result: id=tool_1750971442452, name=animal_sound_lookup","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"\n--- Provider 1: openrouter ---","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"  Tool call: id=tool_1750971442452, name=animal_sound_lookup","type":"print","time":77195}
{"testID":314,"messageType":"print","message":"  Tool result: id=tool_1750971442452, name=animal_sound_lookup","type":"print","time":77195}
{"testID":314,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":77609}
{"testID":314,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":77609}
{"test":{"id":315,"name":"Message history and features tool result is referenced in later chat: Gemini","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":854,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":77609}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:26.649282: [LangchainWrapper] Attempting to parse tool call from: \"This request doesn't require any tools. It's a simple echo request.\n\nI will respond directly.\n\"","type":"print","time":78436}
{"testID":315,"messageType":"print","message":"--- Debug: Message history after first agent run (provider: \\google:gemini-2.0-flash) ---","type":"print","time":78436}
{"testID":315,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":78436}
{"testID":315,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":78436}
{"testID":315,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":78436}
{"testID":315,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":78436}
{"testID":315,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":78436}
{"testID":315,"messageType":"print","message":"  TextPart(This request doesn't require any tools. It's a simple echo request.\n\nI will respond directly.\n)","type":"print","time":78436}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:27.701548: [LangchainWrapper] Attempting to parse tool call from: \"This request requires me to recall previous interactions. I do not have a specific tool for that. I will respond based on my memory of our conversation.\n\nThe value you asked me to echo was \"magic-value-123\".\n\"","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"--- Debug: Follow-up output (provider: \\google:gemini-2.0-flash) ---","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"Follow-up prompt: \\What value did I ask you to echo?","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"Follow-up output: \\This request requires me to recall previous interactions. I do not have a specific tool for that. I will respond based on my memory of our conversation.\n\nThe value you asked me to echo was \"magic-value-123\".\n","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"--- Debug: Follow-up message history ---","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"  TextPart(This request doesn't require any tools. It's a simple echo request.\n\nI will respond directly.\n)","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"Message #3: role=\\MessageRole.user, content:","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"  TextPart(What value did I ask you to echo?)","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"Message #4: role=\\MessageRole.model, content:","type":"print","time":79488}
{"testID":315,"messageType":"print","message":"  TextPart(This request requires me to recall previous interactions. I do not have a specific tool for that. I will respond based on my memory of our conversation.\n\nThe value you asked me to echo was \"magic-value-123\".\n)","type":"print","time":79488}
{"testID":315,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":79488}
{"test":{"id":316,"name":"Message history and features tool result is referenced in later chat: OpenAI","suiteID":121,"groupIDs":[123,137],"metadata":{"skip":false,"skipReason":null},"line":857,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":79489}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:28.677226: [LangchainWrapper] Attempting to parse tool call from: \"To fulfill the request, I will simply echo back the given value.\n\nmagic-value-123\"","type":"print","time":80464}
{"testID":316,"messageType":"print","message":"--- Debug: Message history after first agent run (provider: \\openai:gpt-4o) ---","type":"print","time":80464}
{"testID":316,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":80464}
{"testID":316,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":80464}
{"testID":316,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":80464}
{"testID":316,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":80464}
{"testID":316,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":80464}
{"testID":316,"messageType":"print","message":"  TextPart(To fulfill the request, I will simply echo back the given value.\n\nmagic-value-123)","type":"print","time":80464}
{"testID":124,"messageType":"print","message":"INFO: 2025-06-26 16:57:29.626524: [LangchainWrapper] Attempting to parse tool call from: \"The value you asked me to echo was: \"magic-value-123\".\"","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"--- Debug: Follow-up output (provider: \\openai:gpt-4o) ---","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"Follow-up prompt: \\What value did I ask you to echo?","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"Follow-up output: \\The value you asked me to echo was: \"magic-value-123\".","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"--- Debug: Follow-up message history ---","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"  TextPart(To fulfill the request, I will simply echo back the given value.\n\nmagic-value-123)","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"Message #3: role=\\MessageRole.user, content:","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"  TextPart(What value did I ask you to echo?)","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"Message #4: role=\\MessageRole.model, content:","type":"print","time":81413}
{"testID":316,"messageType":"print","message":"  TextPart(The value you asked me to echo was: \"magic-value-123\".)","type":"print","time":81413}
{"testID":316,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":81413}
{"test":{"id":317,"name":"(tearDownAll)","suiteID":121,"groupIDs":[123],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":81414}
{"testID":317,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":81414}
{"success":false,"type":"done","time":81419}
