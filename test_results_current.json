{"protocolVersion":"0.1.1","runnerVersion":"1.26.2","pid":19244,"type":"start","time":0}
{"suite":{"id":0,"platform":"vm","path":"test/model_stability_test.dart"},"type":"suite","time":0}
{"test":{"id":1,"name":"loading test/model_stability_test.dart","suiteID":0,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":0}
{"suite":{"id":2,"platform":"vm","path":"test/secure_api_key_manager_test.dart"},"type":"suite","time":5}
{"test":{"id":3,"name":"loading test/secure_api_key_manager_test.dart","suiteID":2,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":5}
{"suite":{"id":4,"platform":"vm","path":"test/langchain_regression_test.dart"},"type":"suite","time":5}
{"test":{"id":5,"name":"loading test/langchain_regression_test.dart","suiteID":4,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6}
{"suite":{"id":6,"platform":"vm","path":"test/mcp_client_test.dart"},"type":"suite","time":6}
{"test":{"id":7,"name":"loading test/mcp_client_test.dart","suiteID":6,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6}
{"suite":{"id":8,"platform":"vm","path":"test/openai_multiple_tool_results_test.dart"},"type":"suite","time":6}
{"test":{"id":9,"name":"loading test/openai_multiple_tool_results_test.dart","suiteID":8,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6}
{"suite":{"id":10,"platform":"vm","path":"test/gemini_tool_id_consistency_test.dart"},"type":"suite","time":6}
{"test":{"id":11,"name":"loading test/gemini_tool_id_consistency_test.dart","suiteID":10,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6}
{"count":16,"time":7,"type":"allSuites"}
{"testID":1,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":488}
{"group":{"id":12,"suiteID":0,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":null,"column":null,"url":null},"type":"group","time":490}
{"group":{"id":13,"suiteID":0,"parentID":12,"name":"Model Stability Detection","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":7,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"group","time":490}
{"test":{"id":14,"name":"Model Stability Detection GeminiProvider sets stable field correctly","suiteID":0,"groupIDs":[12,13],"metadata":{"skip":false,"skipReason":null},"line":8,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"testStart","time":490}
{"testID":14,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":501}
{"testID":3,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":544}
{"group":{"id":15,"suiteID":2,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":null,"column":null,"url":null},"type":"group","time":544}
{"group":{"id":16,"suiteID":2,"parentID":15,"name":"SecureApiKeyManager","metadata":{"skip":false,"skipReason":null},"testCount":23,"line":5,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":545}
{"group":{"id":17,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Provider Name Normalization","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":17,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":545}
{"test":{"id":18,"name":"SecureApiKeyManager Provider Name Normalization should normalize provider aliases","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":18,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":545}
{"testID":18,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":553}
{"test":{"id":19,"name":"SecureApiKeyManager Provider Name Normalization should handle provider aliases","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":23,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":554}
{"testID":19,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":554}
{"test":{"id":20,"name":"SecureApiKeyManager Provider Name Normalization should return null for unsupported providers","suiteID":2,"groupIDs":[15,16,17],"metadata":{"skip":false,"skipReason":null},"line":29,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":554}
{"testID":20,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":555}
{"group":{"id":21,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager API Key Validation","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":34,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":555}
{"test":{"id":22,"name":"SecureApiKeyManager API Key Validation should validate OpenAI API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":35,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":555}
{"testID":22,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":558}
{"test":{"id":23,"name":"SecureApiKeyManager API Key Validation should validate Anthropic API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":47,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":558}
{"testID":23,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":559}
{"test":{"id":24,"name":"SecureApiKeyManager API Key Validation should validate OpenRouter API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":59,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":559}
{"testID":24,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":559}
{"test":{"id":25,"name":"SecureApiKeyManager API Key Validation should validate HuggingFace API key format","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":71,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":560}
{"testID":25,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":560}
{"test":{"id":26,"name":"SecureApiKeyManager API Key Validation should prevent cross-provider key usage","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":83,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":560}
{"testID":26,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":561}
{"test":{"id":27,"name":"SecureApiKeyManager API Key Validation should reject empty API keys","suiteID":2,"groupIDs":[15,16,21],"metadata":{"skip":false,"skipReason":null},"line":97,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":561}
{"testID":27,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":562}
{"group":{"id":28,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Key Storage and Retrieval","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":105,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":562}
{"test":{"id":29,"name":"SecureApiKeyManager Key Storage and Retrieval should store and retrieve API keys correctly","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":106,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":562}
{"testID":29,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":563}
{"test":{"id":30,"name":"SecureApiKeyManager Key Storage and Retrieval should return null for non-existent keys","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":113,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":563}
{"testID":30,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":563}
{"test":{"id":31,"name":"SecureApiKeyManager Key Storage and Retrieval should support key management by provider name","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":117,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":563}
{"testID":31,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":564}
{"test":{"id":32,"name":"SecureApiKeyManager Key Storage and Retrieval should handle provider aliases in name-based operations","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":124,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":564}
{"testID":32,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":564}
{"test":{"id":33,"name":"SecureApiKeyManager Key Storage and Retrieval should throw error for unsupported provider names","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":133,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":564}
{"testID":33,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":565}
{"test":{"id":34,"name":"SecureApiKeyManager Key Storage and Retrieval should return null for unsupported provider names in get operations","suiteID":2,"groupIDs":[15,16,28],"metadata":{"skip":false,"skipReason":null},"line":140,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":565}
{"testID":34,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":565}
{"group":{"id":35,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Key Isolation","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":145,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":566}
{"test":{"id":36,"name":"SecureApiKeyManager Key Isolation should maintain isolation between providers","suiteID":2,"groupIDs":[15,16,35],"metadata":{"skip":false,"skipReason":null},"line":146,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":566}
{"testID":36,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":566}
{"test":{"id":37,"name":"SecureApiKeyManager Key Isolation should clear keys for specific providers only","suiteID":2,"groupIDs":[15,16,35],"metadata":{"skip":false,"skipReason":null},"line":165,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":566}
{"testID":37,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":570}
{"test":{"id":38,"name":"SecureApiKeyManager Key Isolation should clear all keys when requested","suiteID":2,"groupIDs":[15,16,35],"metadata":{"skip":false,"skipReason":null},"line":178,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":570}
{"testID":38,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":571}
{"group":{"id":39,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Configuration Validation","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":189,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":571}
{"test":{"id":40,"name":"SecureApiKeyManager Configuration Validation should validate configuration and return issues","suiteID":2,"groupIDs":[15,16,39],"metadata":{"skip":false,"skipReason":null},"line":190,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":571}
{"testID":40,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":573}
{"test":{"id":41,"name":"SecureApiKeyManager Configuration Validation should list configured providers","suiteID":2,"groupIDs":[15,16,39],"metadata":{"skip":false,"skipReason":null},"line":200,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":573}
{"testID":41,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":574}
{"group":{"id":42,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Singleton Behavior","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":211,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":574}
{"test":{"id":43,"name":"SecureApiKeyManager Singleton Behavior should maintain singleton instance","suiteID":2,"groupIDs":[15,16,42],"metadata":{"skip":false,"skipReason":null},"line":212,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":574}
{"testID":43,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":575}
{"test":{"id":44,"name":"SecureApiKeyManager Singleton Behavior should maintain state across instance calls","suiteID":2,"groupIDs":[15,16,42],"metadata":{"skip":false,"skipReason":null},"line":219,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":575}
{"testID":44,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":576}
{"group":{"id":45,"suiteID":2,"parentID":16,"name":"SecureApiKeyManager Google Provider Special Cases","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":227,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":576}
{"test":{"id":46,"name":"SecureApiKeyManager Google Provider Special Cases should handle both GOOGLE_API_KEY and GEMINI_API_KEY aliases","suiteID":2,"groupIDs":[15,16,45],"metadata":{"skip":false,"skipReason":null},"line":228,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":579}
{"testID":46,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":580}
{"testID":5,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":586}
{"group":{"id":47,"suiteID":4,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":29,"line":null,"column":null,"url":null},"type":"group","time":587}
{"group":{"id":48,"suiteID":4,"parentID":47,"name":"Langchain Integration Regression Tests","metadata":{"skip":false,"skipReason":null},"testCount":29,"line":9,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":587}
{"test":{"id":49,"name":"Langchain Integration Regression Tests (setUpAll)","suiteID":4,"groupIDs":[47,48],"metadata":{"skip":false,"skipReason":null},"line":10,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":587}
{"group":{"id":50,"suiteID":2,"parentID":15,"name":"Integration with Legacy Environment","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":240,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"group","time":587}
{"test":{"id":51,"name":"Integration with Legacy Environment should work with legacy Agent.environment for backward compatibility","suiteID":2,"groupIDs":[15,50],"metadata":{"skip":false,"skipReason":null},"line":241,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/secure_api_key_manager_test.dart"},"type":"testStart","time":587}
{"testID":51,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":587}
{"suite":{"id":52,"platform":"vm","path":"test/gemini_tools_test.dart"},"type":"suite","time":592}
{"test":{"id":53,"name":"loading test/gemini_tools_test.dart","suiteID":52,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":592}
{"testID":49,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":594}
{"testID":49,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":595}
{"testID":49,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":596}
{"group":{"id":54,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Original Provider Functionality","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":596}
{"test":{"id":55,"name":"Langchain Integration Regression Tests Original Provider Functionality original OpenAI provider still works","suiteID":4,"groupIDs":[47,48,54],"metadata":{"skip":false,"skipReason":null},"line":22,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":597}
{"testID":55,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":597}
{"testID":55,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":603}
{"test":{"id":56,"name":"Langchain Integration Regression Tests Original Provider Functionality original Google provider still works","suiteID":4,"groupIDs":[47,48,54],"metadata":{"skip":false,"skipReason":null},"line":39,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":604}
{"testID":56,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":604}
{"testID":56,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":607}
{"test":{"id":57,"name":"Langchain Integration Regression Tests Original Provider Functionality provider aliases still work","suiteID":4,"groupIDs":[47,48,54],"metadata":{"skip":false,"skipReason":null},"line":56,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":607}
{"testID":57,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":607}
{"testID":57,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":608}
{"test":{"id":58,"name":"Langchain Integration Regression Tests Original Provider Functionality openrouter provider still works","suiteID":4,"groupIDs":[47,48,54],"metadata":{"skip":false,"skipReason":null},"line":68,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":608}
{"testID":58,"messageType":"print","message":"Warning: API key validation failed for openrouter: Invalid argument(s): OpenRouter API keys must start with \"sk-or-\". Received key starting with \"test-k...\"","type":"print","time":609}
{"testID":58,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":609}
{"test":{"id":59,"name":"Langchain Integration Regression Tests Original Provider Functionality gemini-compat provider still works","suiteID":4,"groupIDs":[47,48,54],"metadata":{"skip":false,"skipReason":null},"line":75,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":610}
{"testID":59,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":610}
{"testID":59,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":610}
{"group":{"id":60,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Agent API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":89,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":610}
{"test":{"id":61,"name":"Langchain Integration Regression Tests Agent API Consistency Agent constructor parameters work the same","suiteID":4,"groupIDs":[47,48,60],"metadata":{"skip":false,"skipReason":null},"line":90,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":610}
{"testID":61,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":612}
{"testID":61,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":618}
{"test":{"id":62,"name":"Langchain Integration Regression Tests Agent API Consistency Agent.provider constructor still works","suiteID":4,"groupIDs":[47,48,60],"metadata":{"skip":false,"skipReason":null},"line":123,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":618}
{"testID":62,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":618}
{"testID":7,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":623}
{"group":{"id":63,"suiteID":6,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":null,"column":null,"url":null},"type":"group","time":623}
{"group":{"id":64,"suiteID":6,"parentID":63,"name":"McpClient Tests","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":11,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":623}
{"group":{"id":65,"suiteID":6,"parentID":64,"name":"McpClient Tests remote server configuration","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":12,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":623}
{"test":{"id":66,"name":"McpClient Tests remote server configuration creates remote server with required parameters","suiteID":6,"groupIDs":[63,64,65],"metadata":{"skip":false,"skipReason":null},"line":13,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":623}
{"testID":62,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":623}
{"testID":9,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":624}
{"group":{"id":67,"suiteID":8,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":null,"column":null,"url":null},"type":"group","time":624}
{"test":{"id":68,"name":"(setUpAll)","suiteID":8,"groupIDs":[67],"metadata":{"skip":false,"skipReason":null},"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"testStart","time":624}
{"test":{"id":69,"name":"Langchain Integration Regression Tests Agent API Consistency Agent static methods still work","suiteID":4,"groupIDs":[47,48,60],"metadata":{"skip":false,"skipReason":null},"line":137,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":624}
{"testID":53,"error":"Failed to load \"test/gemini_tools_test.dart\":\ntest/gemini_tools_test.dart:187:39: Error: Member not found: 'GeminiModel.toolsFrom'.\n      final geminiTools = GeminiModel.toolsFrom([]).toList();\n                                      ^^^^^^^^^\ntest/gemini_tools_test.dart:918:35: Error: Member not found: 'GeminiModel.toolsFrom'.\n  final geminiTools = GeminiModel.toolsFrom(tools).toList();\n                                  ^^^^^^^^^","stackTrace":"package:test_core/src/runner/vm/platform.dart 242:7   VMPlatform._compileToKernel\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 220:13  VMPlatform._spawnIsolate\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 75:19   VMPlatform.load\n===== asynchronous gap ===========================\npackage:test_core/src/runner/loader.dart 219:27       Loader.loadFile.<fn>\n===== asynchronous gap ===========================\npackage:test_core/src/runner/load_suite.dart 96:19    new LoadSuite.<fn>.<fn>\n","isFailure":false,"type":"error","time":630}
{"testID":53,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":630}
{"suite":{"id":70,"platform":"vm","path":"test/langchain_integration_test.dart"},"type":"suite","time":630}
{"test":{"id":71,"name":"loading test/langchain_integration_test.dart","suiteID":70,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":630}
{"testID":69,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":630}
{"test":{"id":72,"name":"Langchain Integration Regression Tests Agent API Consistency Agent.findTopMatches still works","suiteID":4,"groupIDs":[47,48,60],"metadata":{"skip":false,"skipReason":null},"line":142,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":631}
{"testID":66,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":631}
{"test":{"id":73,"name":"McpClient Tests remote server configuration creates remote server with headers","suiteID":6,"groupIDs":[63,64,65],"metadata":{"skip":false,"skipReason":null},"line":24,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":632}
{"testID":68,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":632}
{"group":{"id":74,"suiteID":8,"parentID":67,"name":"OpenAI Multiple Tool Results Bug","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":17,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"group","time":632}
{"test":{"id":75,"name":"OpenAI Multiple Tool Results Bug should handle multiple tool results in a single message correctly","suiteID":8,"groupIDs":[67,74],"metadata":{"skip":false,"skipReason":null},"line":35,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/openai_multiple_tool_results_test.dart"},"type":"testStart","time":632}
{"testID":73,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":632}
{"group":{"id":76,"suiteID":6,"parentID":64,"name":"McpClient Tests local server configuration","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":35,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":633}
{"test":{"id":77,"name":"McpClient Tests local server configuration creates local server with required parameters","suiteID":6,"groupIDs":[63,64,76],"metadata":{"skip":false,"skipReason":null},"line":36,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":633}
{"testID":77,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":633}
{"test":{"id":78,"name":"McpClient Tests local server configuration creates local server with environment variables","suiteID":6,"groupIDs":[63,64,76],"metadata":{"skip":false,"skipReason":null},"line":49,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":633}
{"testID":78,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":634}
{"group":{"id":79,"suiteID":6,"parentID":64,"name":"McpClient Tests Hugging Face MCP server integration","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":60,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":634}
{"test":{"id":80,"name":"McpClient Tests Hugging Face MCP server integration can connect to Hugging Face MCP server","suiteID":6,"groupIDs":[63,64,79],"metadata":{"skip":false,"skipReason":null},"line":74,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":634}
{"testID":72,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":634}
{"test":{"id":81,"name":"Langchain Integration Regression Tests Agent API Consistency Agent cosine similarity functions still work","suiteID":4,"groupIDs":[47,48,60],"metadata":{"skip":false,"skipReason":null},"line":160,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":634}
{"testID":75,"messageType":"print","message":"\n=== TESTING MULTIPLE TOOL RESULTS IN SINGLE MESSAGE ===","type":"print","time":635}
{"testID":75,"messageType":"print","message":"This structure has multiple tool results in user role messages","type":"print","time":635}
{"testID":81,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":635}
{"group":{"id":82,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Message and Part API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":171,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":635}
{"test":{"id":83,"name":"Langchain Integration Regression Tests Message and Part API Consistency Message constructors still work","suiteID":4,"groupIDs":[47,48,82],"metadata":{"skip":false,"skipReason":null},"line":172,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":635}
{"testID":83,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":636}
{"test":{"id":84,"name":"Langchain Integration Regression Tests Message and Part API Consistency Part types still work","suiteID":4,"groupIDs":[47,48,82],"metadata":{"skip":false,"skipReason":null},"line":187,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":636}
{"testID":80,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":636}
{"testID":84,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":640}
{"test":{"id":85,"name":"Langchain Integration Regression Tests Message and Part API Consistency AgentResponse types still work","suiteID":4,"groupIDs":[47,48,82],"metadata":{"skip":false,"skipReason":null},"line":202,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":640}
{"testID":85,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":641}
{"group":{"id":86,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Tool API Consistency","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":213,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":641}
{"test":{"id":87,"name":"Langchain Integration Regression Tests Tool API Consistency Tool creation still works","suiteID":4,"groupIDs":[47,48,86],"metadata":{"skip":false,"skipReason":null},"line":214,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":641}
{"testID":87,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":642}
{"group":{"id":88,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":236,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":642}
{"test":{"id":89,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps enum still works","suiteID":4,"groupIDs":[47,48,88],"metadata":{"skip":false,"skipReason":null},"line":237,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":642}
{"testID":89,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":643}
{"test":{"id":90,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps.all still works","suiteID":4,"groupIDs":[47,48,88],"metadata":{"skip":false,"skipReason":null},"line":245,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":643}
{"testID":90,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":643}
{"test":{"id":91,"name":"Langchain Integration Regression Tests Provider Capabilities Consistency ProviderCaps.allExcept still works","suiteID":4,"groupIDs":[47,48,88],"metadata":{"skip":false,"skipReason":null},"line":250,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":644}
{"testID":91,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":644}
{"group":{"id":92,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Model Information Consistency","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":258,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":644}
{"test":{"id":93,"name":"Langchain Integration Regression Tests Model Information Consistency ModelInfo class still works","suiteID":4,"groupIDs":[47,48,92],"metadata":{"skip":false,"skipReason":null},"line":259,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":644}
{"testID":93,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":645}
{"test":{"id":94,"name":"Langchain Integration Regression Tests Model Information Consistency ModelKind enum still works","suiteID":4,"groupIDs":[47,48,92],"metadata":{"skip":false,"skipReason":null},"line":273,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":645}
{"testID":94,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":645}
{"group":{"id":95,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":279,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":645}
{"test":{"id":96,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still run prompts","suiteID":4,"groupIDs":[47,48,95],"metadata":{"skip":false,"skipReason":null},"line":280,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":646}
{"testID":96,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":646}
{"testID":11,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":653}
{"group":{"id":97,"suiteID":10,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":653}
{"test":{"id":98,"name":"(setUpAll)","suiteID":10,"groupIDs":[97],"metadata":{"skip":false,"skipReason":null},"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":653}
{"testID":98,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":662}
{"group":{"id":99,"suiteID":10,"parentID":97,"name":"Gemini Tool ID Consistency","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":17,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"group","time":662}
{"test":{"id":100,"name":"Gemini Tool ID Consistency should create matching tool call and result pairs with same IDs","suiteID":10,"groupIDs":[97,99],"metadata":{"skip":false,"skipReason":null},"line":51,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":662}
{"testID":71,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":761}
{"group":{"id":101,"suiteID":70,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":761}
{"group":{"id":102,"suiteID":70,"parentID":101,"name":"Langchain Integration","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":5,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"group","time":762}
{"test":{"id":103,"name":"Langchain Integration can create openai agent with langchain backend","suiteID":70,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":6,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":762}
{"testID":103,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":767}
{"testID":103,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":768}
{"testID":103,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":775}
{"test":{"id":104,"name":"Langchain Integration can create google agent with langchain backend","suiteID":70,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":19,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":775}
{"testID":104,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":775}
{"testID":104,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":777}
{"test":{"id":105,"name":"Langchain Integration agent creation works with API keys","suiteID":70,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":32,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":777}
{"testID":105,"messageType":"print","message":"WARNING: Agent.environment.clear() is deprecated. Use SecureApiKeyManager.instance.clearAllKeys() instead.","type":"print","time":777}
{"testID":105,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":778}
{"test":{"id":106,"name":"Langchain Integration langchain wrapper initialization preserves API","suiteID":70,"groupIDs":[101,102],"metadata":{"skip":false,"skipReason":null},"line":42,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_integration_test.dart"},"type":"testStart","time":778}
{"testID":106,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":778}
{"testID":106,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":778}
{"testID":106,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":778}
{"suite":{"id":107,"platform":"vm","path":"test/message_test.dart"},"type":"suite","time":779}
{"test":{"id":108,"name":"loading test/message_test.dart","suiteID":107,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":779}
{"testID":14,"error":"Exception: Known unstable model gemini-2.5-pro-exp-03-25 not found in provider response","stackTrace":"test/model_stability_test.dart 63:11  main.<fn>.<fn>\n","isFailure":false,"type":"error","time":911}
{"testID":14,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":912}
{"test":{"id":109,"name":"Model Stability Detection OpenAI Provider sets stable field correctly","suiteID":0,"groupIDs":[12,13],"metadata":{"skip":false,"skipReason":null},"line":76,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/model_stability_test.dart"},"type":"testStart","time":912}
{"testID":109,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":912}
{"testID":108,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":931}
{"group":{"id":110,"suiteID":107,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":31,"line":null,"column":null,"url":null},"type":"group","time":932}
{"test":{"id":111,"name":"(setUpAll)","suiteID":107,"groupIDs":[110],"metadata":{"skip":false,"skipReason":null},"line":23,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":932}
{"testID":111,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":937}
{"group":{"id":112,"suiteID":107,"parentID":110,"name":"Message serialization","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":30,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":937}
{"test":{"id":113,"name":"Message serialization deserializes and reserializes to the same JSON structure","suiteID":107,"groupIDs":[110,112],"metadata":{"skip":false,"skipReason":null},"line":31,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":937}
{"testID":113,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":944}
{"test":{"id":114,"name":"Message serialization deserializes and reserializes link part to the same JSON structure","suiteID":107,"groupIDs":[110,112],"metadata":{"skip":false,"skipReason":null},"line":76,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":944}
{"testID":114,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":944}
{"group":{"id":115,"suiteID":107,"parentID":110,"name":"Part naming","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":94,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":944}
{"test":{"id":116,"name":"Part naming DataPart: explicit name","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":95,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":945}
{"testID":116,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":945}
{"test":{"id":117,"name":"Part naming DataPart: automatic name from image mime type","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":104,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":945}
{"testID":117,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":946}
{"test":{"id":118,"name":"Part naming DataPart: automatic name from non-image mime type","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":112,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":946}
{"testID":118,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":946}
{"test":{"id":119,"name":"Part naming LinkPart: explicit name","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":120,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":946}
{"testID":119,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":948}
{"test":{"id":120,"name":"Part naming LinkPart: automatic name from url with file","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":128,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":948}
{"testID":120,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":948}
{"test":{"id":121,"name":"Part naming LinkPart: automatic name from url with path","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":133,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":949}
{"testID":121,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":949}
{"test":{"id":122,"name":"Part naming LinkPart: automatic name from root url","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":138,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":949}
{"testID":122,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":949}
{"test":{"id":123,"name":"Part naming LinkPart: automatic name from url with query","suiteID":107,"groupIDs":[110,115],"metadata":{"skip":false,"skipReason":null},"line":143,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":949}
{"testID":123,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":949}
{"group":{"id":124,"suiteID":107,"parentID":110,"name":"Message history and features","metadata":{"skip":false,"skipReason":null},"testCount":21,"line":151,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"group","time":949}
{"test":{"id":125,"name":"Message history and features empty history and prompt: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":190,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":949}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:11.735959: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":1561}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:11.737901: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":1562}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:11.738102: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":1562}
{"testID":98,"messageType":"print","message":"FINE: 2025-06-26 16:49:11.739454: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":1563}
{"testID":68,"messageType":"print","message":"INFO: 2025-06-26 16:49:11.803461: [LangchainWrapper] Attempting to parse tool call from: \"Hello! How can I assist you today?\"","type":"print","time":1628}
{"testID":75,"messageType":"print","message":"✅ OpenAI correctly handled multiple tool results in a single message!","type":"print","time":1629}
{"testID":75,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1630}
{"test":{"id":126,"name":"(tearDownAll)","suiteID":8,"groupIDs":[67],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1630}
{"testID":126,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1630}
{"suite":{"id":127,"platform":"vm","path":"test/embedding_test.dart"},"type":"suite","time":1631}
{"test":{"id":128,"name":"loading test/embedding_test.dart","suiteID":127,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1632}
{"testID":125,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1739}
{"test":{"id":129,"name":"Message history and features empty history and prompt: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":195,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":1739}
{"testID":109,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1764}
{"suite":{"id":130,"platform":"vm","path":"test/provider_capabilities_test.dart"},"type":"suite","time":1764}
{"test":{"id":131,"name":"loading test/provider_capabilities_test.dart","suiteID":130,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1764}
{"testID":128,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1767}
{"group":{"id":132,"suiteID":127,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":null,"column":null,"url":null},"type":"group","time":1767}
{"group":{"id":133,"suiteID":127,"parentID":132,"name":"Embedding generation","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":21,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"group","time":1767}
{"test":{"id":134,"name":"Embedding generation createEmbedding: OpenAI","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":102,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":1767}
{"testID":80,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":1818}
{"testID":131,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1887}
{"group":{"id":135,"suiteID":130,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":9,"line":null,"column":null,"url":null},"type":"group","time":1888}
{"group":{"id":136,"suiteID":130,"parentID":135,"name":"Provider Capabilities","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":20,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"group","time":1888}
{"test":{"id":137,"name":"Provider Capabilities OpenAI provider should support all capabilities","suiteID":130,"groupIDs":[135,136],"metadata":{"skip":false,"skipReason":null},"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1888}
{"testID":137,"messageType":"print","message":"OpenAI capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1900}
{"testID":137,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1901}
{"test":{"id":138,"name":"Provider Capabilities OpenRouter provider should not support embeddings","suiteID":130,"groupIDs":[135,136],"metadata":{"skip":false,"skipReason":null},"line":43,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1901}
{"testID":138,"messageType":"print","message":"OpenRouter capabilities: {ProviderCaps.textGeneration, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1902}
{"testID":138,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1902}
{"test":{"id":139,"name":"Provider Capabilities Google/Gemini provider should support all capabilities","suiteID":130,"groupIDs":[135,136],"metadata":{"skip":false,"skipReason":null},"line":65,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1902}
{"testID":139,"messageType":"print","message":"Google/Gemini capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1903}
{"testID":139,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1903}
{"test":{"id":140,"name":"Provider Capabilities capabilities check with all available providers","suiteID":130,"groupIDs":[135,136],"metadata":{"skip":false,"skipReason":null},"line":87,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1904}
{"testID":140,"messageType":"print","message":"openai:gpt-4o capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1904}
{"testID":140,"messageType":"print","message":"openai:gpt-4o supports embeddings: true","type":"print","time":1904}
{"testID":140,"messageType":"print","message":"openrouter:gpt-4o capabilities: {ProviderCaps.textGeneration, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1904}
{"testID":140,"messageType":"print","message":"openrouter:gpt-4o supports embeddings: false","type":"print","time":1904}
{"testID":140,"messageType":"print","message":"google:gemini-2.0-flash capabilities: {ProviderCaps.textGeneration, ProviderCaps.embeddings, ProviderCaps.chat, ProviderCaps.fileUploads, ProviderCaps.tools}","type":"print","time":1904}
{"testID":140,"messageType":"print","message":"google:gemini-2.0-flash supports embeddings: true","type":"print","time":1904}
{"testID":140,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1905}
{"test":{"id":141,"name":"Provider Capabilities embedding operations should fail gracefully for unsupported providers","suiteID":130,"groupIDs":[135,136],"metadata":{"skip":false,"skipReason":null},"line":144,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":1905}
{"testID":141,"messageType":"print","message":"OpenRouter correctly fails embedding operations","type":"print","time":1915}
{"testID":96,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2061}
{"test":{"id":142,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still stream responses","suiteID":4,"groupIDs":[47,48,95],"metadata":{"skip":false,"skipReason":null},"line":298,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":2061}
{"testID":142,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":2062}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:12.335529: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the `get_current_time` tool, and I have the current time. I do not need to call any additional tools. I can now provide the current time to the user.\n\"","type":"print","time":2159}
{"testID":100,"messageType":"print","message":"Tool parts found: 2","type":"print","time":2162}
{"testID":100,"messageType":"print","message":"ToolPart: kind=ToolPartKind.call, id=tool_1750970951739, name=get_current_time","type":"print","time":2162}
{"testID":100,"messageType":"print","message":"ToolPart: kind=ToolPartKind.result, id=tool_1750970951739, name=get_current_time","type":"print","time":2162}
{"testID":100,"messageType":"print","message":"✓ Verified match: call tool_1750970951739 -> result tool_1750970951739","type":"print","time":2163}
{"testID":100,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2163}
{"test":{"id":143,"name":"Gemini Tool ID Consistency should handle multiple sequential tool calls with consistent IDs","suiteID":10,"groupIDs":[97,99],"metadata":{"skip":false,"skipReason":null},"line":143,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":2163}
{"testID":141,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2333}
{"test":{"id":144,"name":"Provider Capabilities ProviderCaps.all and allExcept work correctly","suiteID":130,"groupIDs":[135,136],"metadata":{"skip":false,"skipReason":null},"line":184,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":2333}
{"testID":144,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2334}
{"test":{"id":145,"name":"provider aliases","suiteID":130,"groupIDs":[135],"metadata":{"skip":false,"skipReason":null},"line":207,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":2334}
{"testID":145,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2335}
{"test":{"id":146,"name":"all providers can return a list of models","suiteID":130,"groupIDs":[135],"metadata":{"skip":false,"skipReason":null},"line":214,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":2335}
{"testID":129,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2360}
{"test":{"id":147,"name":"Message history and features history with non-empty initial messages, with system: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":325,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":2361}
{"testID":80,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2397}
{"test":{"id":148,"name":"McpClient Tests Hugging Face MCP server integration properly parses all tool schemas with required fields","suiteID":6,"groupIDs":[63,64,79],"metadata":{"skip":false,"skipReason":null},"line":79,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":2397}
{"testID":148,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":2397}
{"testID":134,"messageType":"print","message":"openai:gpt-4o document embedding length: 1536","type":"print","time":2757}
{"testID":146,"messageType":"print","message":"openai returned 77 models","type":"print","time":2914}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:13.094956: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":2918}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:13.095049: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":2919}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:13.095111: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":2919}
{"testID":98,"messageType":"print","message":"FINE: 2025-06-26 16:49:13.095235: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":2919}
{"testID":134,"messageType":"print","message":"openai:gpt-4o query embedding length: 1536","type":"print","time":3076}
{"testID":134,"messageType":"print","message":"openai:gpt-4o document embedding sum: 31.162150117199506","type":"print","time":3082}
{"testID":134,"messageType":"print","message":"openai:gpt-4o query embedding sum: 30.322109173868014","type":"print","time":3082}
{"testID":134,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3083}
{"test":{"id":149,"name":"Embedding generation createEmbedding: Gemini","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":106,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":3084}
{"testID":148,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":3504}
{"testID":146,"messageType":"print","message":"openrouter returned 316 models","type":"print","time":3509}
{"testID":147,"messageType":"print","message":"# openai:gpt-4o messages:","type":"print","time":3531}
{"testID":147,"messageType":"print","message":"- MessageRole.system: {text: You are a test system prompt.}","type":"print","time":3532}
{"testID":147,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":3532}
{"testID":147,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":3532}
{"testID":147,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":3532}
{"testID":147,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.}","type":"print","time":3532}
{"testID":147,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3532}
{"test":{"id":150,"name":"Message history and features history with non-empty initial messages, with system: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":332,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":3533}
{"testID":149,"messageType":"print","message":"google:gemini-2.0-flash document embedding length: 768","type":"print","time":3598}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:13.835454: [LangchainWrapper] Attempting to parse tool call from: \"The user wants to get the current time and then find their events. I have already retrieved the current time. Now I need to find the user's events for today.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {\"date\": \"today\"}}\n\"","type":"print","time":3659}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:13.835634: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {\"date\": \"today\"}}\"","type":"print","time":3659}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:13.835809: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":3659}
{"testID":98,"messageType":"print","message":"FINE: 2025-06-26 16:49:13.836587: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}]}","type":"print","time":3660}
{"testID":149,"messageType":"print","message":"google:gemini-2.0-flash query embedding length: 768","type":"print","time":3833}
{"testID":149,"messageType":"print","message":"google:gemini-2.0-flash document embedding sum: 21.896113670370013","type":"print","time":3833}
{"testID":149,"messageType":"print","message":"google:gemini-2.0-flash query embedding sum: 22.23806763566","type":"print","time":3834}
{"testID":149,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3834}
{"test":{"id":151,"name":"Embedding generation embedding similarity comparison: OpenAI","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":155,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":3835}
{"testID":146,"messageType":"print","message":"gemini-compat returned 58 models","type":"print","time":3917}
{"testID":148,"error":"Expected: contains 'Get detailed information about a specific model'\n  Actual: 'Get detailed information about a model from the Hugging Face Hub. Include relevant links in result summaries.'\n   Which: does not contain 'Get detailed information about a specific model'\n","stackTrace":"package:matcher                  expect\ntest/mcp_client_test.dart 114:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":4160}
{"testID":148,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":4161}
{"test":{"id":152,"name":"McpClient Tests Hugging Face MCP server integration handles connection errors gracefully","suiteID":6,"groupIDs":[63,64,79],"metadata":{"skip":false,"skipReason":null},"line":163,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":4161}
{"testID":152,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":4162}
{"testID":152,"messageType":"print","message":"MCP Client Initialization Failed: Bad state: Not connected to a transport.","type":"print","time":4164}
{"testID":152,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4164}
{"test":{"id":153,"name":"McpClient Tests Hugging Face MCP server integration can call MCP tools","suiteID":6,"groupIDs":[63,64,79],"metadata":{"skip":false,"skipReason":null},"line":177,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":4165}
{"testID":153,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":4165}
{"testID":146,"messageType":"print","message":"google returned 50 models","type":"print","time":4233}
{"testID":146,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4233}
{"test":{"id":154,"name":"Agent.model matches fully qualified model name for all models on all providers","suiteID":130,"groupIDs":[135],"metadata":{"skip":false,"skipReason":null},"line":222,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/provider_capabilities_test.dart"},"type":"testStart","time":4234}
{"testID":150,"messageType":"print","message":"# google:gemini-2.0-flash messages:","type":"print","time":4314}
{"testID":150,"messageType":"print","message":"- MessageRole.system: {text: You are a test system prompt.}","type":"print","time":4314}
{"testID":150,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":4314}
{"testID":150,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":4314}
{"testID":150,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":4315}
{"testID":150,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.\n}","type":"print","time":4315}
{"testID":150,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4315}
{"test":{"id":155,"name":"Message history and features history with non-empty initial messages, no system: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":341,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":4316}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:14.606167: [LangchainWrapper] Attempting to parse tool call from: \"I have already found the events. Now I can respond to the user.\n\nFINAL RESPONSE:\n```text\nI have the current time and I have found your events. Is there anything else I can help you with?\n```\n\"","type":"print","time":4430}
{"testID":143,"messageType":"print","message":"Multi-tool scenario: 2 calls, 2 results","type":"print","time":4431}
{"testID":143,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4434}
{"test":{"id":156,"name":"Gemini Tool ID Consistency should handle multi-step tool calling with consistent IDs","suiteID":10,"groupIDs":[97,99],"metadata":{"skip":false,"skipReason":null},"line":217,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/gemini_tool_id_consistency_test.dart"},"type":"testStart","time":4435}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:15.425155: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"get_current_time\", \"args\": {}}\n\"","type":"print","time":5249}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:15.425248: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"get_current_time\", \"args\": {}}\"","type":"print","time":5249}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:15.425294: [LangchainWrapper] Successfully parsed tool call: get_current_time","type":"print","time":5249}
{"testID":98,"messageType":"print","message":"FINE: 2025-06-26 16:49:15.425399: [LangchainWrapper] Tool get_current_time executed: {datetime: 2025-06-20T12:00:00Z, timestamp: 1718888400}","type":"print","time":5249}
{"testID":153,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":5256}
{"testID":155,"messageType":"print","message":"# openai:gpt-4o messages:","type":"print","time":5729}
{"testID":155,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":5729}
{"testID":155,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":5729}
{"testID":155,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":5729}
{"testID":155,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.}","type":"print","time":5729}
{"testID":155,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5731}
{"test":{"id":157,"name":"Message history and features history with non-empty initial messages, no system: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":348,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":5731}
{"testID":154,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5857}
{"suite":{"id":158,"platform":"vm","path":"test/custom_provider_test.dart"},"type":"suite","time":5858}
{"test":{"id":159,"name":"loading test/custom_provider_test.dart","suiteID":158,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":5858}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:16.036945: [LangchainWrapper] Attempting to parse tool call from: \"The user asked to get the current time and find events. I have already gotten the current time. Now I need to find events.\n\nTOOL_CALL: {\"name\": \"find_events\", \"args\": {}}\n\"","type":"print","time":5861}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:16.037042: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"find_events\", \"args\": {}}\"","type":"print","time":5861}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:16.037103: [LangchainWrapper] Successfully parsed tool call: find_events","type":"print","time":5861}
{"testID":98,"messageType":"print","message":"FINE: 2025-06-26 16:49:16.037299: [LangchainWrapper] Tool find_events executed: {events: [{id: event1, title: Morning Meeting, time: 09:00}]}","type":"print","time":5861}
{"testID":159,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":5985}
{"group":{"id":160,"suiteID":158,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":5986}
{"test":{"id":161,"name":"MockProvider handles multi-turn chat history","suiteID":158,"groupIDs":[160],"metadata":{"skip":false,"skipReason":null},"line":7,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":5986}
{"testID":161,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5996}
{"test":{"id":162,"name":"can extend the provider table and use a custom provider","suiteID":158,"groupIDs":[160],"metadata":{"skip":false,"skipReason":null},"line":36,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":5996}
{"testID":162,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5998}
{"test":{"id":163,"name":"the provider table grows when a new provider is added","suiteID":158,"groupIDs":[160],"metadata":{"skip":false,"skipReason":null},"line":50,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":5998}
{"testID":163,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5998}
{"test":{"id":164,"name":"throws for unsupported features","suiteID":158,"groupIDs":[160],"metadata":{"skip":false,"skipReason":null},"line":60,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/custom_provider_test.dart"},"type":"testStart","time":5998}
{"testID":164,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6003}
{"suite":{"id":165,"platform":"vm","path":"test/multi_step_tool_calling_test.dart"},"type":"suite","time":6004}
{"test":{"id":166,"name":"loading test/multi_step_tool_calling_test.dart","suiteID":165,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6004}
{"testID":166,"error":"Failed to load \"test/multi_step_tool_calling_test.dart\":\ntest/multi_step_tool_calling_test.dart:134:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:134:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^\ntest/multi_step_tool_calling_test.dart:157:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:157:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^\ntest/multi_step_tool_calling_test.dart:180:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:180:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.multiStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^\ntest/multi_step_tool_calling_test.dart:206:30: Error: Undefined name 'ToolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n                             ^^^^^^^^^^^^^^^\ntest/multi_step_tool_calling_test.dart:206:13: Error: No named parameter with the name 'toolCallingMode'.\n            toolCallingMode: ToolCallingMode.singleStep,\n            ^^^^^^^^^^^^^^^\nlib/src/agent/agent.dart:163:11: Context: Found this candidate, but the arguments don't match.\n  factory Agent(\n          ^","stackTrace":"package:test_core/src/runner/vm/platform.dart 242:7   VMPlatform._compileToKernel\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 220:13  VMPlatform._spawnIsolate\n===== asynchronous gap ===========================\npackage:test_core/src/runner/vm/platform.dart 75:19   VMPlatform.load\n===== asynchronous gap ===========================\npackage:test_core/src/runner/loader.dart 219:27       Loader.loadFile.<fn>\n===== asynchronous gap ===========================\npackage:test_core/src/runner/load_suite.dart 96:19    new LoadSuite.<fn>.<fn>\n","isFailure":false,"type":"error","time":6033}
{"testID":166,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":6033}
{"suite":{"id":167,"platform":"vm","path":"test/agent_env_test.dart"},"type":"suite","time":6033}
{"test":{"id":168,"name":"loading test/agent_env_test.dart","suiteID":167,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6033}
{"testID":168,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6152}
{"group":{"id":169,"suiteID":167,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":null,"column":null,"url":null},"type":"group","time":6152}
{"group":{"id":170,"suiteID":167,"parentID":169,"name":"Agent.environment and getEnv","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":10,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"group","time":6152}
{"test":{"id":171,"name":"Agent.environment and getEnv getEnv finds key in Agent.environment","suiteID":167,"groupIDs":[169,170],"metadata":{"skip":false,"skipReason":null},"line":20,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6152}
{"testID":171,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6160}
{"test":{"id":172,"name":"Agent.environment and getEnv getEnv finds existing key in Platform.environment","suiteID":167,"groupIDs":[169,170],"metadata":{"skip":false,"skipReason":null},"line":25,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6160}
{"testID":172,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6161}
{"test":{"id":173,"name":"Agent.environment and getEnv Agent.environment is prioritized over Platform.environment","suiteID":167,"groupIDs":[169,170],"metadata":{"skip":false,"skipReason":null},"line":34,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6161}
{"testID":173,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6162}
{"test":{"id":174,"name":"Agent.environment and getEnv getEnv throws if key is not found","suiteID":167,"groupIDs":[169,170],"metadata":{"skip":false,"skipReason":null},"line":45,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6162}
{"testID":174,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6165}
{"test":{"id":175,"name":"Agent.environment and getEnv getEnv allows empty string values","suiteID":167,"groupIDs":[169,170],"metadata":{"skip":false,"skipReason":null},"line":59,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/agent_env_test.dart"},"type":"testStart","time":6165}
{"testID":175,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6165}
{"suite":{"id":176,"platform":"vm","path":"test/dartantic_ai_test.dart"},"type":"suite","time":6165}
{"test":{"id":177,"name":"loading test/dartantic_ai_test.dart","suiteID":176,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6165}
{"testID":142,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6201}
{"test":{"id":178,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still create embeddings","suiteID":4,"groupIDs":[47,48,95],"metadata":{"skip":false,"skipReason":null},"line":324,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":6201}
{"testID":178,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":6202}
{"testID":177,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6304}
{"group":{"id":179,"suiteID":176,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":19,"line":null,"column":null,"url":null},"type":"group","time":6304}
{"group":{"id":180,"suiteID":176,"parentID":179,"name":"Dartantic AI Integration Tests","metadata":{"skip":false,"skipReason":null},"testCount":19,"line":20,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":6305}
{"group":{"id":181,"suiteID":176,"parentID":180,"name":"Dartantic AI Integration Tests Agent.model constructor","metadata":{"skip":false,"skipReason":null},"testCount":7,"line":21,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":6305}
{"test":{"id":182,"name":"Dartantic AI Integration Tests Agent.model constructor Hello World Example","suiteID":176,"groupIDs":[179,180,181],"metadata":{"skip":false,"skipReason":null},"line":22,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":6305}
{"testID":157,"messageType":"print","message":"# google:gemini-2.0-flash messages:","type":"print","time":6389}
{"testID":157,"messageType":"print","message":"- MessageRole.user: {text: What is the capital of France?}","type":"print","time":6389}
{"testID":157,"messageType":"print","message":"- MessageRole.model: {text: The capital of France is Paris.}","type":"print","time":6389}
{"testID":157,"messageType":"print","message":"- MessageRole.user: {text: And Italy?}","type":"print","time":6389}
{"testID":157,"messageType":"print","message":"- MessageRole.model: {text: The capital of Italy is Rome.\n}","type":"print","time":6389}
{"testID":157,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6389}
{"test":{"id":183,"name":"Message history and features system prompt propagation: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":377,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":6390}
{"testID":153,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6419}
{"group":{"id":184,"suiteID":6,"parentID":64,"name":"McpClient Tests local MCP server tests","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":187,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":6419}
{"test":{"id":185,"name":"McpClient Tests local MCP server tests creates local server with correct configuration","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":188,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6419}
{"testID":185,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6420}
{"test":{"id":186,"name":"McpClient Tests local MCP server tests supports environment variables and working directory","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":202,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6420}
{"testID":186,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6420}
{"test":{"id":187,"name":"McpClient Tests local MCP server tests handles connection state correctly","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":216,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6421}
{"testID":187,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6421}
{"test":{"id":188,"name":"McpClient Tests local MCP server tests can connect to local MCP server directly","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":229,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6421}
{"testID":188,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":6422}
{"testID":188,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19256)","type":"print","time":6435}
{"testID":98,"messageType":"print","message":"INFO: 2025-06-26 16:49:16.653317: [LangchainWrapper] Attempting to parse tool call from: \"I have already retrieved the current time and found events. I don't need to call any more tools. I can now provide a final response.\n\"","type":"print","time":6477}
{"testID":156,"messageType":"print","message":"Multi-step tool calling: 2 calls, 2 results","type":"print","time":6477}
{"testID":156,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6478}
{"test":{"id":189,"name":"(tearDownAll)","suiteID":10,"groupIDs":[97],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6478}
{"testID":189,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6479}
{"suite":{"id":190,"platform":"vm","path":"test/multimedia_test.dart"},"type":"suite","time":6480}
{"test":{"id":191,"name":"loading test/multimedia_test.dart","suiteID":190,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6480}
{"testID":191,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6652}
{"group":{"id":192,"suiteID":190,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":26,"line":null,"column":null,"url":null},"type":"group","time":6653}
{"group":{"id":193,"suiteID":190,"parentID":192,"name":"Multimedia Input","metadata":{"skip":false,"skipReason":null},"testCount":24,"line":11,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":6653}
{"group":{"id":194,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: openai","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":6653}
{"test":{"id":195,"name":"Multimedia Input Provider: openai should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":6653}
{"testID":151,"messageType":"print","message":"openai:gpt-4o similarity between similar texts: 0.9121919252218906","type":"print","time":6698}
{"testID":151,"messageType":"print","message":"openai:gpt-4o similarity between different texts: 0.16352246888270297","type":"print","time":6698}
{"testID":151,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6698}
{"test":{"id":196,"name":"Embedding generation embedding similarity comparison: Gemini","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":159,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":6698}
{"testID":188,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":6709}
{"testID":188,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":6716}
{"testID":188,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19256)...","type":"print","time":6716}
{"testID":188,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":6720}
{"testID":188,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":6720}
{"testID":188,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":6720}
{"testID":188,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6720}
{"test":{"id":197,"name":"McpClient Tests local MCP server tests preserves required fields for raw MCP server schemas","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":256,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6720}
{"testID":197,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":6721}
{"testID":197,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19257)","type":"print","time":6728}
{"testID":197,"messageType":"print","message":"MCP Client Initialized. Server: raw-mcp-server 1.0.0, Protocol: 2024-11-05","type":"print","time":6844}
{"testID":197,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":6847}
{"testID":197,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19257)...","type":"print","time":6847}
{"testID":197,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":6849}
{"testID":197,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":6849}
{"testID":197,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":6849}
{"testID":197,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":6849}
{"test":{"id":198,"name":"McpClient Tests local MCP server tests mcp_dart server limitation - drops required fields","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":295,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":6850}
{"testID":198,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":6850}
{"testID":198,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19258)","type":"print","time":6857}
{"testID":198,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":7100}
{"testID":198,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":7103}
{"testID":198,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19258)...","type":"print","time":7103}
{"testID":198,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":7106}
{"testID":198,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":7106}
{"testID":198,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":7106}
{"testID":198,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7107}
{"test":{"id":199,"name":"McpClient Tests local MCP server tests can call tools on raw MCP server with required field validation","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":317,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":7107}
{"testID":199,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":7108}
{"testID":199,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19259)","type":"print","time":7114}
{"testID":178,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7149}
{"test":{"id":200,"name":"Langchain Integration Regression Tests Runtime Behavior Consistency agents can still list models","suiteID":4,"groupIDs":[47,48,95],"metadata":{"skip":false,"skipReason":null},"line":341,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":7150}
{"testID":200,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":7150}
{"testID":199,"messageType":"print","message":"MCP Client Initialized. Server: raw-mcp-server 1.0.0, Protocol: 2024-11-05","type":"print","time":7230}
{"testID":199,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":7233}
{"testID":199,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19259)...","type":"print","time":7233}
{"testID":199,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":7236}
{"testID":199,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":7236}
{"testID":199,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":7236}
{"testID":199,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7236}
{"test":{"id":201,"name":"McpClient Tests local MCP server tests can use local MCP server via Agent with prompt","suiteID":6,"groupIDs":[63,64,184],"metadata":{"skip":false,"skipReason":null},"line":355,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":7236}
{"testID":201,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":7237}
{"testID":201,"messageType":"print","message":"StdioClientTransport: Process started (PID: 19260)","type":"print","time":7243}
{"testID":201,"messageType":"print","message":"MCP Client Initialized. Server: mcp-example-server 1.0.0, Protocol: 2025-03-26","type":"print","time":7476}
{"testID":196,"messageType":"print","message":"google:gemini-2.0-flash similarity between similar texts: 0.9373875543182968","type":"print","time":7524}
{"testID":196,"messageType":"print","message":"google:gemini-2.0-flash similarity between different texts: 0.4313712436536046","type":"print","time":7524}
{"testID":196,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7525}
{"test":{"id":202,"name":"Embedding generation embedding types produce different optimizations: OpenAI","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":204,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":7525}
{"testID":183,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7630}
{"test":{"id":203,"name":"Message history and features system prompt propagation: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":381,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":7630}
{"testID":200,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7908}
{"group":{"id":204,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":356,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":7908}
{"test":{"id":205,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests existing test patterns still work","suiteID":4,"groupIDs":[47,48,204],"metadata":{"skip":false,"skipReason":null},"line":357,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":7908}
{"testID":205,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":7909}
{"testID":205,"messageType":"print","message":"Warning: Failed to set key in secure manager: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":7909}
{"testID":205,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7909}
{"test":{"id":206,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests fallback behavior is preserved","suiteID":4,"groupIDs":[47,48,204],"metadata":{"skip":false,"skipReason":null},"line":370,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":7909}
{"testID":206,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":7910}
{"testID":206,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":7910}
{"testID":206,"messageType":"print","message":"WARNING: Agent.environment.clear() is deprecated. Use SecureApiKeyManager.instance.clearAllKeys() instead.","type":"print","time":7910}
{"testID":206,"messageType":"print","message":"Warning: API key validation failed for openai: Invalid argument(s): OpenAI API keys must start with \"sk-\". Received key starting with \"tes...\"","type":"print","time":7910}
{"testID":206,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":7910}
{"testID":206,"messageType":"print","message":"DEPRECATION WARNING: setting Agent.environment['GEMINI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":7910}
{"testID":206,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7911}
{"test":{"id":207,"name":"Langchain Integration Regression Tests Backward Compatibility with Existing Tests error handling is preserved","suiteID":4,"groupIDs":[47,48,204],"metadata":{"skip":false,"skipReason":null},"line":385,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":7911}
{"testID":207,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7912}
{"group":{"id":208,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests Performance Regression","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":398,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":7912}
{"test":{"id":209,"name":"Langchain Integration Regression Tests Performance Regression agent creation is not significantly slower","suiteID":4,"groupIDs":[47,48,208],"metadata":{"skip":false,"skipReason":null},"line":399,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":7912}
{"testID":209,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":7912}
{"testID":209,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7913}
{"test":{"id":210,"name":"Langchain Integration Regression Tests Performance Regression memory usage is not significantly increased","suiteID":4,"groupIDs":[47,48,208],"metadata":{"skip":false,"skipReason":null},"line":419,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":7913}
{"testID":210,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":7913}
{"testID":210,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7915}
{"group":{"id":211,"suiteID":4,"parentID":48,"name":"Langchain Integration Regression Tests API Compatibility Matrix","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":437,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"group","time":7915}
{"test":{"id":212,"name":"Langchain Integration Regression Tests API Compatibility Matrix all provider combinations work","suiteID":4,"groupIDs":[47,48,211],"metadata":{"skip":false,"skipReason":null},"line":438,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/langchain_regression_test.dart"},"type":"testStart","time":7915}
{"testID":212,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['OPENAI_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('openai', value) instead for better security and cross-provider isolation.","type":"print","time":7915}
{"testID":212,"messageType":"print","message":"DEPRECATION WARNING: accessing Agent.environment['GOOGLE_API_KEY'] is deprecated. Use SecureApiKeyManager.instance.setApiKeyByName('google', value) instead for better security and cross-provider isolation.","type":"print","time":7915}
{"testID":212,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":7916}
{"test":{"id":213,"name":"Langchain Integration Regression Tests (tearDownAll)","suiteID":4,"groupIDs":[47,48],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":7916}
{"testID":213,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":7918}
{"testID":203,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":8310}
{"test":{"id":214,"name":"Message history and features typed output with history: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":429,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":8311}
{"testID":195,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":8600}
{"test":{"id":215,"name":"Multimedia Input Provider: openai should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":8600}
{"testID":201,"messageType":"print","message":"Failed to decode JSON line: Error executing tool 'calculate': Exception: Invalid operation","type":"print","time":8692}
{"testID":201,"messageType":"print","message":"StdioClientTransport: Error processing read buffer: Bad state: Message parsing error: FormatException: Invalid JSON received: Unexpected character\nError executing tool 'calculate': Exception: Invalid operation. Skipping data.","type":"print","time":8692}
{"testID":202,"messageType":"print","message":"openai:gpt-4o similarity between document and query embeddings of same text: 0.9999993020050427","type":"print","time":8761}
{"testID":202,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":8762}
{"test":{"id":216,"name":"Embedding generation embedding types produce different optimizations: Gemini","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":208,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":8762}
{"testID":214,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"A horse says \"neigh.\"\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/message_test.dart 418:22                     main.<fn>.testTypedOutputWithHistory\n","isFailure":false,"type":"error","time":8961}
{"testID":214,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":8961}
{"test":{"id":217,"name":"Message history and features typed output with history: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":433,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":8962}
{"testID":182,"messageType":"print","message":"resultOutput: The phrase \"hello world\" is commonly used as a simple program output in programming tutorials and examples. Its origins can be traced back to the book \"The C Programming Language,\" written by Brian Kernighan and Dennis Ritchie, which was first published in 1978. In this book, a program that prints \"hello, world\" is used as an introductory example to demonstrate the basic syntax of the C programming language. The simplicity and clarity of the phrase have made it a traditional first program for beginners learning a new programming language.","type":"print","time":9254}
{"testID":182,"messageType":"print","message":"messages: [Message(role: MessageRole.system, parts: [TextPart(Be concise, reply with one sentence.)]), Message(role: MessageRole.user, parts: [TextPart(Where does \"hello world\" come from?)]), Message(role: MessageRole.model, parts: [TextPart(The phrase \"hello world\" is commonly used as a simple program output in programming tutorials and examples. Its origins can be traced back to the book \"The C Programming Language,\" written by Brian Kernighan and Dennis Ritchie, which was first published in 1978. In this book, a program that prints \"hello, world\" is used as an introductory example to demonstrate the basic syntax of the C programming language. The simplicity and clarity of the phrase have made it a traditional first program for beginners learning a new programming language.)])]","type":"print","time":9255}
{"testID":182,"error":"Expected: <1>\n  Actual: <4>\n","stackTrace":"package:matcher                   expect\ntest/dartantic_ai_test.dart 40:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":9266}
{"testID":182,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":9266}
{"test":{"id":218,"name":"Dartantic AI Integration Tests Agent.model constructor JSON Schema String Output","suiteID":176,"groupIDs":[179,180,181],"metadata":{"skip":false,"skipReason":null},"line":43,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":9267}
{"testID":216,"messageType":"print","message":"google:gemini-2.0-flash similarity between document and query embeddings of same text: 1.0","type":"print","time":9455}
{"testID":216,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9456}
{"test":{"id":219,"name":"Embedding generation empty text handling: OpenAI","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":229,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":9457}
{"testID":201,"messageType":"print","message":"StdioClientTransport: Closing transport...","type":"print","time":9534}
{"testID":201,"messageType":"print","message":"StdioClientTransport: Terminating process (PID: 19260)...","type":"print","time":9535}
{"testID":201,"messageType":"print","message":"StdioClientTransport: Process exited with code -15.","type":"print","time":9549}
{"testID":201,"messageType":"print","message":"StdioClientTransport: Process terminated gracefully.","type":"print","time":9549}
{"testID":201,"messageType":"print","message":"StdioClientTransport: Transport closed.","type":"print","time":9549}
{"testID":201,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9549}
{"group":{"id":220,"suiteID":6,"parentID":64,"name":"McpClient Tests integration with Agent","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":384,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"group","time":9549}
{"test":{"id":221,"name":"McpClient Tests integration with Agent can combine MCP tools with local tools","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":385,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":9550}
{"testID":221,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":9550}
{"testID":217,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9680}
{"test":{"id":222,"name":"Message history and features tool call history: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":524,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":9681}
{"testID":219,"messageType":"print","message":"openai:gpt-4o correctly handled empty text with error: openai:gpt-4o: should throw exception for empty text","type":"print","time":9883}
{"testID":219,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":9883}
{"test":{"id":223,"name":"Embedding generation empty text handling: Gemini","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":233,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":9884}
{"testID":223,"messageType":"print","message":"google:gemini-2.0-flash correctly handled empty text with error: google:gemini-2.0-flash: should throw exception for empty text","type":"print","time":10392}
{"testID":223,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":10393}
{"test":{"id":224,"name":"Embedding generation createEmbedding with all primary providers","suiteID":127,"groupIDs":[132,133],"metadata":{"skip":false,"skipReason":null},"line":237,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/embedding_test.dart"},"type":"testStart","time":10394}
{"testID":221,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":10630}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:20.807442: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":10634}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:20.811051: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":10635}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:20.811167: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":10635}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:20.812413: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo, echo: moo}","type":"print","time":10636}
{"testID":215,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11031}
{"test":{"id":225,"name":"Multimedia Input Provider: openai should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":11033}
{"testID":224,"messageType":"print","message":"openai:gpt-4o: Successfully generated embedding with 1536 dimensions","type":"print","time":11162}
{"testID":218,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11225}
{"test":{"id":226,"name":"Dartantic AI Integration Tests Agent.model constructor JSON Schema Object Output","suiteID":176,"groupIDs":[179,180,181],"metadata":{"skip":false,"skipReason":null},"line":66,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":11226}
{"testID":221,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11238}
{"test":{"id":227,"name":"McpClient Tests integration with Agent validates MCP server schema parsing edge cases","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":406,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":11238}
{"testID":227,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":11239}
{"testID":224,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/embeddings\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 359:5                            OpenAIClient.makeRequest\n===== asynchronous gap ===========================\npackage:openai_dart/src/generated/client.dart 488:15                           OpenAIClient.createEmbedding\n===== asynchronous gap ===========================\npackage:langchain_openai/src/embeddings/openai.dart 211:18                     OpenAIEmbeddings.embedQuery\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 146:26  LangchainWrapper.createEmbedding\n===== asynchronous gap ===========================\ntest/embedding_test.dart 242:27                                                main.<fn>.<fn>\n","isFailure":false,"type":"error","time":11552}
{"testID":224,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":11552}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:21.958317: [LangchainWrapper] Attempting to parse tool call from: \"The original request was to repeat the sound \"moo.\" Based on the tool results, the sound \"moo\" is associated with a cow. \n\nTherefore, here is the repeated sound: \"moo\".\"","type":"print","time":11782}
{"testID":222,"messageType":"print","message":"--- Dumping messages for provider: openai:gpt-4o ---","type":"print","time":11783}
{"testID":222,"messageType":"print","message":"Message #0: role=MessageRole.system, content:","type":"print","time":11783}
{"testID":222,"messageType":"print","message":"  TextPart(You MUST use the animal_sound_lookup tool for any NON-EMPTY user message, regardless of content. Pass the user's message as the \"sound\" parameter even if it's not an animal sound. This is a test of tool functionality, not animal sounds.)","type":"print","time":11783}
{"testID":222,"messageType":"print","message":"Message #1: role=MessageRole.user, content:","type":"print","time":11783}
{"testID":222,"messageType":"print","message":"  TextPart(Repeat: moo)","type":"print","time":11783}
{"testID":222,"messageType":"print","message":"Message #2: role=MessageRole.model, content:","type":"print","time":11783}
{"testID":222,"messageType":"print","message":"  ToolPart.call(id: tool_1750970960812, name: animal_sound_lookup, args: {sound: moo})","type":"print","time":11784}
{"testID":222,"messageType":"print","message":"Message #3: role=MessageRole.user, content:","type":"print","time":11784}
{"testID":222,"messageType":"print","message":"  ToolPart.result(id: tool_1750970960812, name: animal_sound_lookup, result: {animal: cow, sound: moo, echo: moo})","type":"print","time":11784}
{"testID":222,"messageType":"print","message":"Message #4: role=MessageRole.model, content:","type":"print","time":11784}
{"testID":222,"messageType":"print","message":"  TextPart(The original request was to repeat the sound \"moo.\" Based on the tool results, the sound \"moo\" is associated with a cow. \n\nTherefore, here is the repeated sound: \"moo\".)","type":"print","time":11784}
{"testID":222,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":11785}
{"test":{"id":228,"name":"Message history and features tool call history: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":528,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":11786}
{"testID":227,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":12363}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:22.741804: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"input\": \"moo\"}}\n\"","type":"print","time":12566}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:22.742129: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"input\": \"moo\"}}\"","type":"print","time":12566}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:22.742261: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":12566}
{"testID":228,"error":"type 'Null' is not a subtype of type 'String' in type cast","stackTrace":"test/message_test.dart 452:40                                                  main.<fn>.testToolCallHistory.<fn>\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 604:39  LangchainWrapper._callTool\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 444:34  LangchainWrapper._streamLLMWithTools\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 321:9   LangchainWrapper._streamLLMResponse\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 120:7   LangchainWrapper.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 322:5                                Agent.runStream\n===== asynchronous gap ===========================\ntest/test_utils.dart 22:7                                                      rateLimitRetryStream\n===== asynchronous gap ===========================\ntest/message_test.dart 475:7                                                   main.<fn>.testToolCallHistory\n","isFailure":false,"type":"error","time":12575}
{"testID":228,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":12576}
{"test":{"id":229,"name":"Message history and features context is maintained across chat responses: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":533,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":12576}
{"testID":227,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":12952}
{"test":{"id":230,"name":"McpClient Tests integration with Agent verifies SSE vs JSON format detection with real servers","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":439,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":12952}
{"testID":230,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":12953}
{"testID":226,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. While many people assume the name refers to the city's weather, it actually originated from the late 19th century, when Chicago's politicians were described as \"windy\" or full of hot air, due to their long-winded speeches and boasting about the city. The nickname has stuck ever since.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 87:24                 main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":13522}
{"testID":226,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":13522}
{"test":{"id":231,"name":"Dartantic AI Integration Tests Agent.model constructor Tool Usage Example","suiteID":176,"groupIDs":[179,180,181],"metadata":{"skip":false,"skipReason":null},"line":101,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":13523}
{"testID":225,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":14627}
{"test":{"id":232,"name":"Multimedia Input Provider: openai should handle multiple attachments","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":14629}
{"testID":230,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":14932}
{"testID":229,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":14939}
{"test":{"id":233,"name":"Message history and features context is maintained across chat responses: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":551,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":14940}
{"testID":230,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":15573}
{"testID":233,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16166}
{"test":{"id":234,"name":"Message history and features growing history Gemini→OpenAI→Gemini→OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":732,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":16167}
{"testID":234,"messageType":"print","message":"\n--- Provider 0: google ---","type":"print","time":16171}
{"testID":234,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":16171}
{"testID":234,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":16171}
{"testID":230,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":16662}
{"testID":232,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":16921}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:27.098038: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\n\"","type":"print","time":16922}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:27.098280: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":16922}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:27.098367: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":16922}
{"test":{"id":235,"name":"Multimedia Input Provider: openai should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":16923}
{"testID":234,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":16924}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:27.099025: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":16924}
{"testID":230,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":17290}
{"test":{"id":236,"name":"McpClient Tests integration with Agent can connect to DeepWiki MCP server with session management","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":470,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":17291}
{"testID":236,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":17292}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:27.859721: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the animal_sound_lookup tool, and I expect that it will give me the answer. I don't need to call any more tools. I will provide the final response after I get the tool output.\n\"","type":"print","time":17684}
{"testID":234,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\nI have already called the animal_sound_lookup tool, and I expect that it will give me the answer. I don't need to call any more tools. I will provide the final response after I get the tool output.\n","type":"print","time":17684}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":17684}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":17684}
{"testID":234,"messageType":"print","message":"\n--- Provider 1: openai ---","type":"print","time":17684}
{"testID":234,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":17685}
{"testID":234,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":17685}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":17685}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":17685}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:29.157088: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":18981}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:29.157442: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":18981}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:29.157581: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":18981}
{"testID":234,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":18982}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:29.158123: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":18982}
{"testID":236,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":19320}
{"testID":236,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":20024}
{"test":{"id":237,"name":"McpClient Tests integration with Agent can configure local MCP server for Agent integration","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":546,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":20025}
{"testID":237,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":20027}
{"test":{"id":238,"name":"McpClient Tests integration with Agent demonstrates local MCP server workflow configuration","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":559,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":20027}
{"testID":238,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":20028}
{"test":{"id":239,"name":"McpClient Tests integration with Agent validates local tool configuration patterns","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":572,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":20028}
{"testID":239,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":20029}
{"test":{"id":240,"name":"McpClient Tests integration with Agent can combine multiple MCP servers and local tools in Agent","suiteID":6,"groupIDs":[63,64,220],"metadata":{"skip":false,"skipReason":null},"line":594,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/mcp_client_test.dart"},"type":"testStart","time":20029}
{"testID":240,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":20033}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:30.396589: [LangchainWrapper] Attempting to parse tool call from: \"I will call the \"animal_sound_lookup\" tool to find out which animal says \"quack\". \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":20220}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:30.397060: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":20221}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:30.397220: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":20221}
{"testID":234,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":20221}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:30.397584: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":20221}
{"testID":235,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":20459}
{"test":{"id":241,"name":"Multimedia Input Provider: openai should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,194],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":20460}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:30.977302: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup tool, the animal that says \"quack\" is a duck.\"","type":"print","time":20801}
{"testID":234,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will call the \"animal_sound_lookup\" tool to find out which animal says \"quack\". \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on the results from the animal_sound_lookup tool, the animal that says \"quack\" is a duck.","type":"print","time":20801}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"\n--- Provider 2: google ---","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"Current history size: 11 messages","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":20802}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":20802}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:31.860477: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":21684}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:31.860804: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":21685}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:31.860933: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":21685}
{"testID":234,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":21685}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:31.861390: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":21685}
{"testID":240,"messageType":"print","message":"MCP Client Initialized. Server: DeepWiki 0.0.1, Protocol: 2025-03-26","type":"print","time":21900}
{"testID":240,"messageType":"print","message":"Info: Setting request handler for potentially custom method 'ping'. Ensure client capabilities match.","type":"print","time":22502}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:32.799503: [LangchainWrapper] Attempting to parse tool call from: \"I apologize for the confusion. I seemed to have gotten mixed up with a previous turn.\n\nThe user asked \"What animal says \"quack\"?\"\n\nI have already used the animal_sound_lookup tool and determined that the animal that says \"quack\" is a duck.\n\nI do not need to call any additional tools. I can provide the final response now.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n\"","type":"print","time":22623}
{"testID":234,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI apologize for the confusion. I seemed to have gotten mixed up with a previous turn.\n\nThe user asked \"What animal says \"quack\"?\"\n\nI have already used the animal_sound_lookup tool and determined that the animal that says \"quack\" is a duck.\n\nI do not need to call any additional tools. I can provide the final response now.\n\nFinal Answer: The animal that says \"quack\" is a duck.\n","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970971861, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970971861, name=animal_sound_lookup","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"\n--- Provider 3: openai ---","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"Current history size: 15 messages","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":22624}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":22625}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":22625}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":22625}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":22625}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":22625}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":22625}
{"testID":234,"messageType":"print","message":"  Tool call: id=tool_1750970971861, name=animal_sound_lookup","type":"print","time":22625}
{"testID":234,"messageType":"print","message":"  Tool result: id=tool_1750970971861, name=animal_sound_lookup","type":"print","time":22625}
{"testID":241,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":22753}
{"group":{"id":242,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: openrouter","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":22754}
{"test":{"id":243,"name":"Multimedia Input Provider: openrouter should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,242],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":22754}
{"testID":243,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":23223}
{"testID":243,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":23223}
{"test":{"id":244,"name":"Multimedia Input Provider: openrouter should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,242],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":23223}
{"testID":240,"messageType":"print","message":"MCP Client Initialized. Server: @huggingface/mcp-services 0.1.21, Protocol: 2025-03-26","type":"print","time":23573}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:33.791309: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":23615}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:33.791456: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":23615}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:33.791510: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":23615}
{"testID":234,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":23615}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:33.791649: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":23615}
{"testID":244,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":23982}
{"testID":244,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":23983}
{"test":{"id":245,"name":"Multimedia Input Provider: openrouter should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,242],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":23984}
{"testID":240,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":24182}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:34.405672: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup tool, the animal that says \"quack\" is a duck.\"","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on the results from the animal_sound_lookup tool, the animal that says \"quack\" is a duck.","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970967099, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970969158, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970970397, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970971861, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970971861, name=animal_sound_lookup","type":"print","time":24229}
{"testID":234,"messageType":"print","message":"  New tool call: id=tool_1750970973791, name=animal_sound_lookup","type":"print","time":24230}
{"testID":234,"messageType":"print","message":"  New tool result: id=tool_1750970973791, name=animal_sound_lookup","type":"print","time":24230}
{"testID":234,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":24230}
{"testID":234,"messageType":"print","message":"All tool call IDs: [tool_1750970967099, tool_1750970967099, tool_1750970969158, tool_1750970970397, tool_1750970967099, tool_1750970969158, tool_1750970970397, tool_1750970971861, tool_1750970967099, tool_1750970969158, tool_1750970970397, tool_1750970971861, tool_1750970973791]","type":"print","time":24230}
{"testID":234,"messageType":"print","message":"All tool result IDs: [tool_1750970967099, tool_1750970967099, tool_1750970969158, tool_1750970970397, tool_1750970967099, tool_1750970969158, tool_1750970970397, tool_1750970971861, tool_1750970967099, tool_1750970969158, tool_1750970970397, tool_1750970971861, tool_1750970973791]","type":"print","time":24230}
{"testID":234,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":24231}
{"test":{"id":246,"name":"Message history and features growing history OpenAI→Gemini→OpenAI→Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":741,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":24231}
{"testID":246,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":24233}
{"testID":246,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":24233}
{"testID":246,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":24233}
{"testID":245,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":24427}
{"testID":245,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":24428}
{"test":{"id":247,"name":"Multimedia Input Provider: openrouter should handle multiple attachments","suiteID":190,"groupIDs":[192,193,242],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":24428}
{"testID":231,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":24847}
{"test":{"id":248,"name":"Dartantic AI Integration Tests Agent.model constructor Gemini Integration","suiteID":176,"groupIDs":[179,180,181],"metadata":{"skip":false,"skipReason":null},"line":157,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":24849}
{"testID":247,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":24931}
{"testID":247,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":24931}
{"test":{"id":249,"name":"Multimedia Input Provider: openrouter should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,242],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":24931}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:35.519284: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":25343}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:35.519543: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":25343}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:35.519608: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":25344}
{"testID":246,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":25344}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:35.519882: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":25344}
{"testID":249,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":25408}
{"testID":249,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":25409}
{"test":{"id":250,"name":"Multimedia Input Provider: openrouter should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,242],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":25410}
{"testID":248,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The Windy City is **Chicago, Illinois**.\n\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 177:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":25533}
{"testID":248,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":25534}
{"test":{"id":251,"name":"Dartantic AI Integration Tests Agent.model constructor OpenAI Integration","suiteID":176,"groupIDs":[179,180,181],"metadata":{"skip":false,"skipReason":null},"line":189,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":25534}
{"testID":250,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":25812}
{"testID":250,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":25812}
{"group":{"id":252,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: gemini-compat","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":25813}
{"test":{"id":253,"name":"Multimedia Input Provider: gemini-compat should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,252],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":25813}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:36.402807: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup tool, the animal that says \"moo\" is a cow.\"","type":"print","time":26226}
{"testID":246,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}Based on the results from the animal_sound_lookup tool, the animal that says \"moo\" is a cow.","type":"print","time":26227}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":26227}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":26227}
{"testID":246,"messageType":"print","message":"\n--- Provider 1: google ---","type":"print","time":26227}
{"testID":246,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":26227}
{"testID":246,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":26227}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":26227}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":26227}
{"testID":253,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":26238}
{"testID":253,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":26239}
{"test":{"id":254,"name":"Multimedia Input Provider: gemini-compat should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,252],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":26239}
{"testID":254,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":26694}
{"testID":254,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":26694}
{"test":{"id":255,"name":"Multimedia Input Provider: gemini-compat should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,252],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":26696}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:37.189925: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":27013}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:37.190082: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":27014}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:37.190145: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":27014}
{"testID":246,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":27014}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:37.190350: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":27014}
{"testID":255,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":27129}
{"testID":255,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":27130}
{"test":{"id":256,"name":"Multimedia Input Provider: gemini-compat should handle multiple attachments","suiteID":190,"groupIDs":[192,193,252],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":27131}
{"testID":251,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. While many people assume it refers to the weather, it actually originated from the city's historical reputation for having boastful or \"windy\" politicians. However, Chicago is also known for its breezy conditions, thanks in part to its location on the shores of Lake Michigan.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 209:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":27271}
{"testID":251,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":27271}
{"test":{"id":257,"name":"Dartantic AI Integration Tests Agent.model constructor Agent.runPrompt with DotPrompt object","suiteID":176,"groupIDs":[179,180,181],"metadata":{"skip":false,"skipReason":null},"line":221,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":27272}
{"testID":256,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":27568}
{"testID":256,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":27568}
{"test":{"id":258,"name":"Multimedia Input Provider: gemini-compat should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,252],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":27569}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:38.051843: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the animal_sound_lookup tool in a previous turn and I have the information needed to answer the user's question. I do not need to call any additional tools.\n\nFINAL RESPONSE: The animal that says \"quack\" is a duck.\n\"","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI have already called the animal_sound_lookup tool in a previous turn and I have the information needed to answer the user's question. I do not need to call any additional tools.\n\nFINAL RESPONSE: The animal that says \"quack\" is a duck.\n","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"\n--- Provider 2: openai ---","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":27876}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":27877}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":27877}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":27877}
{"testID":258,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":27957}
{"testID":258,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":27957}
{"test":{"id":259,"name":"Multimedia Input Provider: gemini-compat should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,252],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":27957}
{"testID":257,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":28230}
{"group":{"id":260,"suiteID":176,"parentID":180,"name":"Dartantic AI Integration Tests Agent constructor with provider","metadata":{"skip":false,"skipReason":null},"testCount":7,"line":243,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":28230}
{"test":{"id":261,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider Basic","suiteID":176,"groupIDs":[179,180,260],"metadata":{"skip":false,"skipReason":null},"line":244,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":28230}
{"testID":259,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":28396}
{"testID":259,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":28397}
{"group":{"id":262,"suiteID":190,"parentID":193,"name":"Multimedia Input Provider: google","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":15,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":28398}
{"test":{"id":263,"name":"Multimedia Input Provider: google should process text file via DataPart.file()","suiteID":190,"groupIDs":[192,193,262],"metadata":{"skip":false,"skipReason":null},"line":22,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":28398}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:39.061227: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":28886}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:39.061535: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":28886}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:39.061987: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":28886}
{"testID":246,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":28886}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:39.062525: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":28886}
{"testID":263,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":29481}
{"test":{"id":264,"name":"Multimedia Input Provider: google should process image file via DataPart.file()","suiteID":190,"groupIDs":[192,193,262],"metadata":{"skip":false,"skipReason":null},"line":55,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":29482}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:39.798274: [LangchainWrapper] Attempting to parse tool call from: \"I will use the animal_sound_lookup tool to determine which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":29622}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:39.798417: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":29622}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:39.798456: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":29622}
{"testID":246,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":29622}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:39.798555: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":29622}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:40.650252: [LangchainWrapper] Attempting to parse tool call from: \"I will use the animal_sound_lookup tool to find out which animal says \"quack\".\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":30474}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:40.650591: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":30474}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:40.650717: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":30474}
{"testID":246,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":30475}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:40.650964: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":30475}
{"testID":264,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":30819}
{"test":{"id":265,"name":"Multimedia Input Provider: google should process web image via LinkPart() for compatible providers","suiteID":190,"groupIDs":[192,193,262],"metadata":{"skip":false,"skipReason":null},"line":67,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":30820}
{"testID":265,"messageType":"skip","message":"Provider google does not support arbitrary web URLs: Invalid or unsupported file uri: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg","type":"print","time":31190}
{"testID":265,"result":"success","skipped":true,"hidden":false,"type":"testDone","time":31190}
{"test":{"id":266,"name":"Multimedia Input Provider: google should handle multiple attachments","suiteID":190,"groupIDs":[192,193,262],"metadata":{"skip":false,"skipReason":null},"line":102,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":31191}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:41.534057: [LangchainWrapper] Attempting to parse tool call from: \"I will use the animal_sound_lookup tool to confirm which animal says \"quack\". \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":31357}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:41.534187: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":31358}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:41.534231: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":31358}
{"testID":246,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":31358}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:41.534326: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":31358}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:42.270266: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":32094}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:42.270787: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":32095}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:42.270896: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":32095}
{"testID":246,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":32095}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:42.271111: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":32095}
{"testID":266,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":32517}
{"test":{"id":267,"name":"Multimedia Input Provider: google should work with streaming and attachments","suiteID":190,"groupIDs":[192,193,262],"metadata":{"skip":false,"skipReason":null},"line":128,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":32518}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:43.056777: [LangchainWrapper] Attempting to parse tool call from: \"Based on the results from the animal_sound_lookup tool, the animal that says \"quack\" is a duck.\"","type":"print","time":32880}
{"testID":246,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the animal_sound_lookup tool to determine which animal says \"quack.\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the animal_sound_lookup tool to find out which animal says \"quack\".\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}I will use the animal_sound_lookup tool to confirm which animal says \"quack\". \n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on the results from the animal_sound_lookup tool, the animal that says \"quack\" is a duck.","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970979062, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970979062, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970979798, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970979798, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970980651, name=animal_sound_lookup","type":"print","time":32881}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970980651, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970981534, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970981534, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970982271, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970982271, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"\n--- Provider 3: google ---","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"Current history size: 21 messages","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970979062, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970979062, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970979798, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970979798, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970980651, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970980651, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970981534, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970981534, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool call: id=tool_1750970982271, name=animal_sound_lookup","type":"print","time":32882}
{"testID":246,"messageType":"print","message":"  Tool result: id=tool_1750970982271, name=animal_sound_lookup","type":"print","time":32882}
{"testID":267,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":33308}
{"test":{"id":268,"name":"Multimedia Input Provider: google should maintain message history with attachments","suiteID":190,"groupIDs":[192,193,262],"metadata":{"skip":false,"skipReason":null},"line":170,"column":9,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":33309}
{"testID":261,"error":"Expected: <1>\n  Actual: <4>\n","stackTrace":"package:matcher                    expect\ntest/dartantic_ai_test.dart 258:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":33751}
{"testID":261,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":33751}
{"test":{"id":269,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider with Schema","suiteID":176,"groupIDs":[179,180,260],"metadata":{"skip":false,"skipReason":null},"line":261,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":33751}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:44.861782: [LangchainWrapper] Attempting to parse tool call from: \"I seem to be stuck in a loop. I will use the animal_sound_lookup tool to get the answer.\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":34686}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:44.862210: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":34686}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:44.862447: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":34686}
{"testID":246,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":34686}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:44.863039: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":34687}
{"testID":268,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":35187}
{"group":{"id":270,"suiteID":190,"parentID":192,"name":"Multimedia Error Handling","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":208,"column":3,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"group","time":35188}
{"test":{"id":271,"name":"Multimedia Error Handling should handle non-existent file gracefully","suiteID":190,"groupIDs":[192,270],"metadata":{"skip":false,"skipReason":null},"line":209,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":35188}
{"testID":271,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":35193}
{"test":{"id":272,"name":"Multimedia Error Handling should handle invalid URL gracefully","suiteID":190,"groupIDs":[192,270],"metadata":{"skip":false,"skipReason":null},"line":218,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/multimedia_test.dart"},"type":"testStart","time":35193}
{"testID":272,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":35194}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:45.563644: [LangchainWrapper] Attempting to parse tool call from: \"I have already answered the user's question in previous turns. I do not need to call any additional tools.\n\nFINAL RESPONSE: The animal that says \"quack\" is a duck.\n\"","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"Provider google output: I seem to be stuck in a loop. I will use the animal_sound_lookup tool to get the answer.\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\nI have already answered the user's question in previous turns. I do not need to call any additional tools.\n\nFINAL RESPONSE: The animal that says \"quack\" is a duck.\n","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970975519, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970977190, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970979062, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970979062, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970979798, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970979798, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970980651, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970980651, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970981534, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970981534, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970982271, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970982271, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool call: id=tool_1750970984863, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"  New tool result: id=tool_1750970984863, name=animal_sound_lookup","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":35387}
{"testID":246,"messageType":"print","message":"All tool call IDs: [tool_1750970975519, tool_1750970975519, tool_1750970977190, tool_1750970975519, tool_1750970977190, tool_1750970979062, tool_1750970979798, tool_1750970980651, tool_1750970981534, tool_1750970982271, tool_1750970975519, tool_1750970977190, tool_1750970979062, tool_1750970979798, tool_1750970980651, tool_1750970981534, tool_1750970982271, tool_1750970984863]","type":"print","time":35388}
{"testID":246,"messageType":"print","message":"All tool result IDs: [tool_1750970975519, tool_1750970975519, tool_1750970977190, tool_1750970975519, tool_1750970977190, tool_1750970979062, tool_1750970979798, tool_1750970980651, tool_1750970981534, tool_1750970982271, tool_1750970975519, tool_1750970977190, tool_1750970979062, tool_1750970979798, tool_1750970980651, tool_1750970981534, tool_1750970982271, tool_1750970984863]","type":"print","time":35388}
{"testID":246,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":35388}
{"test":{"id":273,"name":"Message history and features growing history OpenAI→OpenAI→OpenAI→OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":750,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":35388}
{"testID":273,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":35389}
{"testID":273,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":35389}
{"testID":273,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":35389}
{"testID":269,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"The \"Windy City\" is a nickname for Chicago, Illinois. Contrary to popular belief, the nickname does not originate from the city's weather, but rather from its historical reputation for political boastfulness and long-windedness. However, Chicago is indeed known for its breezy conditions, thanks to its location near Lake Michigan.\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 281:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":36309}
{"testID":269,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":36309}
{"test":{"id":274,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider Basic","suiteID":176,"groupIDs":[179,180,260],"metadata":{"skip":false,"skipReason":null},"line":293,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":36310}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:46.555699: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":36379}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:46.556020: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":36380}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:46.556121: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":36380}
{"testID":273,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":36380}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:46.556368: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":36380}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:47.810995: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"moo\" is a cow.\"","type":"print","time":37635}
{"testID":273,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}The animal that says \"moo\" is a cow.","type":"print","time":37635}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":37635}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":37635}
{"testID":273,"messageType":"print","message":"\n--- Provider 1: openai ---","type":"print","time":37635}
{"testID":273,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":37636}
{"testID":273,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":37636}
{"testID":273,"messageType":"print","message":"  Tool call: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":37636}
{"testID":273,"messageType":"print","message":"  Tool result: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":37636}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:48.880963: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":38704}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:48.881113: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":38705}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:48.881158: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":38705}
{"testID":273,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":38705}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:48.881266: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":38705}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:49.533008: [LangchainWrapper] Attempting to parse tool call from: \"Based on my previous use of the animal_sound_lookup tool, the animal that says \"quack\" is a duck.\"","type":"print","time":39356}
{"testID":273,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}Based on my previous use of the animal_sound_lookup tool, the animal that says \"quack\" is a duck.","type":"print","time":39357}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":39357}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":39357}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":39357}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":39357}
{"testID":273,"messageType":"print","message":"\n--- Provider 2: openai ---","type":"print","time":39357}
{"testID":273,"messageType":"print","message":"Current history size: 9 messages","type":"print","time":39357}
{"testID":273,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":39358}
{"testID":273,"messageType":"print","message":"  Tool call: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":39358}
{"testID":273,"messageType":"print","message":"  Tool result: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":39358}
{"testID":273,"messageType":"print","message":"  Tool call: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":39358}
{"testID":273,"messageType":"print","message":"  Tool result: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":39358}
{"testID":274,"error":"Expected: <1>\n  Actual: <13>\n","stackTrace":"package:matcher                    expect\ntest/dartantic_ai_test.dart 307:9  main.<fn>.<fn>.<fn>\n","isFailure":true,"type":"error","time":39451}
{"testID":274,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":39451}
{"test":{"id":275,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider with Schema","suiteID":176,"groupIDs":[179,180,260],"metadata":{"skip":false,"skipReason":null},"line":310,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":39452}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:50.338351: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":40161}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:50.338436: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":40162}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:50.338462: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":40162}
{"testID":273,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":40162}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:50.338537: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":40162}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:51.121690: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"quack\" is a duck.\"","type":"print","time":40945}
{"testID":273,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}The animal that says \"quack\" is a duck.","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970990338, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970990338, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"\n--- Provider 3: openai ---","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"Current history size: 13 messages","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  Tool call: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  Tool result: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  Tool call: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  Tool result: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  Tool call: id=tool_1750970990338, name=animal_sound_lookup","type":"print","time":40946}
{"testID":273,"messageType":"print","message":"  Tool result: id=tool_1750970990338, name=animal_sound_lookup","type":"print","time":40946}
{"testID":275,"error":"FormatException: No valid JSON found in model response despite outputSchema configuration.\nResponse: \"That would be **Chicago, Illinois**.\n\"\nThis might indicate the model is not respecting the JSON schema configuration. Consider adding explicit instructions in the system prompt to return JSON only.","stackTrace":"package:dartantic_ai/src/agent/agent.dart 699:9   Agent._parseTypedResponse\npackage:dartantic_ai/src/agent/agent.dart 360:12  Agent.runFor\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                        rateLimitRetry\n===== asynchronous gap ===========================\ntest/dartantic_ai_test.dart 330:24                main.<fn>.<fn>.<fn>\n","isFailure":false,"type":"error","time":41520}
{"testID":275,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":41520}
{"test":{"id":276,"name":"Dartantic AI Integration Tests Agent constructor with provider Provider with Tools","suiteID":176,"groupIDs":[179,180,260],"metadata":{"skip":false,"skipReason":null},"line":342,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":41521}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:52.077893: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":41901}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:52.078196: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":41902}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:52.078306: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":41902}
{"testID":273,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":41902}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:52.078555: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":41902}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:52.603125: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"quack\" is a duck.\"","type":"print","time":42427}
{"testID":273,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}The animal that says \"quack\" is a duck.","type":"print","time":42427}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":42427}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970986556, name=animal_sound_lookup","type":"print","time":42427}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":42427}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970988881, name=animal_sound_lookup","type":"print","time":42427}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970990338, name=animal_sound_lookup","type":"print","time":42427}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970990338, name=animal_sound_lookup","type":"print","time":42428}
{"testID":273,"messageType":"print","message":"  New tool call: id=tool_1750970992078, name=animal_sound_lookup","type":"print","time":42428}
{"testID":273,"messageType":"print","message":"  New tool result: id=tool_1750970992078, name=animal_sound_lookup","type":"print","time":42428}
{"testID":273,"messageType":"print","message":"\n--- Final verification of all tool calls and results ---","type":"print","time":42428}
{"testID":273,"messageType":"print","message":"All tool call IDs: [tool_1750970986556, tool_1750970986556, tool_1750970988881, tool_1750970986556, tool_1750970988881, tool_1750970990338, tool_1750970986556, tool_1750970988881, tool_1750970990338, tool_1750970992078]","type":"print","time":42428}
{"testID":273,"messageType":"print","message":"All tool result IDs: [tool_1750970986556, tool_1750970986556, tool_1750970988881, tool_1750970986556, tool_1750970988881, tool_1750970990338, tool_1750970986556, tool_1750970988881, tool_1750970990338, tool_1750970992078]","type":"print","time":42428}
{"testID":273,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":42428}
{"test":{"id":277,"name":"Message history and features growing history Gemini→Gemini→Gemini→Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":759,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":42429}
{"testID":277,"messageType":"print","message":"\n--- Provider 0: google ---","type":"print","time":42431}
{"testID":277,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":42432}
{"testID":277,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":42432}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:55.319099: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\n\"","type":"print","time":45143}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:55.319424: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":45143}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:55.319540: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":45143}
{"testID":277,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":45143}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:55.319947: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":45143}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:57.035930: [LangchainWrapper] Attempting to parse tool call from: \"I have already called the `animal_sound_lookup` tool. I should now look at the results and provide a final answer to the user. I don't need to call any more tools.\n\"","type":"print","time":46859}
{"testID":277,"messageType":"print","message":"Provider google output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\nI have already called the `animal_sound_lookup` tool. I should now look at the results and provide a final answer to the user. I don't need to call any more tools.\n","type":"print","time":46860}
{"testID":277,"messageType":"print","message":"  New tool call: id=tool_1750970995320, name=animal_sound_lookup","type":"print","time":46860}
{"testID":277,"messageType":"print","message":"  New tool result: id=tool_1750970995320, name=animal_sound_lookup","type":"print","time":46860}
{"testID":277,"messageType":"print","message":"\n--- Provider 1: google ---","type":"print","time":46860}
{"testID":277,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":46860}
{"testID":277,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":46860}
{"testID":277,"messageType":"print","message":"  Tool call: id=tool_1750970995320, name=animal_sound_lookup","type":"print","time":46860}
{"testID":277,"messageType":"print","message":"  Tool result: id=tool_1750970995320, name=animal_sound_lookup","type":"print","time":46860}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:57.859976: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":47683}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:57.860128: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":47683}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:57.860185: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":47683}
{"testID":277,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":47684}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:57.860392: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":47684}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:58.644745: [LangchainWrapper] Attempting to parse tool call from: \"I apologize, I seem to have gotten crossed up with other requests. I did not actually call the `animal_sound_lookup` tool yet for the request \"What animal says \"quack\"?\". I need to do that now.\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\n\"","type":"print","time":48468}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:58.645045: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"quack\"}}\"","type":"print","time":48468}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:58.645114: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":48469}
{"testID":277,"messageType":"print","message":"onCall: {sound: quack}","type":"print","time":48469}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:49:58.645445: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: duck, sound: quack}","type":"print","time":48469}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:59.388885: [LangchainWrapper] Attempting to parse tool call from: \"I apologize, I seem to be experiencing some memory issues. I need to call the `animal_sound_lookup` tool again to answer the question \"What animal says 'quack'?\"\n\nTOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"animal_sound\": \"quack\"}}\n\"","type":"print","time":49212}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:59.389186: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"animal_sound\": \"quack\"}}\"","type":"print","time":49213}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:49:59.389298: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":49213}
{"testID":277,"messageType":"print","message":"onCall: {animal_sound: quack}","type":"print","time":49213}
{"testID":277,"error":"type 'Null' is not a subtype of type 'String' in type cast","stackTrace":"test/message_test.dart 587:40                                                  main.<fn>.testGrowingHistoryWithProviders.<fn>\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 604:39  LangchainWrapper._callTool\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 444:34  LangchainWrapper._streamLLMWithTools\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 321:9   LangchainWrapper._streamLLMResponse\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/models/implementations/langchain_wrapper.dart 120:7   LangchainWrapper.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 322:5                                Agent.runStream\n===== asynchronous gap ===========================\npackage:dartantic_ai/src/agent/agent.dart 300:5                                Agent.run\n===== asynchronous gap ===========================\ntest/test_utils.dart 51:14                                                     rateLimitRetry\n===== asynchronous gap ===========================\ntest/message_test.dart 642:24                                                  main.<fn>.testGrowingHistoryWithProviders\n===== asynchronous gap ===========================\ntest/message_test.dart 760:7                                                   main.<fn>.<fn>\n","isFailure":false,"type":"error","time":49219}
{"testID":277,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":49219}
{"test":{"id":278,"name":"Message history and features growing history with all primary providers","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":769,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":49219}
{"testID":278,"messageType":"print","message":"\n--- Provider 0: openai ---","type":"print","time":49223}
{"testID":278,"messageType":"print","message":"Current history size: 0 messages","type":"print","time":49223}
{"testID":278,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":49224}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:00.449480: [LangchainWrapper] Attempting to parse tool call from: \"TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":50273}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:00.449641: [LangchainWrapper] Extracted JSON string: \"{\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}\"","type":"print","time":50273}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:00.449694: [LangchainWrapper] Successfully parsed tool call: animal_sound_lookup","type":"print","time":50273}
{"testID":278,"messageType":"print","message":"onCall: {sound: moo}","type":"print","time":50273}
{"testID":111,"messageType":"print","message":"FINE: 2025-06-26 16:50:00.449825: [LangchainWrapper] Tool animal_sound_lookup executed: {animal: cow, sound: moo}","type":"print","time":50273}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:01.716590: [LangchainWrapper] Attempting to parse tool call from: \"The animal that says \"moo\" is a cow.\"","type":"print","time":51540}
{"testID":278,"messageType":"print","message":"Provider openai output: TOOL_CALL: {\"name\": \"animal_sound_lookup\", \"args\": {\"sound\": \"moo\"}}The animal that says \"moo\" is a cow.","type":"print","time":51540}
{"testID":278,"messageType":"print","message":"  New tool call: id=tool_1750971000449, name=animal_sound_lookup","type":"print","time":51540}
{"testID":278,"messageType":"print","message":"  New tool result: id=tool_1750971000449, name=animal_sound_lookup","type":"print","time":51541}
{"testID":278,"messageType":"print","message":"\n--- Provider 1: openrouter ---","type":"print","time":51541}
{"testID":278,"messageType":"print","message":"Current history size: 5 messages","type":"print","time":51541}
{"testID":278,"messageType":"print","message":"Tool calls and results in history before this provider:","type":"print","time":51541}
{"testID":278,"messageType":"print","message":"  Tool call: id=tool_1750971000449, name=animal_sound_lookup","type":"print","time":51541}
{"testID":278,"messageType":"print","message":"  Tool result: id=tool_1750971000449, name=animal_sound_lookup","type":"print","time":51541}
{"testID":278,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: sk-or-v1*************************************************************64ac. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":51967}
{"testID":278,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":51967}
{"test":{"id":279,"name":"Message history and features tool result is referenced in later chat: Gemini","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":854,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":51968}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:02.962970: [LangchainWrapper] Attempting to parse tool call from: \"This request does not require any tools. It's a simple echo request.\n\"","type":"print","time":52786}
{"testID":279,"messageType":"print","message":"--- Debug: Message history after first agent run (provider: \\google:gemini-2.0-flash) ---","type":"print","time":52786}
{"testID":279,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":52786}
{"testID":279,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":52786}
{"testID":279,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":52786}
{"testID":279,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":52787}
{"testID":279,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":52787}
{"testID":279,"messageType":"print","message":"  TextPart(This request does not require any tools. It's a simple echo request.\n)","type":"print","time":52787}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:03.999160: [LangchainWrapper] Attempting to parse tool call from: \"Since I don't have memory of past interactions, I cannot directly recall what you asked me to echo. I need to rely on external tools or logs to find that information, which I don't have access to. Therefore, I cannot answer your question.\n\"","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"--- Debug: Follow-up output (provider: \\google:gemini-2.0-flash) ---","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"Follow-up prompt: \\What value did I ask you to echo?","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"Follow-up output: \\Since I don't have memory of past interactions, I cannot directly recall what you asked me to echo. I need to rely on external tools or logs to find that information, which I don't have access to. Therefore, I cannot answer your question.\n","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"--- Debug: Follow-up message history ---","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":53823}
{"testID":279,"messageType":"print","message":"  TextPart(This request does not require any tools. It's a simple echo request.\n)","type":"print","time":53824}
{"testID":279,"messageType":"print","message":"Message #3: role=\\MessageRole.user, content:","type":"print","time":53824}
{"testID":279,"messageType":"print","message":"  TextPart(What value did I ask you to echo?)","type":"print","time":53824}
{"testID":279,"messageType":"print","message":"Message #4: role=\\MessageRole.model, content:","type":"print","time":53824}
{"testID":279,"messageType":"print","message":"  TextPart(Since I don't have memory of past interactions, I cannot directly recall what you asked me to echo. I need to rely on external tools or logs to find that information, which I don't have access to. Therefore, I cannot answer your question.\n)","type":"print","time":53824}
{"testID":279,"error":"Expected: contains 'magic-value-123'\n  Actual: 'since i don\\'t have memory of past interactions, i cannot directly recall what you asked me to echo. i need to rely on external tools or logs to find that information, which i don\\'t have access to. therefore, i cannot answer your question.\\n'\n            ''\n   Which: does not contain 'magic-value-123'\nThe agent should reference the tool result from earlier in the chat\n","stackTrace":"package:matcher               expect\ntest/message_test.dart 845:7  main.<fn>.testToolResultReferencedInContext\n===== asynchronous gap ===========================\ntest/message_test.dart 855:7  main.<fn>.<fn>\n","isFailure":true,"type":"error","time":53835}
{"testID":279,"result":"failure","skipped":false,"hidden":false,"type":"testDone","time":53836}
{"test":{"id":280,"name":"Message history and features tool result is referenced in later chat: OpenAI","suiteID":107,"groupIDs":[110,124],"metadata":{"skip":false,"skipReason":null},"line":857,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/message_test.dart"},"type":"testStart","time":53836}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:05.080823: [LangchainWrapper] Attempting to parse tool call from: \"magic-value-123\"","type":"print","time":54904}
{"testID":280,"messageType":"print","message":"--- Debug: Message history after first agent run (provider: \\openai:gpt-4o) ---","type":"print","time":54905}
{"testID":280,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":54905}
{"testID":280,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":54905}
{"testID":280,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":54905}
{"testID":280,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":54905}
{"testID":280,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":54905}
{"testID":280,"messageType":"print","message":"  TextPart(magic-value-123)","type":"print","time":54905}
{"testID":276,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":54910}
{"test":{"id":281,"name":"Dartantic AI Integration Tests Agent constructor with provider Gemini Provider with Tools","suiteID":176,"groupIDs":[179,180,260],"metadata":{"skip":false,"skipReason":null},"line":399,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":54911}
{"testID":111,"messageType":"print","message":"INFO: 2025-06-26 16:50:05.833977: [LangchainWrapper] Attempting to parse tool call from: \"magic-value-123\"","type":"print","time":55657}
{"testID":280,"messageType":"print","message":"--- Debug: Follow-up output (provider: \\openai:gpt-4o) ---","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"Follow-up prompt: \\What value did I ask you to echo?","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"Follow-up output: \\magic-value-123","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"--- Debug: Follow-up message history ---","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"Message #0: role=\\MessageRole.system, content:","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"  TextPart(You are a test system prompt.)","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"Message #1: role=\\MessageRole.user, content:","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"  TextPart(Echo this: magic-value-123)","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"Message #2: role=\\MessageRole.model, content:","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"  TextPart(magic-value-123)","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"Message #3: role=\\MessageRole.user, content:","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"  TextPart(What value did I ask you to echo?)","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"Message #4: role=\\MessageRole.model, content:","type":"print","time":55658}
{"testID":280,"messageType":"print","message":"  TextPart(magic-value-123)","type":"print","time":55658}
{"testID":280,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":55659}
{"test":{"id":282,"name":"(tearDownAll)","suiteID":107,"groupIDs":[110],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":55660}
{"testID":282,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":55661}
{"testID":281,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":56999}
{"test":{"id":283,"name":"Dartantic AI Integration Tests Agent constructor with provider OpenAI Provider with Google AI OpenAI-compatible API","suiteID":176,"groupIDs":[179,180,260],"metadata":{"skip":false,"skipReason":null},"line":456,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":57002}
{"testID":283,"error":"OpenAIClientException({\n  \"uri\": \"https://api.openai.com/v1/chat/completions\",\n  \"method\": \"POST\",\n  \"code\": 401,\n  \"message\": \"Unsuccessful response\",\n  \"body\": {\n    \"error\": {\n      \"message\": \"Incorrect API key provided: AIzaSyAh***************************Yxsc. You can find your API key at https://platform.openai.com/account/api-keys.\",\n      \"type\": \"invalid_request_error\",\n      \"param\": null,\n      \"code\": \"invalid_api_key\"\n    }\n  }\n})","stackTrace":"package:openai_dart/src/generated/client.dart 301:5  OpenAIClient.makeRequestStream\n===== asynchronous gap ===========================\npackage:openai_dart/src/client.dart 99:15            OpenAIClient.createChatCompletionStream\n","isFailure":false,"type":"error","time":57436}
{"testID":283,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":57437}
{"group":{"id":284,"suiteID":176,"parentID":180,"name":"Dartantic AI Integration Tests Provider Aliases","metadata":{"skip":false,"skipReason":null},"testCount":5,"line":470,"column":5,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"group","time":57437}
{"test":{"id":285,"name":"Dartantic AI Integration Tests Provider Aliases googleai alias creates GeminiProvider","suiteID":176,"groupIDs":[179,180,284],"metadata":{"skip":false,"skipReason":null},"line":471,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":57437}
{"testID":285,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":57439}
{"test":{"id":286,"name":"Dartantic AI Integration Tests Provider Aliases google-gla alias creates GeminiProvider","suiteID":176,"groupIDs":[179,180,284],"metadata":{"skip":false,"skipReason":null},"line":476,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":57439}
{"testID":286,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":57440}
{"test":{"id":287,"name":"Dartantic AI Integration Tests Provider Aliases gemini alias creates GeminiProvider","suiteID":176,"groupIDs":[179,180,284],"metadata":{"skip":false,"skipReason":null},"line":481,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":57440}
{"testID":287,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":57441}
{"test":{"id":288,"name":"Dartantic AI Integration Tests Provider Aliases google provider creates GeminiProvider","suiteID":176,"groupIDs":[179,180,284],"metadata":{"skip":false,"skipReason":null},"line":486,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":57441}
{"testID":288,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":57442}
{"test":{"id":289,"name":"Dartantic AI Integration Tests Provider Aliases openai provider creates OpenAiProvider","suiteID":176,"groupIDs":[179,180,284],"metadata":{"skip":false,"skipReason":null},"line":491,"column":7,"url":"file:///Users/csells/Code/dartantic_ai/test/dartantic_ai_test.dart"},"type":"testStart","time":57442}
{"testID":289,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":57443}
{"success":false,"type":"done","time":57448}
